//
// Generated by Bluespec Compiler, version 2021.12.1-27-g9a7d5e05 (build 9a7d5e05)
//
// On Sun May  1 12:27:34 IST 2022
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mk_tb_pe(CLK,
		RST_N);
  input  CLK;
  input  RST_N;

  // register rg_a
  reg [31 : 0] rg_a;
  wire [31 : 0] rg_a$D_IN;
  wire rg_a$EN;

  // register rg_b
  reg [31 : 0] rg_b;
  wire [31 : 0] rg_b$D_IN;
  wire rg_b$EN;

  // register rg_cntr
  reg [3 : 0] rg_cntr;
  wire [3 : 0] rg_cntr$D_IN;
  wire rg_cntr$EN;

  // ports of submodule myPE
  wire [31 : 0] myPE$getC, myPE$putA_in_a, myPE$putB_in_b;
  wire myPE$EN_putA, myPE$EN_putB;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h415;
  reg [63 : 0] v__h666;
  reg [63 : 0] v__h767;
  // synopsys translate_on

  // remaining internal signals
  wire [97 : 0] _0_CONCAT_IF_SEXT_myPE_getC__1_BITS_31_TO_16_2__ETC___d31,
		_0_CONCAT_IF_SEXT_myPE_getC__1_BITS_31_TO_16_2__ETC___d34,
		_0_CONCAT_IF_SEXT_myPE_getC__1_BITS_31_TO_16_2__ETC___d42,
		_0_CONCAT_IF_SEXT_myPE_getC__1_BITS_31_TO_16_2__ETC___d51,
		_0_CONCAT_IF_SEXT_myPE_getC__1_BITS_31_TO_16_2__ETC___d60,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myPE_getC__1__ETC___d37,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myPE_g_ETC___d46,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d55,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d64;
  wire [48 : 0] digit__h1018,
		digit__h1092,
		digit__h1181,
		digit__h1270,
		digit__h1359,
		tx090_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_m_ETC__q2,
		tx179_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q3,
		tx268_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q4,
		tx357_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q5,
		tx__h1090,
		tx__h1179,
		tx__h1268,
		tx__h1357,
		y__h1238,
		y__h1327,
		y__h1416;
  wire [16 : 0] SEXT_myPE_getC__1_BITS_31_TO_16_2___d13;
  wire [15 : 0] myPEgetC_BITS_31_TO_16__q1, x__h1048, y_avValue_snd__h982;

  // submodule myPE
  mk_pe myPE(.CLK(CLK),
	     .RST_N(RST_N),
	     .putA_in_a(myPE$putA_in_a),
	     .putB_in_b(myPE$putB_in_b),
	     .EN_putA(myPE$EN_putA),
	     .EN_putB(myPE$EN_putB),
	     .RDY_putA(),
	     .RDY_putB(),
	     .getA(),
	     .RDY_getA(),
	     .getB(),
	     .RDY_getB(),
	     .getC(myPE$getC),
	     .RDY_getC());

  // register rg_a
  assign rg_a$D_IN = (rg_cntr == 4'd0) ? 32'd6553 : 32'd21845 ;
  assign rg_a$EN = rg_cntr == 4'd0 || rg_cntr == 4'd3 ;

  // register rg_b
  assign rg_b$D_IN = (rg_cntr == 4'd0) ? 32'd3276 : 32'd32768 ;
  assign rg_b$EN = rg_cntr == 4'd0 || rg_cntr == 4'd3 ;

  // register rg_cntr
  assign rg_cntr$D_IN = rg_cntr + 4'd1 ;
  assign rg_cntr$EN = 1'd1 ;

  // submodule myPE
  assign myPE$putA_in_a = rg_a ;
  assign myPE$putB_in_b = rg_b ;
  assign myPE$EN_putA = rg_cntr == 4'd3 || rg_cntr == 4'd5 ;
  assign myPE$EN_putB = rg_cntr == 4'd3 || rg_cntr == 4'd5 ;

  // remaining internal signals
  assign SEXT_myPE_getC__1_BITS_31_TO_16_2___d13 =
	     { myPEgetC_BITS_31_TO_16__q1[15], myPEgetC_BITS_31_TO_16__q1 } ;
  assign _0_CONCAT_IF_SEXT_myPE_getC__1_BITS_31_TO_16_2__ETC___d31 =
	     { 33'd0, x__h1048 } * 49'd10 ;
  assign _0_CONCAT_IF_SEXT_myPE_getC__1_BITS_31_TO_16_2__ETC___d34 =
	     { 33'd0, x__h1048 } * 49'd100 ;
  assign _0_CONCAT_IF_SEXT_myPE_getC__1_BITS_31_TO_16_2__ETC___d42 =
	     { 33'd0, x__h1048 } * 49'd1000 ;
  assign _0_CONCAT_IF_SEXT_myPE_getC__1_BITS_31_TO_16_2__ETC___d51 =
	     { 33'd0, x__h1048 } * 49'd10000 ;
  assign _0_CONCAT_IF_SEXT_myPE_getC__1_BITS_31_TO_16_2__ETC___d60 =
	     { 33'd0, x__h1048 } * 49'd100000 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myPE_getC__1__ETC___d37 =
	     49'd10 * digit__h1018 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myPE_g_ETC___d46 =
	     49'd10 * y__h1238 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d55 =
	     49'd10 * y__h1327 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d64 =
	     49'd10 * y__h1416 ;
  assign digit__h1018 =
	     { 45'd0,
	       _0_CONCAT_IF_SEXT_myPE_getC__1_BITS_31_TO_16_2__ETC___d31[19:16] } ;
  assign digit__h1092 =
	     { 45'd0,
	       tx090_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_m_ETC__q2[3:0] } ;
  assign digit__h1181 =
	     { 45'd0,
	       tx179_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q3[3:0] } ;
  assign digit__h1270 =
	     { 45'd0,
	       tx268_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q4[3:0] } ;
  assign digit__h1359 =
	     { 45'd0,
	       tx357_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q5[3:0] } ;
  assign myPEgetC_BITS_31_TO_16__q1 = myPE$getC[31:16] ;
  assign tx090_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_m_ETC__q2 =
	     tx__h1090 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myPE_getC__1__ETC___d37[48:0] ;
  assign tx179_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q3 =
	     tx__h1179 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myPE_g_ETC___d46[48:0] ;
  assign tx268_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q4 =
	     tx__h1268 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d55[48:0] ;
  assign tx357_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q5 =
	     tx__h1357 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d64[48:0] ;
  assign tx__h1090 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_myPE_getC__1_BITS_31_TO_16_2__ETC___d34[48:16] } ;
  assign tx__h1179 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_myPE_getC__1_BITS_31_TO_16_2__ETC___d42[48:16] } ;
  assign tx__h1268 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_myPE_getC__1_BITS_31_TO_16_2__ETC___d51[48:16] } ;
  assign tx__h1357 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_myPE_getC__1_BITS_31_TO_16_2__ETC___d60[48:16] } ;
  assign x__h1048 =
	     (SEXT_myPE_getC__1_BITS_31_TO_16_2___d13[16] &&
	      myPE$getC[15:0] != 16'd0) ?
	       y_avValue_snd__h982 :
	       myPE$getC[15:0] ;
  assign y__h1238 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myPE_getC__1__ETC___d37[48:0] +
	     digit__h1092 ;
  assign y__h1327 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myPE_g_ETC___d46[48:0] +
	     digit__h1181 ;
  assign y__h1416 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d55[48:0] +
	     digit__h1270 ;
  assign y_avValue_snd__h982 = 16'd0 - myPE$getC[15:0] ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_a <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_b <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_cntr <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (rg_a$EN) rg_a <= `BSV_ASSIGNMENT_DELAY rg_a$D_IN;
	if (rg_b$EN) rg_b <= `BSV_ASSIGNMENT_DELAY rg_b$D_IN;
	if (rg_cntr$EN) rg_cntr <= `BSV_ASSIGNMENT_DELAY rg_cntr$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_a = 32'hAAAAAAAA;
    rg_b = 32'hAAAAAAAA;
    rg_cntr = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr == 4'd3)
	begin
	  v__h415 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr == 4'd3) $display(v__h415, " [TB] doing the put\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr == 4'd5)
	begin
	  v__h666 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr == 4'd5) $display(v__h666, " [TB] doing the put\n");
    if (RST_N != `BSV_RESET_VALUE)
      begin
        v__h767 = $time;
	#0;
      end
    if (RST_N != `BSV_RESET_VALUE) $display(v__h767, "\nMAC: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (SEXT_myPE_getC__1_BITS_31_TO_16_2___d13[16] &&
	  myPE$getC[15:0] != 16'd0 &&
	  SEXT_myPE_getC__1_BITS_31_TO_16_2___d13 == 17'd131071)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (SEXT_myPE_getC__1_BITS_31_TO_16_2___d13[16] &&
	  myPE$getC[15:0] != 16'd0 &&
	  SEXT_myPE_getC__1_BITS_31_TO_16_2___d13 != 17'd131071)
	$write("%0d.",
	       $signed(SEXT_myPE_getC__1_BITS_31_TO_16_2___d13 + 17'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (!SEXT_myPE_getC__1_BITS_31_TO_16_2___d13[16] ||
	  myPE$getC[15:0] == 16'd0)
	$write("%0d.", $signed(SEXT_myPE_getC__1_BITS_31_TO_16_2___d13));
    if (RST_N != `BSV_RESET_VALUE) $write("%0d", digit__h1018);
    if (RST_N != `BSV_RESET_VALUE) $write("%0d", digit__h1092);
    if (RST_N != `BSV_RESET_VALUE) $write("%0d", digit__h1181);
    if (RST_N != `BSV_RESET_VALUE) $write("%0d", digit__h1270);
    if (RST_N != `BSV_RESET_VALUE) $write("%0d", digit__h1359);
    if (RST_N != `BSV_RESET_VALUE) $display("\n");
    if (RST_N != `BSV_RESET_VALUE) if (rg_cntr == 4'd10) $finish(32'd1);
  end
  // synopsys translate_on
endmodule  // mk_tb_pe

