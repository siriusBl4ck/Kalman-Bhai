//
// Generated by Bluespec Compiler, version 2021.07-1-gaf77efcd (build af77efcd)
//
// On Wed May 18 23:54:37 IST 2022
//
//
// Ports:
// Name                         I/O  size props
// RDY_feed_inp_stream            O     1 const
// get_out_stream                 O   192
// RDY_get_out_stream             O     1
// RDY_reset_mod                  O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// feed_inp_stream_a_stream       I   192
// feed_inp_stream_b_stream       I   192
// EN_feed_inp_stream             I     1
// EN_reset_mod                   I     1
// EN_get_out_stream              I     1 unused
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mat_mult_systolic(CLK,
			 RST_N,

			 feed_inp_stream_a_stream,
			 feed_inp_stream_b_stream,
			 EN_feed_inp_stream,
			 RDY_feed_inp_stream,

			 EN_get_out_stream,
			 get_out_stream,
			 RDY_get_out_stream,

			 EN_reset_mod,
			 RDY_reset_mod);
  input  CLK;
  input  RST_N;

  // action method feed_inp_stream
  input  [191 : 0] feed_inp_stream_a_stream;
  input  [191 : 0] feed_inp_stream_b_stream;
  input  EN_feed_inp_stream;
  output RDY_feed_inp_stream;

  // actionvalue method get_out_stream
  input  EN_get_out_stream;
  output [191 : 0] get_out_stream;
  output RDY_get_out_stream;

  // action method reset_mod
  input  EN_reset_mod;
  output RDY_reset_mod;

  // signals for module outputs
  wire [191 : 0] get_out_stream;
  wire RDY_feed_inp_stream, RDY_get_out_stream, RDY_reset_mod;

  // register cntr
  reg [31 : 0] cntr;
  wire [31 : 0] cntr$D_IN;
  wire cntr$EN;

  // register incr
  reg incr;
  wire incr$D_IN, incr$EN;

  // ports of submodule pe_0_0
  wire [31 : 0] pe_0_0$getA,
		pe_0_0$getB,
		pe_0_0$getC,
		pe_0_0$putA_in_a,
		pe_0_0$putB_in_b;
  wire pe_0_0$EN_putA,
       pe_0_0$EN_putB,
       pe_0_0$EN_reset_mod,
       pe_0_0$RDY_reset_mod;

  // ports of submodule pe_0_1
  wire [31 : 0] pe_0_1$getA,
		pe_0_1$getB,
		pe_0_1$getC,
		pe_0_1$putA_in_a,
		pe_0_1$putB_in_b;
  wire pe_0_1$EN_putA,
       pe_0_1$EN_putB,
       pe_0_1$EN_reset_mod,
       pe_0_1$RDY_reset_mod,
       pe_0_1$validAB;

  // ports of submodule pe_0_2
  wire [31 : 0] pe_0_2$getA,
		pe_0_2$getB,
		pe_0_2$getC,
		pe_0_2$putA_in_a,
		pe_0_2$putB_in_b;
  wire pe_0_2$EN_putA,
       pe_0_2$EN_putB,
       pe_0_2$EN_reset_mod,
       pe_0_2$RDY_reset_mod,
       pe_0_2$validAB;

  // ports of submodule pe_0_3
  wire [31 : 0] pe_0_3$getA,
		pe_0_3$getB,
		pe_0_3$getC,
		pe_0_3$putA_in_a,
		pe_0_3$putB_in_b;
  wire pe_0_3$EN_putA,
       pe_0_3$EN_putB,
       pe_0_3$EN_reset_mod,
       pe_0_3$RDY_reset_mod,
       pe_0_3$validAB;

  // ports of submodule pe_0_4
  wire [31 : 0] pe_0_4$getA,
		pe_0_4$getB,
		pe_0_4$getC,
		pe_0_4$putA_in_a,
		pe_0_4$putB_in_b;
  wire pe_0_4$EN_putA,
       pe_0_4$EN_putB,
       pe_0_4$EN_reset_mod,
       pe_0_4$RDY_reset_mod,
       pe_0_4$validAB;

  // ports of submodule pe_0_5
  wire [31 : 0] pe_0_5$getB, pe_0_5$getC, pe_0_5$putA_in_a, pe_0_5$putB_in_b;
  wire pe_0_5$EN_putA,
       pe_0_5$EN_putB,
       pe_0_5$EN_reset_mod,
       pe_0_5$RDY_reset_mod,
       pe_0_5$validAB;

  // ports of submodule pe_1_0
  wire [31 : 0] pe_1_0$getA,
		pe_1_0$getB,
		pe_1_0$getC,
		pe_1_0$putA_in_a,
		pe_1_0$putB_in_b;
  wire pe_1_0$EN_putA,
       pe_1_0$EN_putB,
       pe_1_0$EN_reset_mod,
       pe_1_0$RDY_reset_mod,
       pe_1_0$validAB;

  // ports of submodule pe_1_1
  wire [31 : 0] pe_1_1$getA,
		pe_1_1$getB,
		pe_1_1$getC,
		pe_1_1$putA_in_a,
		pe_1_1$putB_in_b;
  wire pe_1_1$EN_putA,
       pe_1_1$EN_putB,
       pe_1_1$EN_reset_mod,
       pe_1_1$RDY_reset_mod,
       pe_1_1$validAB;

  // ports of submodule pe_1_2
  wire [31 : 0] pe_1_2$getA,
		pe_1_2$getB,
		pe_1_2$getC,
		pe_1_2$putA_in_a,
		pe_1_2$putB_in_b;
  wire pe_1_2$EN_putA,
       pe_1_2$EN_putB,
       pe_1_2$EN_reset_mod,
       pe_1_2$RDY_reset_mod,
       pe_1_2$validAB;

  // ports of submodule pe_1_3
  wire [31 : 0] pe_1_3$getA,
		pe_1_3$getB,
		pe_1_3$getC,
		pe_1_3$putA_in_a,
		pe_1_3$putB_in_b;
  wire pe_1_3$EN_putA,
       pe_1_3$EN_putB,
       pe_1_3$EN_reset_mod,
       pe_1_3$RDY_reset_mod,
       pe_1_3$validAB;

  // ports of submodule pe_1_4
  wire [31 : 0] pe_1_4$getA,
		pe_1_4$getB,
		pe_1_4$getC,
		pe_1_4$putA_in_a,
		pe_1_4$putB_in_b;
  wire pe_1_4$EN_putA,
       pe_1_4$EN_putB,
       pe_1_4$EN_reset_mod,
       pe_1_4$RDY_reset_mod,
       pe_1_4$validAB;

  // ports of submodule pe_1_5
  wire [31 : 0] pe_1_5$getB, pe_1_5$getC, pe_1_5$putA_in_a, pe_1_5$putB_in_b;
  wire pe_1_5$EN_putA,
       pe_1_5$EN_putB,
       pe_1_5$EN_reset_mod,
       pe_1_5$RDY_reset_mod,
       pe_1_5$validAB;

  // ports of submodule pe_2_0
  wire [31 : 0] pe_2_0$getA,
		pe_2_0$getB,
		pe_2_0$getC,
		pe_2_0$putA_in_a,
		pe_2_0$putB_in_b;
  wire pe_2_0$EN_putA,
       pe_2_0$EN_putB,
       pe_2_0$EN_reset_mod,
       pe_2_0$RDY_reset_mod,
       pe_2_0$validAB;

  // ports of submodule pe_2_1
  wire [31 : 0] pe_2_1$getA,
		pe_2_1$getB,
		pe_2_1$getC,
		pe_2_1$putA_in_a,
		pe_2_1$putB_in_b;
  wire pe_2_1$EN_putA,
       pe_2_1$EN_putB,
       pe_2_1$EN_reset_mod,
       pe_2_1$RDY_reset_mod,
       pe_2_1$validAB;

  // ports of submodule pe_2_2
  wire [31 : 0] pe_2_2$getA,
		pe_2_2$getB,
		pe_2_2$getC,
		pe_2_2$putA_in_a,
		pe_2_2$putB_in_b;
  wire pe_2_2$EN_putA,
       pe_2_2$EN_putB,
       pe_2_2$EN_reset_mod,
       pe_2_2$RDY_reset_mod,
       pe_2_2$validAB;

  // ports of submodule pe_2_3
  wire [31 : 0] pe_2_3$getA,
		pe_2_3$getB,
		pe_2_3$getC,
		pe_2_3$putA_in_a,
		pe_2_3$putB_in_b;
  wire pe_2_3$EN_putA,
       pe_2_3$EN_putB,
       pe_2_3$EN_reset_mod,
       pe_2_3$RDY_reset_mod,
       pe_2_3$validAB;

  // ports of submodule pe_2_4
  wire [31 : 0] pe_2_4$getA,
		pe_2_4$getB,
		pe_2_4$getC,
		pe_2_4$putA_in_a,
		pe_2_4$putB_in_b;
  wire pe_2_4$EN_putA,
       pe_2_4$EN_putB,
       pe_2_4$EN_reset_mod,
       pe_2_4$RDY_reset_mod,
       pe_2_4$validAB;

  // ports of submodule pe_2_5
  wire [31 : 0] pe_2_5$getB, pe_2_5$getC, pe_2_5$putA_in_a, pe_2_5$putB_in_b;
  wire pe_2_5$EN_putA,
       pe_2_5$EN_putB,
       pe_2_5$EN_reset_mod,
       pe_2_5$RDY_reset_mod,
       pe_2_5$validAB;

  // ports of submodule pe_3_0
  wire [31 : 0] pe_3_0$getA,
		pe_3_0$getB,
		pe_3_0$getC,
		pe_3_0$putA_in_a,
		pe_3_0$putB_in_b;
  wire pe_3_0$EN_putA,
       pe_3_0$EN_putB,
       pe_3_0$EN_reset_mod,
       pe_3_0$RDY_reset_mod,
       pe_3_0$validAB;

  // ports of submodule pe_3_1
  wire [31 : 0] pe_3_1$getA,
		pe_3_1$getB,
		pe_3_1$getC,
		pe_3_1$putA_in_a,
		pe_3_1$putB_in_b;
  wire pe_3_1$EN_putA,
       pe_3_1$EN_putB,
       pe_3_1$EN_reset_mod,
       pe_3_1$RDY_reset_mod,
       pe_3_1$validAB;

  // ports of submodule pe_3_2
  wire [31 : 0] pe_3_2$getA,
		pe_3_2$getB,
		pe_3_2$getC,
		pe_3_2$putA_in_a,
		pe_3_2$putB_in_b;
  wire pe_3_2$EN_putA,
       pe_3_2$EN_putB,
       pe_3_2$EN_reset_mod,
       pe_3_2$RDY_reset_mod,
       pe_3_2$validAB;

  // ports of submodule pe_3_3
  wire [31 : 0] pe_3_3$getA,
		pe_3_3$getB,
		pe_3_3$getC,
		pe_3_3$putA_in_a,
		pe_3_3$putB_in_b;
  wire pe_3_3$EN_putA,
       pe_3_3$EN_putB,
       pe_3_3$EN_reset_mod,
       pe_3_3$RDY_reset_mod,
       pe_3_3$validAB;

  // ports of submodule pe_3_4
  wire [31 : 0] pe_3_4$getA,
		pe_3_4$getB,
		pe_3_4$getC,
		pe_3_4$putA_in_a,
		pe_3_4$putB_in_b;
  wire pe_3_4$EN_putA,
       pe_3_4$EN_putB,
       pe_3_4$EN_reset_mod,
       pe_3_4$RDY_reset_mod,
       pe_3_4$validAB;

  // ports of submodule pe_3_5
  wire [31 : 0] pe_3_5$getB, pe_3_5$getC, pe_3_5$putA_in_a, pe_3_5$putB_in_b;
  wire pe_3_5$EN_putA,
       pe_3_5$EN_putB,
       pe_3_5$EN_reset_mod,
       pe_3_5$RDY_reset_mod,
       pe_3_5$validAB;

  // ports of submodule pe_4_0
  wire [31 : 0] pe_4_0$getA,
		pe_4_0$getB,
		pe_4_0$getC,
		pe_4_0$putA_in_a,
		pe_4_0$putB_in_b;
  wire pe_4_0$EN_putA,
       pe_4_0$EN_putB,
       pe_4_0$EN_reset_mod,
       pe_4_0$RDY_reset_mod,
       pe_4_0$validAB;

  // ports of submodule pe_4_1
  wire [31 : 0] pe_4_1$getA,
		pe_4_1$getB,
		pe_4_1$getC,
		pe_4_1$putA_in_a,
		pe_4_1$putB_in_b;
  wire pe_4_1$EN_putA,
       pe_4_1$EN_putB,
       pe_4_1$EN_reset_mod,
       pe_4_1$RDY_reset_mod,
       pe_4_1$validAB;

  // ports of submodule pe_4_2
  wire [31 : 0] pe_4_2$getA,
		pe_4_2$getB,
		pe_4_2$getC,
		pe_4_2$putA_in_a,
		pe_4_2$putB_in_b;
  wire pe_4_2$EN_putA,
       pe_4_2$EN_putB,
       pe_4_2$EN_reset_mod,
       pe_4_2$RDY_reset_mod,
       pe_4_2$validAB;

  // ports of submodule pe_4_3
  wire [31 : 0] pe_4_3$getA,
		pe_4_3$getB,
		pe_4_3$getC,
		pe_4_3$putA_in_a,
		pe_4_3$putB_in_b;
  wire pe_4_3$EN_putA,
       pe_4_3$EN_putB,
       pe_4_3$EN_reset_mod,
       pe_4_3$RDY_reset_mod,
       pe_4_3$validAB;

  // ports of submodule pe_4_4
  wire [31 : 0] pe_4_4$getA,
		pe_4_4$getB,
		pe_4_4$getC,
		pe_4_4$putA_in_a,
		pe_4_4$putB_in_b;
  wire pe_4_4$EN_putA,
       pe_4_4$EN_putB,
       pe_4_4$EN_reset_mod,
       pe_4_4$RDY_reset_mod,
       pe_4_4$validAB;

  // ports of submodule pe_4_5
  wire [31 : 0] pe_4_5$getB, pe_4_5$getC, pe_4_5$putA_in_a, pe_4_5$putB_in_b;
  wire pe_4_5$EN_putA,
       pe_4_5$EN_putB,
       pe_4_5$EN_reset_mod,
       pe_4_5$RDY_reset_mod,
       pe_4_5$validAB;

  // ports of submodule pe_5_0
  wire [31 : 0] pe_5_0$getA, pe_5_0$getC, pe_5_0$putA_in_a, pe_5_0$putB_in_b;
  wire pe_5_0$EN_putA,
       pe_5_0$EN_putB,
       pe_5_0$EN_reset_mod,
       pe_5_0$RDY_reset_mod,
       pe_5_0$validAB;

  // ports of submodule pe_5_1
  wire [31 : 0] pe_5_1$getA, pe_5_1$getC, pe_5_1$putA_in_a, pe_5_1$putB_in_b;
  wire pe_5_1$EN_putA,
       pe_5_1$EN_putB,
       pe_5_1$EN_reset_mod,
       pe_5_1$RDY_reset_mod,
       pe_5_1$validAB;

  // ports of submodule pe_5_2
  wire [31 : 0] pe_5_2$getA, pe_5_2$getC, pe_5_2$putA_in_a, pe_5_2$putB_in_b;
  wire pe_5_2$EN_putA,
       pe_5_2$EN_putB,
       pe_5_2$EN_reset_mod,
       pe_5_2$RDY_reset_mod,
       pe_5_2$validAB;

  // ports of submodule pe_5_3
  wire [31 : 0] pe_5_3$getA, pe_5_3$getC, pe_5_3$putA_in_a, pe_5_3$putB_in_b;
  wire pe_5_3$EN_putA,
       pe_5_3$EN_putB,
       pe_5_3$EN_reset_mod,
       pe_5_3$RDY_reset_mod,
       pe_5_3$validAB;

  // ports of submodule pe_5_4
  wire [31 : 0] pe_5_4$getA, pe_5_4$getC, pe_5_4$putA_in_a, pe_5_4$putB_in_b;
  wire pe_5_4$EN_putA,
       pe_5_4$EN_putB,
       pe_5_4$EN_reset_mod,
       pe_5_4$RDY_reset_mod,
       pe_5_4$validAB;

  // ports of submodule pe_5_5
  wire [31 : 0] pe_5_5$getC, pe_5_5$putA_in_a, pe_5_5$putB_in_b;
  wire pe_5_5$EN_putA,
       pe_5_5$EN_putB,
       pe_5_5$EN_reset_mod,
       pe_5_5$RDY_reset_mod;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h28583;
  reg [63 : 0] v__h29686;
  reg [63 : 0] v__h30656;
  reg [63 : 0] v__h31626;
  reg [63 : 0] v__h32596;
  reg [63 : 0] v__h33566;
  // synopsys translate_on

  // remaining internal signals
  reg [15 : 0] SEL_ARR_pe_0_0_getC__50_BITS_31_TO_16_51_pe_0__ETC___d263,
	       SEL_ARR_pe_1_0_getC__35_BITS_31_TO_16_36_pe_1__ETC___d348,
	       SEL_ARR_pe_2_0_getC__20_BITS_31_TO_16_21_pe_2__ETC___d433,
	       SEL_ARR_pe_3_0_getC__05_BITS_31_TO_16_06_pe_3__ETC___d518,
	       SEL_ARR_pe_4_0_getC__90_BITS_31_TO_16_91_pe_4__ETC___d603,
	       SEL_ARR_pe_5_0_getC__75_BITS_31_TO_16_76_pe_5__ETC___d688,
	       fpart__h28635,
	       fpart__h29738,
	       fpart__h30708,
	       fpart__h31678,
	       fpart__h32648,
	       fpart__h33618;
  wire [127 : 0] IF_cntr_30_MINUS_5_70_MINUS_6_71_MINUS_1_72_SL_ETC___d764;
  wire [97 : 0] _0_CONCAT_IF_SEXT_SEL_ARR_pe_0_0_getC__50_BITS__ETC___d292,
		_0_CONCAT_IF_SEXT_SEL_ARR_pe_0_0_getC__50_BITS__ETC___d295,
		_0_CONCAT_IF_SEXT_SEL_ARR_pe_0_0_getC__50_BITS__ETC___d303,
		_0_CONCAT_IF_SEXT_SEL_ARR_pe_0_0_getC__50_BITS__ETC___d312,
		_0_CONCAT_IF_SEXT_SEL_ARR_pe_0_0_getC__50_BITS__ETC___d321,
		_0_CONCAT_IF_SEXT_SEL_ARR_pe_1_0_getC__35_BITS__ETC___d377,
		_0_CONCAT_IF_SEXT_SEL_ARR_pe_1_0_getC__35_BITS__ETC___d380,
		_0_CONCAT_IF_SEXT_SEL_ARR_pe_1_0_getC__35_BITS__ETC___d388,
		_0_CONCAT_IF_SEXT_SEL_ARR_pe_1_0_getC__35_BITS__ETC___d397,
		_0_CONCAT_IF_SEXT_SEL_ARR_pe_1_0_getC__35_BITS__ETC___d406,
		_0_CONCAT_IF_SEXT_SEL_ARR_pe_2_0_getC__20_BITS__ETC___d462,
		_0_CONCAT_IF_SEXT_SEL_ARR_pe_2_0_getC__20_BITS__ETC___d465,
		_0_CONCAT_IF_SEXT_SEL_ARR_pe_2_0_getC__20_BITS__ETC___d473,
		_0_CONCAT_IF_SEXT_SEL_ARR_pe_2_0_getC__20_BITS__ETC___d482,
		_0_CONCAT_IF_SEXT_SEL_ARR_pe_2_0_getC__20_BITS__ETC___d491,
		_0_CONCAT_IF_SEXT_SEL_ARR_pe_3_0_getC__05_BITS__ETC___d547,
		_0_CONCAT_IF_SEXT_SEL_ARR_pe_3_0_getC__05_BITS__ETC___d550,
		_0_CONCAT_IF_SEXT_SEL_ARR_pe_3_0_getC__05_BITS__ETC___d558,
		_0_CONCAT_IF_SEXT_SEL_ARR_pe_3_0_getC__05_BITS__ETC___d567,
		_0_CONCAT_IF_SEXT_SEL_ARR_pe_3_0_getC__05_BITS__ETC___d576,
		_0_CONCAT_IF_SEXT_SEL_ARR_pe_4_0_getC__90_BITS__ETC___d632,
		_0_CONCAT_IF_SEXT_SEL_ARR_pe_4_0_getC__90_BITS__ETC___d635,
		_0_CONCAT_IF_SEXT_SEL_ARR_pe_4_0_getC__90_BITS__ETC___d643,
		_0_CONCAT_IF_SEXT_SEL_ARR_pe_4_0_getC__90_BITS__ETC___d652,
		_0_CONCAT_IF_SEXT_SEL_ARR_pe_4_0_getC__90_BITS__ETC___d661,
		_0_CONCAT_IF_SEXT_SEL_ARR_pe_5_0_getC__75_BITS__ETC___d717,
		_0_CONCAT_IF_SEXT_SEL_ARR_pe_5_0_getC__75_BITS__ETC___d720,
		_0_CONCAT_IF_SEXT_SEL_ARR_pe_5_0_getC__75_BITS__ETC___d728,
		_0_CONCAT_IF_SEXT_SEL_ARR_pe_5_0_getC__75_BITS__ETC___d737,
		_0_CONCAT_IF_SEXT_SEL_ARR_pe_5_0_getC__75_BITS__ETC___d746,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_pe_0__ETC___d298,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_pe_1__ETC___d383,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_pe_2__ETC___d468,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_pe_3__ETC___d553,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_pe_4__ETC___d638,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_pe_5__ETC___d723,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d307,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d392,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d477,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d562,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d647,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d732,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d316,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d401,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d486,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d571,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d656,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d741,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d325,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d410,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d495,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d580,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d665,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d750;
  wire [63 : 0] IF_cntr_30_MINUS_5_70_MINUS_6_71_MINUS_1_72_SL_ETC___d759;
  wire [48 : 0] digit__h29124,
		digit__h29191,
		digit__h29280,
		digit__h29369,
		digit__h29458,
		digit__h30094,
		digit__h30161,
		digit__h30250,
		digit__h30339,
		digit__h30428,
		digit__h31064,
		digit__h31131,
		digit__h31220,
		digit__h31309,
		digit__h31398,
		digit__h32034,
		digit__h32101,
		digit__h32190,
		digit__h32279,
		digit__h32368,
		digit__h33004,
		digit__h33071,
		digit__h33160,
		digit__h33249,
		digit__h33338,
		digit__h33974,
		digit__h34041,
		digit__h34130,
		digit__h34219,
		digit__h34308,
		tx0159_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q5,
		tx0248_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q6,
		tx0337_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q7,
		tx0426_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q8,
		tx1129_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q9,
		tx1218_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q10,
		tx1307_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q11,
		tx1396_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q12,
		tx2099_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q13,
		tx2188_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q14,
		tx2277_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q15,
		tx2366_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q16,
		tx3069_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q17,
		tx3158_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q18,
		tx3247_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q19,
		tx3336_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q20,
		tx4039_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q21,
		tx4128_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q22,
		tx4217_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q23,
		tx4306_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q24,
		tx9189_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q1,
		tx9278_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q2,
		tx9367_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q3,
		tx9456_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q4,
		tx__h29189,
		tx__h29278,
		tx__h29367,
		tx__h29456,
		tx__h30159,
		tx__h30248,
		tx__h30337,
		tx__h30426,
		tx__h31129,
		tx__h31218,
		tx__h31307,
		tx__h31396,
		tx__h32099,
		tx__h32188,
		tx__h32277,
		tx__h32366,
		tx__h33069,
		tx__h33158,
		tx__h33247,
		tx__h33336,
		tx__h34039,
		tx__h34128,
		tx__h34217,
		tx__h34306,
		y__h29337,
		y__h29426,
		y__h29515,
		y__h30307,
		y__h30396,
		y__h30485,
		y__h31277,
		y__h31366,
		y__h31455,
		y__h32247,
		y__h32336,
		y__h32425,
		y__h33217,
		y__h33306,
		y__h33395,
		y__h34187,
		y__h34276,
		y__h34365;
  wire [31 : 0] cntr_30_MINUS_1_30_MINUS_6_31_MINUS_1___d332,
		cntr_30_MINUS_2_15_MINUS_6_16_MINUS_1___d417,
		cntr_30_MINUS_3_00_MINUS_6_01_MINUS_1___d502,
		cntr_30_MINUS_4_85_MINUS_6_86_MINUS_1___d587,
		cntr_30_MINUS_5_70_MINUS_6_71_MINUS_1___d672,
		x__h28864;
  wire [16 : 0] SEXT_SEL_ARR_pe_0_0_getC__50_BITS_31_TO_16_51__ETC___d264,
		SEXT_SEL_ARR_pe_1_0_getC__35_BITS_31_TO_16_36__ETC___d349,
		SEXT_SEL_ARR_pe_2_0_getC__20_BITS_31_TO_16_21__ETC___d434,
		SEXT_SEL_ARR_pe_3_0_getC__05_BITS_31_TO_16_06__ETC___d519,
		SEXT_SEL_ARR_pe_4_0_getC__90_BITS_31_TO_16_91__ETC___d604,
		SEXT_SEL_ARR_pe_5_0_getC__75_BITS_31_TO_16_76__ETC___d689;
  wire [15 : 0] x__h29154,
		x__h30124,
		x__h31094,
		x__h32064,
		x__h33034,
		x__h34004,
		y_avValue_snd__h29088,
		y_avValue_snd__h30058,
		y_avValue_snd__h31028,
		y_avValue_snd__h31998,
		y_avValue_snd__h32968,
		y_avValue_snd__h33938;
  wire cntr_30_MINUS_1_30_MINUS_6_31_MINUS_1_32_SLT_6___d333,
       cntr_30_MINUS_2_15_MINUS_6_16_MINUS_1_17_SLT_6___d418,
       cntr_30_MINUS_3_00_MINUS_6_01_MINUS_1_02_SLT_6___d503,
       cntr_30_MINUS_4_85_MINUS_6_86_MINUS_1_87_SLT_6___d588,
       cntr_30_MINUS_5_70_MINUS_6_71_MINUS_1_72_SLT_6___d673,
       cntr_30_MINUS_6_46_MINUS_1_47_SLT_6___d248,
       pe_0_5_RDY_reset_mod__75_AND_pe_1_0_RDY_reset__ETC___d835,
       pe_1_5_RDY_reset_mod__81_AND_pe_2_0_RDY_reset__ETC___d829,
       pe_2_5_RDY_reset_mod__87_AND_pe_3_0_RDY_reset__ETC___d823,
       pe_3_5_RDY_reset_mod__93_AND_pe_4_0_RDY_reset__ETC___d817,
       pe_4_5_RDY_reset_mod__99_AND_pe_5_0_RDY_reset__ETC___d811;

  // action method feed_inp_stream
  assign RDY_feed_inp_stream = 1'd1 ;

  // actionvalue method get_out_stream
  assign get_out_stream =
	     { IF_cntr_30_MINUS_5_70_MINUS_6_71_MINUS_1_72_SL_ETC___d764,
	       cntr_30_MINUS_1_30_MINUS_6_31_MINUS_1_32_SLT_6___d333 ?
		 { SEL_ARR_pe_1_0_getC__35_BITS_31_TO_16_36_pe_1__ETC___d348,
		   fpart__h29738 } :
		 32'd0,
	       cntr_30_MINUS_6_46_MINUS_1_47_SLT_6___d248 ?
		 { SEL_ARR_pe_0_0_getC__50_BITS_31_TO_16_51_pe_0__ETC___d263,
		   fpart__h28635 } :
		 32'd0 } ;
  assign RDY_get_out_stream = (cntr ^ 32'h80000000) > 32'h80000006 ;

  // action method reset_mod
  assign RDY_reset_mod =
	     pe_0_0$RDY_reset_mod && pe_0_1$RDY_reset_mod &&
	     pe_0_2$RDY_reset_mod &&
	     pe_0_3$RDY_reset_mod &&
	     pe_0_4$RDY_reset_mod &&
	     pe_0_5_RDY_reset_mod__75_AND_pe_1_0_RDY_reset__ETC___d835 ;

  // submodule pe_0_0
  mk_pe pe_0_0(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_0_0$putA_in_a),
	       .putB_in_b(pe_0_0$putB_in_b),
	       .EN_putA(pe_0_0$EN_putA),
	       .EN_putB(pe_0_0$EN_putB),
	       .EN_reset_mod(pe_0_0$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_0_0$getA),
	       .RDY_getA(),
	       .getB(pe_0_0$getB),
	       .RDY_getB(),
	       .getC(pe_0_0$getC),
	       .RDY_getC(),
	       .validAB(),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_0_0$RDY_reset_mod));

  // submodule pe_0_1
  mk_pe pe_0_1(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_0_1$putA_in_a),
	       .putB_in_b(pe_0_1$putB_in_b),
	       .EN_putA(pe_0_1$EN_putA),
	       .EN_putB(pe_0_1$EN_putB),
	       .EN_reset_mod(pe_0_1$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_0_1$getA),
	       .RDY_getA(),
	       .getB(pe_0_1$getB),
	       .RDY_getB(),
	       .getC(pe_0_1$getC),
	       .RDY_getC(),
	       .validAB(pe_0_1$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_0_1$RDY_reset_mod));

  // submodule pe_0_2
  mk_pe pe_0_2(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_0_2$putA_in_a),
	       .putB_in_b(pe_0_2$putB_in_b),
	       .EN_putA(pe_0_2$EN_putA),
	       .EN_putB(pe_0_2$EN_putB),
	       .EN_reset_mod(pe_0_2$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_0_2$getA),
	       .RDY_getA(),
	       .getB(pe_0_2$getB),
	       .RDY_getB(),
	       .getC(pe_0_2$getC),
	       .RDY_getC(),
	       .validAB(pe_0_2$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_0_2$RDY_reset_mod));

  // submodule pe_0_3
  mk_pe pe_0_3(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_0_3$putA_in_a),
	       .putB_in_b(pe_0_3$putB_in_b),
	       .EN_putA(pe_0_3$EN_putA),
	       .EN_putB(pe_0_3$EN_putB),
	       .EN_reset_mod(pe_0_3$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_0_3$getA),
	       .RDY_getA(),
	       .getB(pe_0_3$getB),
	       .RDY_getB(),
	       .getC(pe_0_3$getC),
	       .RDY_getC(),
	       .validAB(pe_0_3$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_0_3$RDY_reset_mod));

  // submodule pe_0_4
  mk_pe pe_0_4(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_0_4$putA_in_a),
	       .putB_in_b(pe_0_4$putB_in_b),
	       .EN_putA(pe_0_4$EN_putA),
	       .EN_putB(pe_0_4$EN_putB),
	       .EN_reset_mod(pe_0_4$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_0_4$getA),
	       .RDY_getA(),
	       .getB(pe_0_4$getB),
	       .RDY_getB(),
	       .getC(pe_0_4$getC),
	       .RDY_getC(),
	       .validAB(pe_0_4$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_0_4$RDY_reset_mod));

  // submodule pe_0_5
  mk_pe pe_0_5(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_0_5$putA_in_a),
	       .putB_in_b(pe_0_5$putB_in_b),
	       .EN_putA(pe_0_5$EN_putA),
	       .EN_putB(pe_0_5$EN_putB),
	       .EN_reset_mod(pe_0_5$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(),
	       .RDY_getA(),
	       .getB(pe_0_5$getB),
	       .RDY_getB(),
	       .getC(pe_0_5$getC),
	       .RDY_getC(),
	       .validAB(pe_0_5$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_0_5$RDY_reset_mod));

  // submodule pe_1_0
  mk_pe pe_1_0(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_1_0$putA_in_a),
	       .putB_in_b(pe_1_0$putB_in_b),
	       .EN_putA(pe_1_0$EN_putA),
	       .EN_putB(pe_1_0$EN_putB),
	       .EN_reset_mod(pe_1_0$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_1_0$getA),
	       .RDY_getA(),
	       .getB(pe_1_0$getB),
	       .RDY_getB(),
	       .getC(pe_1_0$getC),
	       .RDY_getC(),
	       .validAB(pe_1_0$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_1_0$RDY_reset_mod));

  // submodule pe_1_1
  mk_pe pe_1_1(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_1_1$putA_in_a),
	       .putB_in_b(pe_1_1$putB_in_b),
	       .EN_putA(pe_1_1$EN_putA),
	       .EN_putB(pe_1_1$EN_putB),
	       .EN_reset_mod(pe_1_1$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_1_1$getA),
	       .RDY_getA(),
	       .getB(pe_1_1$getB),
	       .RDY_getB(),
	       .getC(pe_1_1$getC),
	       .RDY_getC(),
	       .validAB(pe_1_1$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_1_1$RDY_reset_mod));

  // submodule pe_1_2
  mk_pe pe_1_2(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_1_2$putA_in_a),
	       .putB_in_b(pe_1_2$putB_in_b),
	       .EN_putA(pe_1_2$EN_putA),
	       .EN_putB(pe_1_2$EN_putB),
	       .EN_reset_mod(pe_1_2$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_1_2$getA),
	       .RDY_getA(),
	       .getB(pe_1_2$getB),
	       .RDY_getB(),
	       .getC(pe_1_2$getC),
	       .RDY_getC(),
	       .validAB(pe_1_2$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_1_2$RDY_reset_mod));

  // submodule pe_1_3
  mk_pe pe_1_3(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_1_3$putA_in_a),
	       .putB_in_b(pe_1_3$putB_in_b),
	       .EN_putA(pe_1_3$EN_putA),
	       .EN_putB(pe_1_3$EN_putB),
	       .EN_reset_mod(pe_1_3$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_1_3$getA),
	       .RDY_getA(),
	       .getB(pe_1_3$getB),
	       .RDY_getB(),
	       .getC(pe_1_3$getC),
	       .RDY_getC(),
	       .validAB(pe_1_3$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_1_3$RDY_reset_mod));

  // submodule pe_1_4
  mk_pe pe_1_4(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_1_4$putA_in_a),
	       .putB_in_b(pe_1_4$putB_in_b),
	       .EN_putA(pe_1_4$EN_putA),
	       .EN_putB(pe_1_4$EN_putB),
	       .EN_reset_mod(pe_1_4$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_1_4$getA),
	       .RDY_getA(),
	       .getB(pe_1_4$getB),
	       .RDY_getB(),
	       .getC(pe_1_4$getC),
	       .RDY_getC(),
	       .validAB(pe_1_4$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_1_4$RDY_reset_mod));

  // submodule pe_1_5
  mk_pe pe_1_5(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_1_5$putA_in_a),
	       .putB_in_b(pe_1_5$putB_in_b),
	       .EN_putA(pe_1_5$EN_putA),
	       .EN_putB(pe_1_5$EN_putB),
	       .EN_reset_mod(pe_1_5$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(),
	       .RDY_getA(),
	       .getB(pe_1_5$getB),
	       .RDY_getB(),
	       .getC(pe_1_5$getC),
	       .RDY_getC(),
	       .validAB(pe_1_5$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_1_5$RDY_reset_mod));

  // submodule pe_2_0
  mk_pe pe_2_0(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_2_0$putA_in_a),
	       .putB_in_b(pe_2_0$putB_in_b),
	       .EN_putA(pe_2_0$EN_putA),
	       .EN_putB(pe_2_0$EN_putB),
	       .EN_reset_mod(pe_2_0$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_2_0$getA),
	       .RDY_getA(),
	       .getB(pe_2_0$getB),
	       .RDY_getB(),
	       .getC(pe_2_0$getC),
	       .RDY_getC(),
	       .validAB(pe_2_0$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_2_0$RDY_reset_mod));

  // submodule pe_2_1
  mk_pe pe_2_1(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_2_1$putA_in_a),
	       .putB_in_b(pe_2_1$putB_in_b),
	       .EN_putA(pe_2_1$EN_putA),
	       .EN_putB(pe_2_1$EN_putB),
	       .EN_reset_mod(pe_2_1$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_2_1$getA),
	       .RDY_getA(),
	       .getB(pe_2_1$getB),
	       .RDY_getB(),
	       .getC(pe_2_1$getC),
	       .RDY_getC(),
	       .validAB(pe_2_1$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_2_1$RDY_reset_mod));

  // submodule pe_2_2
  mk_pe pe_2_2(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_2_2$putA_in_a),
	       .putB_in_b(pe_2_2$putB_in_b),
	       .EN_putA(pe_2_2$EN_putA),
	       .EN_putB(pe_2_2$EN_putB),
	       .EN_reset_mod(pe_2_2$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_2_2$getA),
	       .RDY_getA(),
	       .getB(pe_2_2$getB),
	       .RDY_getB(),
	       .getC(pe_2_2$getC),
	       .RDY_getC(),
	       .validAB(pe_2_2$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_2_2$RDY_reset_mod));

  // submodule pe_2_3
  mk_pe pe_2_3(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_2_3$putA_in_a),
	       .putB_in_b(pe_2_3$putB_in_b),
	       .EN_putA(pe_2_3$EN_putA),
	       .EN_putB(pe_2_3$EN_putB),
	       .EN_reset_mod(pe_2_3$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_2_3$getA),
	       .RDY_getA(),
	       .getB(pe_2_3$getB),
	       .RDY_getB(),
	       .getC(pe_2_3$getC),
	       .RDY_getC(),
	       .validAB(pe_2_3$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_2_3$RDY_reset_mod));

  // submodule pe_2_4
  mk_pe pe_2_4(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_2_4$putA_in_a),
	       .putB_in_b(pe_2_4$putB_in_b),
	       .EN_putA(pe_2_4$EN_putA),
	       .EN_putB(pe_2_4$EN_putB),
	       .EN_reset_mod(pe_2_4$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_2_4$getA),
	       .RDY_getA(),
	       .getB(pe_2_4$getB),
	       .RDY_getB(),
	       .getC(pe_2_4$getC),
	       .RDY_getC(),
	       .validAB(pe_2_4$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_2_4$RDY_reset_mod));

  // submodule pe_2_5
  mk_pe pe_2_5(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_2_5$putA_in_a),
	       .putB_in_b(pe_2_5$putB_in_b),
	       .EN_putA(pe_2_5$EN_putA),
	       .EN_putB(pe_2_5$EN_putB),
	       .EN_reset_mod(pe_2_5$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(),
	       .RDY_getA(),
	       .getB(pe_2_5$getB),
	       .RDY_getB(),
	       .getC(pe_2_5$getC),
	       .RDY_getC(),
	       .validAB(pe_2_5$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_2_5$RDY_reset_mod));

  // submodule pe_3_0
  mk_pe pe_3_0(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_3_0$putA_in_a),
	       .putB_in_b(pe_3_0$putB_in_b),
	       .EN_putA(pe_3_0$EN_putA),
	       .EN_putB(pe_3_0$EN_putB),
	       .EN_reset_mod(pe_3_0$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_3_0$getA),
	       .RDY_getA(),
	       .getB(pe_3_0$getB),
	       .RDY_getB(),
	       .getC(pe_3_0$getC),
	       .RDY_getC(),
	       .validAB(pe_3_0$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_3_0$RDY_reset_mod));

  // submodule pe_3_1
  mk_pe pe_3_1(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_3_1$putA_in_a),
	       .putB_in_b(pe_3_1$putB_in_b),
	       .EN_putA(pe_3_1$EN_putA),
	       .EN_putB(pe_3_1$EN_putB),
	       .EN_reset_mod(pe_3_1$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_3_1$getA),
	       .RDY_getA(),
	       .getB(pe_3_1$getB),
	       .RDY_getB(),
	       .getC(pe_3_1$getC),
	       .RDY_getC(),
	       .validAB(pe_3_1$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_3_1$RDY_reset_mod));

  // submodule pe_3_2
  mk_pe pe_3_2(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_3_2$putA_in_a),
	       .putB_in_b(pe_3_2$putB_in_b),
	       .EN_putA(pe_3_2$EN_putA),
	       .EN_putB(pe_3_2$EN_putB),
	       .EN_reset_mod(pe_3_2$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_3_2$getA),
	       .RDY_getA(),
	       .getB(pe_3_2$getB),
	       .RDY_getB(),
	       .getC(pe_3_2$getC),
	       .RDY_getC(),
	       .validAB(pe_3_2$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_3_2$RDY_reset_mod));

  // submodule pe_3_3
  mk_pe pe_3_3(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_3_3$putA_in_a),
	       .putB_in_b(pe_3_3$putB_in_b),
	       .EN_putA(pe_3_3$EN_putA),
	       .EN_putB(pe_3_3$EN_putB),
	       .EN_reset_mod(pe_3_3$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_3_3$getA),
	       .RDY_getA(),
	       .getB(pe_3_3$getB),
	       .RDY_getB(),
	       .getC(pe_3_3$getC),
	       .RDY_getC(),
	       .validAB(pe_3_3$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_3_3$RDY_reset_mod));

  // submodule pe_3_4
  mk_pe pe_3_4(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_3_4$putA_in_a),
	       .putB_in_b(pe_3_4$putB_in_b),
	       .EN_putA(pe_3_4$EN_putA),
	       .EN_putB(pe_3_4$EN_putB),
	       .EN_reset_mod(pe_3_4$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_3_4$getA),
	       .RDY_getA(),
	       .getB(pe_3_4$getB),
	       .RDY_getB(),
	       .getC(pe_3_4$getC),
	       .RDY_getC(),
	       .validAB(pe_3_4$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_3_4$RDY_reset_mod));

  // submodule pe_3_5
  mk_pe pe_3_5(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_3_5$putA_in_a),
	       .putB_in_b(pe_3_5$putB_in_b),
	       .EN_putA(pe_3_5$EN_putA),
	       .EN_putB(pe_3_5$EN_putB),
	       .EN_reset_mod(pe_3_5$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(),
	       .RDY_getA(),
	       .getB(pe_3_5$getB),
	       .RDY_getB(),
	       .getC(pe_3_5$getC),
	       .RDY_getC(),
	       .validAB(pe_3_5$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_3_5$RDY_reset_mod));

  // submodule pe_4_0
  mk_pe pe_4_0(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_4_0$putA_in_a),
	       .putB_in_b(pe_4_0$putB_in_b),
	       .EN_putA(pe_4_0$EN_putA),
	       .EN_putB(pe_4_0$EN_putB),
	       .EN_reset_mod(pe_4_0$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_4_0$getA),
	       .RDY_getA(),
	       .getB(pe_4_0$getB),
	       .RDY_getB(),
	       .getC(pe_4_0$getC),
	       .RDY_getC(),
	       .validAB(pe_4_0$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_4_0$RDY_reset_mod));

  // submodule pe_4_1
  mk_pe pe_4_1(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_4_1$putA_in_a),
	       .putB_in_b(pe_4_1$putB_in_b),
	       .EN_putA(pe_4_1$EN_putA),
	       .EN_putB(pe_4_1$EN_putB),
	       .EN_reset_mod(pe_4_1$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_4_1$getA),
	       .RDY_getA(),
	       .getB(pe_4_1$getB),
	       .RDY_getB(),
	       .getC(pe_4_1$getC),
	       .RDY_getC(),
	       .validAB(pe_4_1$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_4_1$RDY_reset_mod));

  // submodule pe_4_2
  mk_pe pe_4_2(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_4_2$putA_in_a),
	       .putB_in_b(pe_4_2$putB_in_b),
	       .EN_putA(pe_4_2$EN_putA),
	       .EN_putB(pe_4_2$EN_putB),
	       .EN_reset_mod(pe_4_2$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_4_2$getA),
	       .RDY_getA(),
	       .getB(pe_4_2$getB),
	       .RDY_getB(),
	       .getC(pe_4_2$getC),
	       .RDY_getC(),
	       .validAB(pe_4_2$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_4_2$RDY_reset_mod));

  // submodule pe_4_3
  mk_pe pe_4_3(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_4_3$putA_in_a),
	       .putB_in_b(pe_4_3$putB_in_b),
	       .EN_putA(pe_4_3$EN_putA),
	       .EN_putB(pe_4_3$EN_putB),
	       .EN_reset_mod(pe_4_3$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_4_3$getA),
	       .RDY_getA(),
	       .getB(pe_4_3$getB),
	       .RDY_getB(),
	       .getC(pe_4_3$getC),
	       .RDY_getC(),
	       .validAB(pe_4_3$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_4_3$RDY_reset_mod));

  // submodule pe_4_4
  mk_pe pe_4_4(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_4_4$putA_in_a),
	       .putB_in_b(pe_4_4$putB_in_b),
	       .EN_putA(pe_4_4$EN_putA),
	       .EN_putB(pe_4_4$EN_putB),
	       .EN_reset_mod(pe_4_4$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_4_4$getA),
	       .RDY_getA(),
	       .getB(pe_4_4$getB),
	       .RDY_getB(),
	       .getC(pe_4_4$getC),
	       .RDY_getC(),
	       .validAB(pe_4_4$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_4_4$RDY_reset_mod));

  // submodule pe_4_5
  mk_pe pe_4_5(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_4_5$putA_in_a),
	       .putB_in_b(pe_4_5$putB_in_b),
	       .EN_putA(pe_4_5$EN_putA),
	       .EN_putB(pe_4_5$EN_putB),
	       .EN_reset_mod(pe_4_5$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(),
	       .RDY_getA(),
	       .getB(pe_4_5$getB),
	       .RDY_getB(),
	       .getC(pe_4_5$getC),
	       .RDY_getC(),
	       .validAB(pe_4_5$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_4_5$RDY_reset_mod));

  // submodule pe_5_0
  mk_pe pe_5_0(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_5_0$putA_in_a),
	       .putB_in_b(pe_5_0$putB_in_b),
	       .EN_putA(pe_5_0$EN_putA),
	       .EN_putB(pe_5_0$EN_putB),
	       .EN_reset_mod(pe_5_0$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_5_0$getA),
	       .RDY_getA(),
	       .getB(),
	       .RDY_getB(),
	       .getC(pe_5_0$getC),
	       .RDY_getC(),
	       .validAB(pe_5_0$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_5_0$RDY_reset_mod));

  // submodule pe_5_1
  mk_pe pe_5_1(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_5_1$putA_in_a),
	       .putB_in_b(pe_5_1$putB_in_b),
	       .EN_putA(pe_5_1$EN_putA),
	       .EN_putB(pe_5_1$EN_putB),
	       .EN_reset_mod(pe_5_1$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_5_1$getA),
	       .RDY_getA(),
	       .getB(),
	       .RDY_getB(),
	       .getC(pe_5_1$getC),
	       .RDY_getC(),
	       .validAB(pe_5_1$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_5_1$RDY_reset_mod));

  // submodule pe_5_2
  mk_pe pe_5_2(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_5_2$putA_in_a),
	       .putB_in_b(pe_5_2$putB_in_b),
	       .EN_putA(pe_5_2$EN_putA),
	       .EN_putB(pe_5_2$EN_putB),
	       .EN_reset_mod(pe_5_2$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_5_2$getA),
	       .RDY_getA(),
	       .getB(),
	       .RDY_getB(),
	       .getC(pe_5_2$getC),
	       .RDY_getC(),
	       .validAB(pe_5_2$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_5_2$RDY_reset_mod));

  // submodule pe_5_3
  mk_pe pe_5_3(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_5_3$putA_in_a),
	       .putB_in_b(pe_5_3$putB_in_b),
	       .EN_putA(pe_5_3$EN_putA),
	       .EN_putB(pe_5_3$EN_putB),
	       .EN_reset_mod(pe_5_3$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_5_3$getA),
	       .RDY_getA(),
	       .getB(),
	       .RDY_getB(),
	       .getC(pe_5_3$getC),
	       .RDY_getC(),
	       .validAB(pe_5_3$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_5_3$RDY_reset_mod));

  // submodule pe_5_4
  mk_pe pe_5_4(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_5_4$putA_in_a),
	       .putB_in_b(pe_5_4$putB_in_b),
	       .EN_putA(pe_5_4$EN_putA),
	       .EN_putB(pe_5_4$EN_putB),
	       .EN_reset_mod(pe_5_4$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_5_4$getA),
	       .RDY_getA(),
	       .getB(),
	       .RDY_getB(),
	       .getC(pe_5_4$getC),
	       .RDY_getC(),
	       .validAB(pe_5_4$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_5_4$RDY_reset_mod));

  // submodule pe_5_5
  mk_pe pe_5_5(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_5_5$putA_in_a),
	       .putB_in_b(pe_5_5$putB_in_b),
	       .EN_putA(pe_5_5$EN_putA),
	       .EN_putB(pe_5_5$EN_putB),
	       .EN_reset_mod(pe_5_5$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(),
	       .RDY_getA(),
	       .getB(),
	       .RDY_getB(),
	       .getC(pe_5_5$getC),
	       .RDY_getC(),
	       .validAB(),
	       .RDY_validAB(),
	       .RDY_reset_mod(pe_5_5$RDY_reset_mod));

  // register cntr
  assign cntr$D_IN = (cntr == 32'd17) ? 32'd0 : cntr + 32'd1 ;
  assign cntr$EN = incr ;

  // register incr
  assign incr$D_IN = EN_feed_inp_stream ;
  assign incr$EN = incr && cntr == 32'd17 || EN_feed_inp_stream ;

  // submodule pe_0_0
  assign pe_0_0$putA_in_a =
	     EN_feed_inp_stream ? feed_inp_stream_a_stream[31:0] : 32'd0 ;
  assign pe_0_0$putB_in_b =
	     EN_feed_inp_stream ? feed_inp_stream_b_stream[31:0] : 32'd0 ;
  assign pe_0_0$EN_putA = 1'd1 ;
  assign pe_0_0$EN_putB = 1'd1 ;
  assign pe_0_0$EN_reset_mod = EN_reset_mod ;

  // submodule pe_0_1
  assign pe_0_1$putA_in_a = pe_0_0$getA ;
  assign pe_0_1$putB_in_b =
	     EN_feed_inp_stream ? feed_inp_stream_b_stream[63:32] : 32'd0 ;
  assign pe_0_1$EN_putA = 1'd1 ;
  assign pe_0_1$EN_putB = 1'd1 ;
  assign pe_0_1$EN_reset_mod = EN_reset_mod ;

  // submodule pe_0_2
  assign pe_0_2$putA_in_a = pe_0_1$getA ;
  assign pe_0_2$putB_in_b =
	     EN_feed_inp_stream ? feed_inp_stream_b_stream[95:64] : 32'd0 ;
  assign pe_0_2$EN_putA = 1'd1 ;
  assign pe_0_2$EN_putB = 1'd1 ;
  assign pe_0_2$EN_reset_mod = EN_reset_mod ;

  // submodule pe_0_3
  assign pe_0_3$putA_in_a = pe_0_2$getA ;
  assign pe_0_3$putB_in_b =
	     EN_feed_inp_stream ? feed_inp_stream_b_stream[127:96] : 32'd0 ;
  assign pe_0_3$EN_putA = 1'd1 ;
  assign pe_0_3$EN_putB = 1'd1 ;
  assign pe_0_3$EN_reset_mod = EN_reset_mod ;

  // submodule pe_0_4
  assign pe_0_4$putA_in_a = pe_0_3$getA ;
  assign pe_0_4$putB_in_b =
	     EN_feed_inp_stream ? feed_inp_stream_b_stream[159:128] : 32'd0 ;
  assign pe_0_4$EN_putA = 1'd1 ;
  assign pe_0_4$EN_putB = 1'd1 ;
  assign pe_0_4$EN_reset_mod = EN_reset_mod ;

  // submodule pe_0_5
  assign pe_0_5$putA_in_a = pe_0_4$getA ;
  assign pe_0_5$putB_in_b =
	     EN_feed_inp_stream ? feed_inp_stream_b_stream[191:160] : 32'd0 ;
  assign pe_0_5$EN_putA = 1'd1 ;
  assign pe_0_5$EN_putB = 1'd1 ;
  assign pe_0_5$EN_reset_mod = EN_reset_mod ;

  // submodule pe_1_0
  assign pe_1_0$putA_in_a =
	     EN_feed_inp_stream ? feed_inp_stream_a_stream[63:32] : 32'd0 ;
  assign pe_1_0$putB_in_b = pe_0_0$getB ;
  assign pe_1_0$EN_putA = 1'd1 ;
  assign pe_1_0$EN_putB = 1'd1 ;
  assign pe_1_0$EN_reset_mod = EN_reset_mod ;

  // submodule pe_1_1
  assign pe_1_1$putA_in_a =
	     (pe_1_0$validAB && pe_0_1$validAB) ? pe_1_0$getA : 32'd0 ;
  assign pe_1_1$putB_in_b =
	     (pe_1_0$validAB && pe_0_1$validAB) ? pe_0_1$getB : 32'd0 ;
  assign pe_1_1$EN_putA = 1'd1 ;
  assign pe_1_1$EN_putB = 1'd1 ;
  assign pe_1_1$EN_reset_mod = EN_reset_mod ;

  // submodule pe_1_2
  assign pe_1_2$putA_in_a =
	     (pe_1_1$validAB && pe_0_2$validAB) ? pe_1_1$getA : 32'd0 ;
  assign pe_1_2$putB_in_b =
	     (pe_1_1$validAB && pe_0_2$validAB) ? pe_0_2$getB : 32'd0 ;
  assign pe_1_2$EN_putA = 1'd1 ;
  assign pe_1_2$EN_putB = 1'd1 ;
  assign pe_1_2$EN_reset_mod = EN_reset_mod ;

  // submodule pe_1_3
  assign pe_1_3$putA_in_a =
	     (pe_1_2$validAB && pe_0_3$validAB) ? pe_1_2$getA : 32'd0 ;
  assign pe_1_3$putB_in_b =
	     (pe_1_2$validAB && pe_0_3$validAB) ? pe_0_3$getB : 32'd0 ;
  assign pe_1_3$EN_putA = 1'd1 ;
  assign pe_1_3$EN_putB = 1'd1 ;
  assign pe_1_3$EN_reset_mod = EN_reset_mod ;

  // submodule pe_1_4
  assign pe_1_4$putA_in_a =
	     (pe_1_3$validAB && pe_0_4$validAB) ? pe_1_3$getA : 32'd0 ;
  assign pe_1_4$putB_in_b =
	     (pe_1_3$validAB && pe_0_4$validAB) ? pe_0_4$getB : 32'd0 ;
  assign pe_1_4$EN_putA = 1'd1 ;
  assign pe_1_4$EN_putB = 1'd1 ;
  assign pe_1_4$EN_reset_mod = EN_reset_mod ;

  // submodule pe_1_5
  assign pe_1_5$putA_in_a =
	     (pe_1_4$validAB && pe_0_5$validAB) ? pe_1_4$getA : 32'd0 ;
  assign pe_1_5$putB_in_b =
	     (pe_1_4$validAB && pe_0_5$validAB) ? pe_0_5$getB : 32'd0 ;
  assign pe_1_5$EN_putA = 1'd1 ;
  assign pe_1_5$EN_putB = 1'd1 ;
  assign pe_1_5$EN_reset_mod = EN_reset_mod ;

  // submodule pe_2_0
  assign pe_2_0$putA_in_a =
	     EN_feed_inp_stream ? feed_inp_stream_a_stream[95:64] : 32'd0 ;
  assign pe_2_0$putB_in_b = pe_1_0$getB ;
  assign pe_2_0$EN_putA = 1'd1 ;
  assign pe_2_0$EN_putB = 1'd1 ;
  assign pe_2_0$EN_reset_mod = EN_reset_mod ;

  // submodule pe_2_1
  assign pe_2_1$putA_in_a =
	     (pe_2_0$validAB && pe_1_1$validAB) ? pe_2_0$getA : 32'd0 ;
  assign pe_2_1$putB_in_b =
	     (pe_2_0$validAB && pe_1_1$validAB) ? pe_1_1$getB : 32'd0 ;
  assign pe_2_1$EN_putA = 1'd1 ;
  assign pe_2_1$EN_putB = 1'd1 ;
  assign pe_2_1$EN_reset_mod = EN_reset_mod ;

  // submodule pe_2_2
  assign pe_2_2$putA_in_a =
	     (pe_2_1$validAB && pe_1_2$validAB) ? pe_2_1$getA : 32'd0 ;
  assign pe_2_2$putB_in_b =
	     (pe_2_1$validAB && pe_1_2$validAB) ? pe_1_2$getB : 32'd0 ;
  assign pe_2_2$EN_putA = 1'd1 ;
  assign pe_2_2$EN_putB = 1'd1 ;
  assign pe_2_2$EN_reset_mod = EN_reset_mod ;

  // submodule pe_2_3
  assign pe_2_3$putA_in_a =
	     (pe_2_2$validAB && pe_1_3$validAB) ? pe_2_2$getA : 32'd0 ;
  assign pe_2_3$putB_in_b =
	     (pe_2_2$validAB && pe_1_3$validAB) ? pe_1_3$getB : 32'd0 ;
  assign pe_2_3$EN_putA = 1'd1 ;
  assign pe_2_3$EN_putB = 1'd1 ;
  assign pe_2_3$EN_reset_mod = EN_reset_mod ;

  // submodule pe_2_4
  assign pe_2_4$putA_in_a =
	     (pe_2_3$validAB && pe_1_4$validAB) ? pe_2_3$getA : 32'd0 ;
  assign pe_2_4$putB_in_b =
	     (pe_2_3$validAB && pe_1_4$validAB) ? pe_1_4$getB : 32'd0 ;
  assign pe_2_4$EN_putA = 1'd1 ;
  assign pe_2_4$EN_putB = 1'd1 ;
  assign pe_2_4$EN_reset_mod = EN_reset_mod ;

  // submodule pe_2_5
  assign pe_2_5$putA_in_a =
	     (pe_2_4$validAB && pe_1_5$validAB) ? pe_2_4$getA : 32'd0 ;
  assign pe_2_5$putB_in_b =
	     (pe_2_4$validAB && pe_1_5$validAB) ? pe_1_5$getB : 32'd0 ;
  assign pe_2_5$EN_putA = 1'd1 ;
  assign pe_2_5$EN_putB = 1'd1 ;
  assign pe_2_5$EN_reset_mod = EN_reset_mod ;

  // submodule pe_3_0
  assign pe_3_0$putA_in_a =
	     EN_feed_inp_stream ? feed_inp_stream_a_stream[127:96] : 32'd0 ;
  assign pe_3_0$putB_in_b = pe_2_0$getB ;
  assign pe_3_0$EN_putA = 1'd1 ;
  assign pe_3_0$EN_putB = 1'd1 ;
  assign pe_3_0$EN_reset_mod = EN_reset_mod ;

  // submodule pe_3_1
  assign pe_3_1$putA_in_a =
	     (pe_3_0$validAB && pe_2_1$validAB) ? pe_3_0$getA : 32'd0 ;
  assign pe_3_1$putB_in_b =
	     (pe_3_0$validAB && pe_2_1$validAB) ? pe_2_1$getB : 32'd0 ;
  assign pe_3_1$EN_putA = 1'd1 ;
  assign pe_3_1$EN_putB = 1'd1 ;
  assign pe_3_1$EN_reset_mod = EN_reset_mod ;

  // submodule pe_3_2
  assign pe_3_2$putA_in_a =
	     (pe_3_1$validAB && pe_2_2$validAB) ? pe_3_1$getA : 32'd0 ;
  assign pe_3_2$putB_in_b =
	     (pe_3_1$validAB && pe_2_2$validAB) ? pe_2_2$getB : 32'd0 ;
  assign pe_3_2$EN_putA = 1'd1 ;
  assign pe_3_2$EN_putB = 1'd1 ;
  assign pe_3_2$EN_reset_mod = EN_reset_mod ;

  // submodule pe_3_3
  assign pe_3_3$putA_in_a =
	     (pe_3_2$validAB && pe_2_3$validAB) ? pe_3_2$getA : 32'd0 ;
  assign pe_3_3$putB_in_b =
	     (pe_3_2$validAB && pe_2_3$validAB) ? pe_2_3$getB : 32'd0 ;
  assign pe_3_3$EN_putA = 1'd1 ;
  assign pe_3_3$EN_putB = 1'd1 ;
  assign pe_3_3$EN_reset_mod = EN_reset_mod ;

  // submodule pe_3_4
  assign pe_3_4$putA_in_a =
	     (pe_3_3$validAB && pe_2_4$validAB) ? pe_3_3$getA : 32'd0 ;
  assign pe_3_4$putB_in_b =
	     (pe_3_3$validAB && pe_2_4$validAB) ? pe_2_4$getB : 32'd0 ;
  assign pe_3_4$EN_putA = 1'd1 ;
  assign pe_3_4$EN_putB = 1'd1 ;
  assign pe_3_4$EN_reset_mod = EN_reset_mod ;

  // submodule pe_3_5
  assign pe_3_5$putA_in_a =
	     (pe_3_4$validAB && pe_2_5$validAB) ? pe_3_4$getA : 32'd0 ;
  assign pe_3_5$putB_in_b =
	     (pe_3_4$validAB && pe_2_5$validAB) ? pe_2_5$getB : 32'd0 ;
  assign pe_3_5$EN_putA = 1'd1 ;
  assign pe_3_5$EN_putB = 1'd1 ;
  assign pe_3_5$EN_reset_mod = EN_reset_mod ;

  // submodule pe_4_0
  assign pe_4_0$putA_in_a =
	     EN_feed_inp_stream ? feed_inp_stream_a_stream[159:128] : 32'd0 ;
  assign pe_4_0$putB_in_b = pe_3_0$getB ;
  assign pe_4_0$EN_putA = 1'd1 ;
  assign pe_4_0$EN_putB = 1'd1 ;
  assign pe_4_0$EN_reset_mod = EN_reset_mod ;

  // submodule pe_4_1
  assign pe_4_1$putA_in_a =
	     (pe_4_0$validAB && pe_3_1$validAB) ? pe_4_0$getA : 32'd0 ;
  assign pe_4_1$putB_in_b =
	     (pe_4_0$validAB && pe_3_1$validAB) ? pe_3_1$getB : 32'd0 ;
  assign pe_4_1$EN_putA = 1'd1 ;
  assign pe_4_1$EN_putB = 1'd1 ;
  assign pe_4_1$EN_reset_mod = EN_reset_mod ;

  // submodule pe_4_2
  assign pe_4_2$putA_in_a =
	     (pe_4_1$validAB && pe_3_2$validAB) ? pe_4_1$getA : 32'd0 ;
  assign pe_4_2$putB_in_b =
	     (pe_4_1$validAB && pe_3_2$validAB) ? pe_3_2$getB : 32'd0 ;
  assign pe_4_2$EN_putA = 1'd1 ;
  assign pe_4_2$EN_putB = 1'd1 ;
  assign pe_4_2$EN_reset_mod = EN_reset_mod ;

  // submodule pe_4_3
  assign pe_4_3$putA_in_a =
	     (pe_4_2$validAB && pe_3_3$validAB) ? pe_4_2$getA : 32'd0 ;
  assign pe_4_3$putB_in_b =
	     (pe_4_2$validAB && pe_3_3$validAB) ? pe_3_3$getB : 32'd0 ;
  assign pe_4_3$EN_putA = 1'd1 ;
  assign pe_4_3$EN_putB = 1'd1 ;
  assign pe_4_3$EN_reset_mod = EN_reset_mod ;

  // submodule pe_4_4
  assign pe_4_4$putA_in_a =
	     (pe_4_3$validAB && pe_3_4$validAB) ? pe_4_3$getA : 32'd0 ;
  assign pe_4_4$putB_in_b =
	     (pe_4_3$validAB && pe_3_4$validAB) ? pe_3_4$getB : 32'd0 ;
  assign pe_4_4$EN_putA = 1'd1 ;
  assign pe_4_4$EN_putB = 1'd1 ;
  assign pe_4_4$EN_reset_mod = EN_reset_mod ;

  // submodule pe_4_5
  assign pe_4_5$putA_in_a =
	     (pe_4_4$validAB && pe_3_5$validAB) ? pe_4_4$getA : 32'd0 ;
  assign pe_4_5$putB_in_b =
	     (pe_4_4$validAB && pe_3_5$validAB) ? pe_3_5$getB : 32'd0 ;
  assign pe_4_5$EN_putA = 1'd1 ;
  assign pe_4_5$EN_putB = 1'd1 ;
  assign pe_4_5$EN_reset_mod = EN_reset_mod ;

  // submodule pe_5_0
  assign pe_5_0$putA_in_a =
	     EN_feed_inp_stream ? feed_inp_stream_a_stream[191:160] : 32'd0 ;
  assign pe_5_0$putB_in_b = pe_4_0$getB ;
  assign pe_5_0$EN_putA = 1'd1 ;
  assign pe_5_0$EN_putB = 1'd1 ;
  assign pe_5_0$EN_reset_mod = EN_reset_mod ;

  // submodule pe_5_1
  assign pe_5_1$putA_in_a =
	     (pe_5_0$validAB && pe_4_1$validAB) ? pe_5_0$getA : 32'd0 ;
  assign pe_5_1$putB_in_b =
	     (pe_5_0$validAB && pe_4_1$validAB) ? pe_4_1$getB : 32'd0 ;
  assign pe_5_1$EN_putA = 1'd1 ;
  assign pe_5_1$EN_putB = 1'd1 ;
  assign pe_5_1$EN_reset_mod = EN_reset_mod ;

  // submodule pe_5_2
  assign pe_5_2$putA_in_a =
	     (pe_5_1$validAB && pe_4_2$validAB) ? pe_5_1$getA : 32'd0 ;
  assign pe_5_2$putB_in_b =
	     (pe_5_1$validAB && pe_4_2$validAB) ? pe_4_2$getB : 32'd0 ;
  assign pe_5_2$EN_putA = 1'd1 ;
  assign pe_5_2$EN_putB = 1'd1 ;
  assign pe_5_2$EN_reset_mod = EN_reset_mod ;

  // submodule pe_5_3
  assign pe_5_3$putA_in_a =
	     (pe_5_2$validAB && pe_4_3$validAB) ? pe_5_2$getA : 32'd0 ;
  assign pe_5_3$putB_in_b =
	     (pe_5_2$validAB && pe_4_3$validAB) ? pe_4_3$getB : 32'd0 ;
  assign pe_5_3$EN_putA = 1'd1 ;
  assign pe_5_3$EN_putB = 1'd1 ;
  assign pe_5_3$EN_reset_mod = EN_reset_mod ;

  // submodule pe_5_4
  assign pe_5_4$putA_in_a =
	     (pe_5_3$validAB && pe_4_4$validAB) ? pe_5_3$getA : 32'd0 ;
  assign pe_5_4$putB_in_b =
	     (pe_5_3$validAB && pe_4_4$validAB) ? pe_4_4$getB : 32'd0 ;
  assign pe_5_4$EN_putA = 1'd1 ;
  assign pe_5_4$EN_putB = 1'd1 ;
  assign pe_5_4$EN_reset_mod = EN_reset_mod ;

  // submodule pe_5_5
  assign pe_5_5$putA_in_a =
	     (pe_5_4$validAB && pe_4_5$validAB) ? pe_5_4$getA : 32'd0 ;
  assign pe_5_5$putB_in_b =
	     (pe_5_4$validAB && pe_4_5$validAB) ? pe_4_5$getB : 32'd0 ;
  assign pe_5_5$EN_putA = 1'd1 ;
  assign pe_5_5$EN_putB = 1'd1 ;
  assign pe_5_5$EN_reset_mod = EN_reset_mod ;

  // remaining internal signals
  assign IF_cntr_30_MINUS_5_70_MINUS_6_71_MINUS_1_72_SL_ETC___d759 =
	     { cntr_30_MINUS_5_70_MINUS_6_71_MINUS_1_72_SLT_6___d673 ?
		 { SEL_ARR_pe_5_0_getC__75_BITS_31_TO_16_76_pe_5__ETC___d688,
		   fpart__h33618 } :
		 32'd0,
	       cntr_30_MINUS_4_85_MINUS_6_86_MINUS_1_87_SLT_6___d588 ?
		 { SEL_ARR_pe_4_0_getC__90_BITS_31_TO_16_91_pe_4__ETC___d603,
		   fpart__h32648 } :
		 32'd0 } ;
  assign IF_cntr_30_MINUS_5_70_MINUS_6_71_MINUS_1_72_SL_ETC___d764 =
	     { IF_cntr_30_MINUS_5_70_MINUS_6_71_MINUS_1_72_SL_ETC___d759,
	       cntr_30_MINUS_3_00_MINUS_6_01_MINUS_1_02_SLT_6___d503 ?
		 { SEL_ARR_pe_3_0_getC__05_BITS_31_TO_16_06_pe_3__ETC___d518,
		   fpart__h31678 } :
		 32'd0,
	       cntr_30_MINUS_2_15_MINUS_6_16_MINUS_1_17_SLT_6___d418 ?
		 { SEL_ARR_pe_2_0_getC__20_BITS_31_TO_16_21_pe_2__ETC___d433,
		   fpart__h30708 } :
		 32'd0 } ;
  assign SEXT_SEL_ARR_pe_0_0_getC__50_BITS_31_TO_16_51__ETC___d264 =
	     { SEL_ARR_pe_0_0_getC__50_BITS_31_TO_16_51_pe_0__ETC___d263[15],
	       SEL_ARR_pe_0_0_getC__50_BITS_31_TO_16_51_pe_0__ETC___d263 } ;
  assign SEXT_SEL_ARR_pe_1_0_getC__35_BITS_31_TO_16_36__ETC___d349 =
	     { SEL_ARR_pe_1_0_getC__35_BITS_31_TO_16_36_pe_1__ETC___d348[15],
	       SEL_ARR_pe_1_0_getC__35_BITS_31_TO_16_36_pe_1__ETC___d348 } ;
  assign SEXT_SEL_ARR_pe_2_0_getC__20_BITS_31_TO_16_21__ETC___d434 =
	     { SEL_ARR_pe_2_0_getC__20_BITS_31_TO_16_21_pe_2__ETC___d433[15],
	       SEL_ARR_pe_2_0_getC__20_BITS_31_TO_16_21_pe_2__ETC___d433 } ;
  assign SEXT_SEL_ARR_pe_3_0_getC__05_BITS_31_TO_16_06__ETC___d519 =
	     { SEL_ARR_pe_3_0_getC__05_BITS_31_TO_16_06_pe_3__ETC___d518[15],
	       SEL_ARR_pe_3_0_getC__05_BITS_31_TO_16_06_pe_3__ETC___d518 } ;
  assign SEXT_SEL_ARR_pe_4_0_getC__90_BITS_31_TO_16_91__ETC___d604 =
	     { SEL_ARR_pe_4_0_getC__90_BITS_31_TO_16_91_pe_4__ETC___d603[15],
	       SEL_ARR_pe_4_0_getC__90_BITS_31_TO_16_91_pe_4__ETC___d603 } ;
  assign SEXT_SEL_ARR_pe_5_0_getC__75_BITS_31_TO_16_76__ETC___d689 =
	     { SEL_ARR_pe_5_0_getC__75_BITS_31_TO_16_76_pe_5__ETC___d688[15],
	       SEL_ARR_pe_5_0_getC__75_BITS_31_TO_16_76_pe_5__ETC___d688 } ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_pe_0_0_getC__50_BITS__ETC___d292 =
	     { 33'd0, x__h29154 } * 49'd10 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_pe_0_0_getC__50_BITS__ETC___d295 =
	     { 33'd0, x__h29154 } * 49'd100 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_pe_0_0_getC__50_BITS__ETC___d303 =
	     { 33'd0, x__h29154 } * 49'd1000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_pe_0_0_getC__50_BITS__ETC___d312 =
	     { 33'd0, x__h29154 } * 49'd10000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_pe_0_0_getC__50_BITS__ETC___d321 =
	     { 33'd0, x__h29154 } * 49'd100000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_pe_1_0_getC__35_BITS__ETC___d377 =
	     { 33'd0, x__h30124 } * 49'd10 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_pe_1_0_getC__35_BITS__ETC___d380 =
	     { 33'd0, x__h30124 } * 49'd100 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_pe_1_0_getC__35_BITS__ETC___d388 =
	     { 33'd0, x__h30124 } * 49'd1000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_pe_1_0_getC__35_BITS__ETC___d397 =
	     { 33'd0, x__h30124 } * 49'd10000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_pe_1_0_getC__35_BITS__ETC___d406 =
	     { 33'd0, x__h30124 } * 49'd100000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_pe_2_0_getC__20_BITS__ETC___d462 =
	     { 33'd0, x__h31094 } * 49'd10 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_pe_2_0_getC__20_BITS__ETC___d465 =
	     { 33'd0, x__h31094 } * 49'd100 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_pe_2_0_getC__20_BITS__ETC___d473 =
	     { 33'd0, x__h31094 } * 49'd1000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_pe_2_0_getC__20_BITS__ETC___d482 =
	     { 33'd0, x__h31094 } * 49'd10000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_pe_2_0_getC__20_BITS__ETC___d491 =
	     { 33'd0, x__h31094 } * 49'd100000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_pe_3_0_getC__05_BITS__ETC___d547 =
	     { 33'd0, x__h32064 } * 49'd10 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_pe_3_0_getC__05_BITS__ETC___d550 =
	     { 33'd0, x__h32064 } * 49'd100 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_pe_3_0_getC__05_BITS__ETC___d558 =
	     { 33'd0, x__h32064 } * 49'd1000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_pe_3_0_getC__05_BITS__ETC___d567 =
	     { 33'd0, x__h32064 } * 49'd10000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_pe_3_0_getC__05_BITS__ETC___d576 =
	     { 33'd0, x__h32064 } * 49'd100000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_pe_4_0_getC__90_BITS__ETC___d632 =
	     { 33'd0, x__h33034 } * 49'd10 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_pe_4_0_getC__90_BITS__ETC___d635 =
	     { 33'd0, x__h33034 } * 49'd100 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_pe_4_0_getC__90_BITS__ETC___d643 =
	     { 33'd0, x__h33034 } * 49'd1000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_pe_4_0_getC__90_BITS__ETC___d652 =
	     { 33'd0, x__h33034 } * 49'd10000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_pe_4_0_getC__90_BITS__ETC___d661 =
	     { 33'd0, x__h33034 } * 49'd100000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_pe_5_0_getC__75_BITS__ETC___d717 =
	     { 33'd0, x__h34004 } * 49'd10 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_pe_5_0_getC__75_BITS__ETC___d720 =
	     { 33'd0, x__h34004 } * 49'd100 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_pe_5_0_getC__75_BITS__ETC___d728 =
	     { 33'd0, x__h34004 } * 49'd1000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_pe_5_0_getC__75_BITS__ETC___d737 =
	     { 33'd0, x__h34004 } * 49'd10000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_pe_5_0_getC__75_BITS__ETC___d746 =
	     { 33'd0, x__h34004 } * 49'd100000 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_pe_0__ETC___d298 =
	     49'd10 * digit__h29124 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_pe_1__ETC___d383 =
	     49'd10 * digit__h30094 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_pe_2__ETC___d468 =
	     49'd10 * digit__h31064 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_pe_3__ETC___d553 =
	     49'd10 * digit__h32034 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_pe_4__ETC___d638 =
	     49'd10 * digit__h33004 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_pe_5__ETC___d723 =
	     49'd10 * digit__h33974 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d307 =
	     49'd10 * y__h29337 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d392 =
	     49'd10 * y__h30307 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d477 =
	     49'd10 * y__h31277 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d562 =
	     49'd10 * y__h32247 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d647 =
	     49'd10 * y__h33217 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d732 =
	     49'd10 * y__h34187 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d316 =
	     49'd10 * y__h29426 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d401 =
	     49'd10 * y__h30396 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d486 =
	     49'd10 * y__h31366 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d571 =
	     49'd10 * y__h32336 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d656 =
	     49'd10 * y__h33306 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d741 =
	     49'd10 * y__h34276 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d325 =
	     49'd10 * y__h29515 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d410 =
	     49'd10 * y__h30485 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d495 =
	     49'd10 * y__h31455 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d580 =
	     49'd10 * y__h32425 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d665 =
	     49'd10 * y__h33395 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d750 =
	     49'd10 * y__h34365 ;
  assign cntr_30_MINUS_1_30_MINUS_6_31_MINUS_1_32_SLT_6___d333 =
	     (cntr_30_MINUS_1_30_MINUS_6_31_MINUS_1___d332 ^ 32'h80000000) <
	     32'h80000006 ;
  assign cntr_30_MINUS_1_30_MINUS_6_31_MINUS_1___d332 =
	     ((cntr - 32'd1) - 32'd6) - 32'd1 ;
  assign cntr_30_MINUS_2_15_MINUS_6_16_MINUS_1_17_SLT_6___d418 =
	     (cntr_30_MINUS_2_15_MINUS_6_16_MINUS_1___d417 ^ 32'h80000000) <
	     32'h80000006 ;
  assign cntr_30_MINUS_2_15_MINUS_6_16_MINUS_1___d417 =
	     ((cntr - 32'd2) - 32'd6) - 32'd1 ;
  assign cntr_30_MINUS_3_00_MINUS_6_01_MINUS_1_02_SLT_6___d503 =
	     (cntr_30_MINUS_3_00_MINUS_6_01_MINUS_1___d502 ^ 32'h80000000) <
	     32'h80000006 ;
  assign cntr_30_MINUS_3_00_MINUS_6_01_MINUS_1___d502 =
	     ((cntr - 32'd3) - 32'd6) - 32'd1 ;
  assign cntr_30_MINUS_4_85_MINUS_6_86_MINUS_1_87_SLT_6___d588 =
	     (cntr_30_MINUS_4_85_MINUS_6_86_MINUS_1___d587 ^ 32'h80000000) <
	     32'h80000006 ;
  assign cntr_30_MINUS_4_85_MINUS_6_86_MINUS_1___d587 =
	     ((cntr - 32'd4) - 32'd6) - 32'd1 ;
  assign cntr_30_MINUS_5_70_MINUS_6_71_MINUS_1_72_SLT_6___d673 =
	     (cntr_30_MINUS_5_70_MINUS_6_71_MINUS_1___d672 ^ 32'h80000000) <
	     32'h80000006 ;
  assign cntr_30_MINUS_5_70_MINUS_6_71_MINUS_1___d672 =
	     ((cntr - 32'd5) - 32'd6) - 32'd1 ;
  assign cntr_30_MINUS_6_46_MINUS_1_47_SLT_6___d248 =
	     (x__h28864 ^ 32'h80000000) < 32'h80000006 ;
  assign digit__h29124 =
	     { 45'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_pe_0_0_getC__50_BITS__ETC___d292[19:16] } ;
  assign digit__h29191 =
	     { 45'd0,
	       tx9189_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q1[3:0] } ;
  assign digit__h29280 =
	     { 45'd0,
	       tx9278_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q2[3:0] } ;
  assign digit__h29369 =
	     { 45'd0,
	       tx9367_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q3[3:0] } ;
  assign digit__h29458 =
	     { 45'd0,
	       tx9456_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q4[3:0] } ;
  assign digit__h30094 =
	     { 45'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_pe_1_0_getC__35_BITS__ETC___d377[19:16] } ;
  assign digit__h30161 =
	     { 45'd0,
	       tx0159_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q5[3:0] } ;
  assign digit__h30250 =
	     { 45'd0,
	       tx0248_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q6[3:0] } ;
  assign digit__h30339 =
	     { 45'd0,
	       tx0337_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q7[3:0] } ;
  assign digit__h30428 =
	     { 45'd0,
	       tx0426_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q8[3:0] } ;
  assign digit__h31064 =
	     { 45'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_pe_2_0_getC__20_BITS__ETC___d462[19:16] } ;
  assign digit__h31131 =
	     { 45'd0,
	       tx1129_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q9[3:0] } ;
  assign digit__h31220 =
	     { 45'd0,
	       tx1218_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q10[3:0] } ;
  assign digit__h31309 =
	     { 45'd0,
	       tx1307_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q11[3:0] } ;
  assign digit__h31398 =
	     { 45'd0,
	       tx1396_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q12[3:0] } ;
  assign digit__h32034 =
	     { 45'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_pe_3_0_getC__05_BITS__ETC___d547[19:16] } ;
  assign digit__h32101 =
	     { 45'd0,
	       tx2099_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q13[3:0] } ;
  assign digit__h32190 =
	     { 45'd0,
	       tx2188_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q14[3:0] } ;
  assign digit__h32279 =
	     { 45'd0,
	       tx2277_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q15[3:0] } ;
  assign digit__h32368 =
	     { 45'd0,
	       tx2366_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q16[3:0] } ;
  assign digit__h33004 =
	     { 45'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_pe_4_0_getC__90_BITS__ETC___d632[19:16] } ;
  assign digit__h33071 =
	     { 45'd0,
	       tx3069_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q17[3:0] } ;
  assign digit__h33160 =
	     { 45'd0,
	       tx3158_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q18[3:0] } ;
  assign digit__h33249 =
	     { 45'd0,
	       tx3247_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q19[3:0] } ;
  assign digit__h33338 =
	     { 45'd0,
	       tx3336_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q20[3:0] } ;
  assign digit__h33974 =
	     { 45'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_pe_5_0_getC__75_BITS__ETC___d717[19:16] } ;
  assign digit__h34041 =
	     { 45'd0,
	       tx4039_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q21[3:0] } ;
  assign digit__h34130 =
	     { 45'd0,
	       tx4128_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q22[3:0] } ;
  assign digit__h34219 =
	     { 45'd0,
	       tx4217_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q23[3:0] } ;
  assign digit__h34308 =
	     { 45'd0,
	       tx4306_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q24[3:0] } ;
  assign pe_0_5_RDY_reset_mod__75_AND_pe_1_0_RDY_reset__ETC___d835 =
	     pe_0_5$RDY_reset_mod && pe_1_0$RDY_reset_mod &&
	     pe_1_1$RDY_reset_mod &&
	     pe_1_2$RDY_reset_mod &&
	     pe_1_3$RDY_reset_mod &&
	     pe_1_4$RDY_reset_mod &&
	     pe_1_5_RDY_reset_mod__81_AND_pe_2_0_RDY_reset__ETC___d829 ;
  assign pe_1_5_RDY_reset_mod__81_AND_pe_2_0_RDY_reset__ETC___d829 =
	     pe_1_5$RDY_reset_mod && pe_2_0$RDY_reset_mod &&
	     pe_2_1$RDY_reset_mod &&
	     pe_2_2$RDY_reset_mod &&
	     pe_2_3$RDY_reset_mod &&
	     pe_2_4$RDY_reset_mod &&
	     pe_2_5_RDY_reset_mod__87_AND_pe_3_0_RDY_reset__ETC___d823 ;
  assign pe_2_5_RDY_reset_mod__87_AND_pe_3_0_RDY_reset__ETC___d823 =
	     pe_2_5$RDY_reset_mod && pe_3_0$RDY_reset_mod &&
	     pe_3_1$RDY_reset_mod &&
	     pe_3_2$RDY_reset_mod &&
	     pe_3_3$RDY_reset_mod &&
	     pe_3_4$RDY_reset_mod &&
	     pe_3_5_RDY_reset_mod__93_AND_pe_4_0_RDY_reset__ETC___d817 ;
  assign pe_3_5_RDY_reset_mod__93_AND_pe_4_0_RDY_reset__ETC___d817 =
	     pe_3_5$RDY_reset_mod && pe_4_0$RDY_reset_mod &&
	     pe_4_1$RDY_reset_mod &&
	     pe_4_2$RDY_reset_mod &&
	     pe_4_3$RDY_reset_mod &&
	     pe_4_4$RDY_reset_mod &&
	     pe_4_5_RDY_reset_mod__99_AND_pe_5_0_RDY_reset__ETC___d811 ;
  assign pe_4_5_RDY_reset_mod__99_AND_pe_5_0_RDY_reset__ETC___d811 =
	     pe_4_5$RDY_reset_mod && pe_5_0$RDY_reset_mod &&
	     pe_5_1$RDY_reset_mod &&
	     pe_5_2$RDY_reset_mod &&
	     pe_5_3$RDY_reset_mod &&
	     pe_5_4$RDY_reset_mod &&
	     pe_5_5$RDY_reset_mod ;
  assign tx0159_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q5 =
	     tx__h30159 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_pe_1__ETC___d383[48:0] ;
  assign tx0248_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q6 =
	     tx__h30248 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d392[48:0] ;
  assign tx0337_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q7 =
	     tx__h30337 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d401[48:0] ;
  assign tx0426_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q8 =
	     tx__h30426 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d410[48:0] ;
  assign tx1129_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q9 =
	     tx__h31129 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_pe_2__ETC___d468[48:0] ;
  assign tx1218_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q10 =
	     tx__h31218 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d477[48:0] ;
  assign tx1307_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q11 =
	     tx__h31307 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d486[48:0] ;
  assign tx1396_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q12 =
	     tx__h31396 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d495[48:0] ;
  assign tx2099_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q13 =
	     tx__h32099 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_pe_3__ETC___d553[48:0] ;
  assign tx2188_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q14 =
	     tx__h32188 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d562[48:0] ;
  assign tx2277_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q15 =
	     tx__h32277 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d571[48:0] ;
  assign tx2366_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q16 =
	     tx__h32366 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d580[48:0] ;
  assign tx3069_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q17 =
	     tx__h33069 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_pe_4__ETC___d638[48:0] ;
  assign tx3158_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q18 =
	     tx__h33158 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d647[48:0] ;
  assign tx3247_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q19 =
	     tx__h33247 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d656[48:0] ;
  assign tx3336_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q20 =
	     tx__h33336 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d665[48:0] ;
  assign tx4039_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q21 =
	     tx__h34039 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_pe_5__ETC___d723[48:0] ;
  assign tx4128_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q22 =
	     tx__h34128 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d732[48:0] ;
  assign tx4217_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q23 =
	     tx__h34217 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d741[48:0] ;
  assign tx4306_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q24 =
	     tx__h34306 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d750[48:0] ;
  assign tx9189_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q1 =
	     tx__h29189 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_pe_0__ETC___d298[48:0] ;
  assign tx9278_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q2 =
	     tx__h29278 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d307[48:0] ;
  assign tx9367_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q3 =
	     tx__h29367 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d316[48:0] ;
  assign tx9456_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q4 =
	     tx__h29456 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d325[48:0] ;
  assign tx__h29189 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_pe_0_0_getC__50_BITS__ETC___d295[48:16] } ;
  assign tx__h29278 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_pe_0_0_getC__50_BITS__ETC___d303[48:16] } ;
  assign tx__h29367 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_pe_0_0_getC__50_BITS__ETC___d312[48:16] } ;
  assign tx__h29456 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_pe_0_0_getC__50_BITS__ETC___d321[48:16] } ;
  assign tx__h30159 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_pe_1_0_getC__35_BITS__ETC___d380[48:16] } ;
  assign tx__h30248 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_pe_1_0_getC__35_BITS__ETC___d388[48:16] } ;
  assign tx__h30337 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_pe_1_0_getC__35_BITS__ETC___d397[48:16] } ;
  assign tx__h30426 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_pe_1_0_getC__35_BITS__ETC___d406[48:16] } ;
  assign tx__h31129 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_pe_2_0_getC__20_BITS__ETC___d465[48:16] } ;
  assign tx__h31218 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_pe_2_0_getC__20_BITS__ETC___d473[48:16] } ;
  assign tx__h31307 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_pe_2_0_getC__20_BITS__ETC___d482[48:16] } ;
  assign tx__h31396 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_pe_2_0_getC__20_BITS__ETC___d491[48:16] } ;
  assign tx__h32099 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_pe_3_0_getC__05_BITS__ETC___d550[48:16] } ;
  assign tx__h32188 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_pe_3_0_getC__05_BITS__ETC___d558[48:16] } ;
  assign tx__h32277 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_pe_3_0_getC__05_BITS__ETC___d567[48:16] } ;
  assign tx__h32366 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_pe_3_0_getC__05_BITS__ETC___d576[48:16] } ;
  assign tx__h33069 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_pe_4_0_getC__90_BITS__ETC___d635[48:16] } ;
  assign tx__h33158 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_pe_4_0_getC__90_BITS__ETC___d643[48:16] } ;
  assign tx__h33247 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_pe_4_0_getC__90_BITS__ETC___d652[48:16] } ;
  assign tx__h33336 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_pe_4_0_getC__90_BITS__ETC___d661[48:16] } ;
  assign tx__h34039 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_pe_5_0_getC__75_BITS__ETC___d720[48:16] } ;
  assign tx__h34128 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_pe_5_0_getC__75_BITS__ETC___d728[48:16] } ;
  assign tx__h34217 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_pe_5_0_getC__75_BITS__ETC___d737[48:16] } ;
  assign tx__h34306 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_pe_5_0_getC__75_BITS__ETC___d746[48:16] } ;
  assign x__h28864 = (cntr - 32'd6) - 32'd1 ;
  assign x__h29154 =
	     (SEXT_SEL_ARR_pe_0_0_getC__50_BITS_31_TO_16_51__ETC___d264[16] &&
	      fpart__h28635 != 16'd0) ?
	       y_avValue_snd__h29088 :
	       fpart__h28635 ;
  assign x__h30124 =
	     (SEXT_SEL_ARR_pe_1_0_getC__35_BITS_31_TO_16_36__ETC___d349[16] &&
	      fpart__h29738 != 16'd0) ?
	       y_avValue_snd__h30058 :
	       fpart__h29738 ;
  assign x__h31094 =
	     (SEXT_SEL_ARR_pe_2_0_getC__20_BITS_31_TO_16_21__ETC___d434[16] &&
	      fpart__h30708 != 16'd0) ?
	       y_avValue_snd__h31028 :
	       fpart__h30708 ;
  assign x__h32064 =
	     (SEXT_SEL_ARR_pe_3_0_getC__05_BITS_31_TO_16_06__ETC___d519[16] &&
	      fpart__h31678 != 16'd0) ?
	       y_avValue_snd__h31998 :
	       fpart__h31678 ;
  assign x__h33034 =
	     (SEXT_SEL_ARR_pe_4_0_getC__90_BITS_31_TO_16_91__ETC___d604[16] &&
	      fpart__h32648 != 16'd0) ?
	       y_avValue_snd__h32968 :
	       fpart__h32648 ;
  assign x__h34004 =
	     (SEXT_SEL_ARR_pe_5_0_getC__75_BITS_31_TO_16_76__ETC___d689[16] &&
	      fpart__h33618 != 16'd0) ?
	       y_avValue_snd__h33938 :
	       fpart__h33618 ;
  assign y__h29337 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_pe_0__ETC___d298[48:0] +
	     digit__h29191 ;
  assign y__h29426 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d307[48:0] +
	     digit__h29280 ;
  assign y__h29515 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d316[48:0] +
	     digit__h29369 ;
  assign y__h30307 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_pe_1__ETC___d383[48:0] +
	     digit__h30161 ;
  assign y__h30396 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d392[48:0] +
	     digit__h30250 ;
  assign y__h30485 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d401[48:0] +
	     digit__h30339 ;
  assign y__h31277 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_pe_2__ETC___d468[48:0] +
	     digit__h31131 ;
  assign y__h31366 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d477[48:0] +
	     digit__h31220 ;
  assign y__h31455 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d486[48:0] +
	     digit__h31309 ;
  assign y__h32247 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_pe_3__ETC___d553[48:0] +
	     digit__h32101 ;
  assign y__h32336 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d562[48:0] +
	     digit__h32190 ;
  assign y__h32425 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d571[48:0] +
	     digit__h32279 ;
  assign y__h33217 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_pe_4__ETC___d638[48:0] +
	     digit__h33071 ;
  assign y__h33306 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d647[48:0] +
	     digit__h33160 ;
  assign y__h33395 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d656[48:0] +
	     digit__h33249 ;
  assign y__h34187 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_pe_5__ETC___d723[48:0] +
	     digit__h34041 ;
  assign y__h34276 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d732[48:0] +
	     digit__h34130 ;
  assign y__h34365 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d741[48:0] +
	     digit__h34219 ;
  assign y_avValue_snd__h29088 = 16'd0 - fpart__h28635 ;
  assign y_avValue_snd__h30058 = 16'd0 - fpart__h29738 ;
  assign y_avValue_snd__h31028 = 16'd0 - fpart__h30708 ;
  assign y_avValue_snd__h31998 = 16'd0 - fpart__h31678 ;
  assign y_avValue_snd__h32968 = 16'd0 - fpart__h32648 ;
  assign y_avValue_snd__h33938 = 16'd0 - fpart__h33618 ;
  always@(x__h28864 or
	  pe_0_0$getC or
	  pe_0_1$getC or
	  pe_0_2$getC or pe_0_3$getC or pe_0_4$getC or pe_0_5$getC)
  begin
    case (x__h28864)
      32'd0: fpart__h28635 = pe_0_0$getC[15:0];
      32'd1: fpart__h28635 = pe_0_1$getC[15:0];
      32'd2: fpart__h28635 = pe_0_2$getC[15:0];
      32'd3: fpart__h28635 = pe_0_3$getC[15:0];
      32'd4: fpart__h28635 = pe_0_4$getC[15:0];
      32'd5: fpart__h28635 = pe_0_5$getC[15:0];
      default: fpart__h28635 = 16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(x__h28864 or
	  pe_0_0$getC or
	  pe_0_1$getC or
	  pe_0_2$getC or pe_0_3$getC or pe_0_4$getC or pe_0_5$getC)
  begin
    case (x__h28864)
      32'd0:
	  SEL_ARR_pe_0_0_getC__50_BITS_31_TO_16_51_pe_0__ETC___d263 =
	      pe_0_0$getC[31:16];
      32'd1:
	  SEL_ARR_pe_0_0_getC__50_BITS_31_TO_16_51_pe_0__ETC___d263 =
	      pe_0_1$getC[31:16];
      32'd2:
	  SEL_ARR_pe_0_0_getC__50_BITS_31_TO_16_51_pe_0__ETC___d263 =
	      pe_0_2$getC[31:16];
      32'd3:
	  SEL_ARR_pe_0_0_getC__50_BITS_31_TO_16_51_pe_0__ETC___d263 =
	      pe_0_3$getC[31:16];
      32'd4:
	  SEL_ARR_pe_0_0_getC__50_BITS_31_TO_16_51_pe_0__ETC___d263 =
	      pe_0_4$getC[31:16];
      32'd5:
	  SEL_ARR_pe_0_0_getC__50_BITS_31_TO_16_51_pe_0__ETC___d263 =
	      pe_0_5$getC[31:16];
      default: SEL_ARR_pe_0_0_getC__50_BITS_31_TO_16_51_pe_0__ETC___d263 =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(cntr_30_MINUS_1_30_MINUS_6_31_MINUS_1___d332 or
	  pe_1_0$getC or
	  pe_1_1$getC or
	  pe_1_2$getC or pe_1_3$getC or pe_1_4$getC or pe_1_5$getC)
  begin
    case (cntr_30_MINUS_1_30_MINUS_6_31_MINUS_1___d332)
      32'd0: fpart__h29738 = pe_1_0$getC[15:0];
      32'd1: fpart__h29738 = pe_1_1$getC[15:0];
      32'd2: fpart__h29738 = pe_1_2$getC[15:0];
      32'd3: fpart__h29738 = pe_1_3$getC[15:0];
      32'd4: fpart__h29738 = pe_1_4$getC[15:0];
      32'd5: fpart__h29738 = pe_1_5$getC[15:0];
      default: fpart__h29738 = 16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(cntr_30_MINUS_1_30_MINUS_6_31_MINUS_1___d332 or
	  pe_1_0$getC or
	  pe_1_1$getC or
	  pe_1_2$getC or pe_1_3$getC or pe_1_4$getC or pe_1_5$getC)
  begin
    case (cntr_30_MINUS_1_30_MINUS_6_31_MINUS_1___d332)
      32'd0:
	  SEL_ARR_pe_1_0_getC__35_BITS_31_TO_16_36_pe_1__ETC___d348 =
	      pe_1_0$getC[31:16];
      32'd1:
	  SEL_ARR_pe_1_0_getC__35_BITS_31_TO_16_36_pe_1__ETC___d348 =
	      pe_1_1$getC[31:16];
      32'd2:
	  SEL_ARR_pe_1_0_getC__35_BITS_31_TO_16_36_pe_1__ETC___d348 =
	      pe_1_2$getC[31:16];
      32'd3:
	  SEL_ARR_pe_1_0_getC__35_BITS_31_TO_16_36_pe_1__ETC___d348 =
	      pe_1_3$getC[31:16];
      32'd4:
	  SEL_ARR_pe_1_0_getC__35_BITS_31_TO_16_36_pe_1__ETC___d348 =
	      pe_1_4$getC[31:16];
      32'd5:
	  SEL_ARR_pe_1_0_getC__35_BITS_31_TO_16_36_pe_1__ETC___d348 =
	      pe_1_5$getC[31:16];
      default: SEL_ARR_pe_1_0_getC__35_BITS_31_TO_16_36_pe_1__ETC___d348 =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(cntr_30_MINUS_2_15_MINUS_6_16_MINUS_1___d417 or
	  pe_2_0$getC or
	  pe_2_1$getC or
	  pe_2_2$getC or pe_2_3$getC or pe_2_4$getC or pe_2_5$getC)
  begin
    case (cntr_30_MINUS_2_15_MINUS_6_16_MINUS_1___d417)
      32'd0: fpart__h30708 = pe_2_0$getC[15:0];
      32'd1: fpart__h30708 = pe_2_1$getC[15:0];
      32'd2: fpart__h30708 = pe_2_2$getC[15:0];
      32'd3: fpart__h30708 = pe_2_3$getC[15:0];
      32'd4: fpart__h30708 = pe_2_4$getC[15:0];
      32'd5: fpart__h30708 = pe_2_5$getC[15:0];
      default: fpart__h30708 = 16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(cntr_30_MINUS_2_15_MINUS_6_16_MINUS_1___d417 or
	  pe_2_0$getC or
	  pe_2_1$getC or
	  pe_2_2$getC or pe_2_3$getC or pe_2_4$getC or pe_2_5$getC)
  begin
    case (cntr_30_MINUS_2_15_MINUS_6_16_MINUS_1___d417)
      32'd0:
	  SEL_ARR_pe_2_0_getC__20_BITS_31_TO_16_21_pe_2__ETC___d433 =
	      pe_2_0$getC[31:16];
      32'd1:
	  SEL_ARR_pe_2_0_getC__20_BITS_31_TO_16_21_pe_2__ETC___d433 =
	      pe_2_1$getC[31:16];
      32'd2:
	  SEL_ARR_pe_2_0_getC__20_BITS_31_TO_16_21_pe_2__ETC___d433 =
	      pe_2_2$getC[31:16];
      32'd3:
	  SEL_ARR_pe_2_0_getC__20_BITS_31_TO_16_21_pe_2__ETC___d433 =
	      pe_2_3$getC[31:16];
      32'd4:
	  SEL_ARR_pe_2_0_getC__20_BITS_31_TO_16_21_pe_2__ETC___d433 =
	      pe_2_4$getC[31:16];
      32'd5:
	  SEL_ARR_pe_2_0_getC__20_BITS_31_TO_16_21_pe_2__ETC___d433 =
	      pe_2_5$getC[31:16];
      default: SEL_ARR_pe_2_0_getC__20_BITS_31_TO_16_21_pe_2__ETC___d433 =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(cntr_30_MINUS_3_00_MINUS_6_01_MINUS_1___d502 or
	  pe_3_0$getC or
	  pe_3_1$getC or
	  pe_3_2$getC or pe_3_3$getC or pe_3_4$getC or pe_3_5$getC)
  begin
    case (cntr_30_MINUS_3_00_MINUS_6_01_MINUS_1___d502)
      32'd0: fpart__h31678 = pe_3_0$getC[15:0];
      32'd1: fpart__h31678 = pe_3_1$getC[15:0];
      32'd2: fpart__h31678 = pe_3_2$getC[15:0];
      32'd3: fpart__h31678 = pe_3_3$getC[15:0];
      32'd4: fpart__h31678 = pe_3_4$getC[15:0];
      32'd5: fpart__h31678 = pe_3_5$getC[15:0];
      default: fpart__h31678 = 16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(cntr_30_MINUS_3_00_MINUS_6_01_MINUS_1___d502 or
	  pe_3_0$getC or
	  pe_3_1$getC or
	  pe_3_2$getC or pe_3_3$getC or pe_3_4$getC or pe_3_5$getC)
  begin
    case (cntr_30_MINUS_3_00_MINUS_6_01_MINUS_1___d502)
      32'd0:
	  SEL_ARR_pe_3_0_getC__05_BITS_31_TO_16_06_pe_3__ETC___d518 =
	      pe_3_0$getC[31:16];
      32'd1:
	  SEL_ARR_pe_3_0_getC__05_BITS_31_TO_16_06_pe_3__ETC___d518 =
	      pe_3_1$getC[31:16];
      32'd2:
	  SEL_ARR_pe_3_0_getC__05_BITS_31_TO_16_06_pe_3__ETC___d518 =
	      pe_3_2$getC[31:16];
      32'd3:
	  SEL_ARR_pe_3_0_getC__05_BITS_31_TO_16_06_pe_3__ETC___d518 =
	      pe_3_3$getC[31:16];
      32'd4:
	  SEL_ARR_pe_3_0_getC__05_BITS_31_TO_16_06_pe_3__ETC___d518 =
	      pe_3_4$getC[31:16];
      32'd5:
	  SEL_ARR_pe_3_0_getC__05_BITS_31_TO_16_06_pe_3__ETC___d518 =
	      pe_3_5$getC[31:16];
      default: SEL_ARR_pe_3_0_getC__05_BITS_31_TO_16_06_pe_3__ETC___d518 =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(cntr_30_MINUS_4_85_MINUS_6_86_MINUS_1___d587 or
	  pe_4_0$getC or
	  pe_4_1$getC or
	  pe_4_2$getC or pe_4_3$getC or pe_4_4$getC or pe_4_5$getC)
  begin
    case (cntr_30_MINUS_4_85_MINUS_6_86_MINUS_1___d587)
      32'd0: fpart__h32648 = pe_4_0$getC[15:0];
      32'd1: fpart__h32648 = pe_4_1$getC[15:0];
      32'd2: fpart__h32648 = pe_4_2$getC[15:0];
      32'd3: fpart__h32648 = pe_4_3$getC[15:0];
      32'd4: fpart__h32648 = pe_4_4$getC[15:0];
      32'd5: fpart__h32648 = pe_4_5$getC[15:0];
      default: fpart__h32648 = 16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(cntr_30_MINUS_4_85_MINUS_6_86_MINUS_1___d587 or
	  pe_4_0$getC or
	  pe_4_1$getC or
	  pe_4_2$getC or pe_4_3$getC or pe_4_4$getC or pe_4_5$getC)
  begin
    case (cntr_30_MINUS_4_85_MINUS_6_86_MINUS_1___d587)
      32'd0:
	  SEL_ARR_pe_4_0_getC__90_BITS_31_TO_16_91_pe_4__ETC___d603 =
	      pe_4_0$getC[31:16];
      32'd1:
	  SEL_ARR_pe_4_0_getC__90_BITS_31_TO_16_91_pe_4__ETC___d603 =
	      pe_4_1$getC[31:16];
      32'd2:
	  SEL_ARR_pe_4_0_getC__90_BITS_31_TO_16_91_pe_4__ETC___d603 =
	      pe_4_2$getC[31:16];
      32'd3:
	  SEL_ARR_pe_4_0_getC__90_BITS_31_TO_16_91_pe_4__ETC___d603 =
	      pe_4_3$getC[31:16];
      32'd4:
	  SEL_ARR_pe_4_0_getC__90_BITS_31_TO_16_91_pe_4__ETC___d603 =
	      pe_4_4$getC[31:16];
      32'd5:
	  SEL_ARR_pe_4_0_getC__90_BITS_31_TO_16_91_pe_4__ETC___d603 =
	      pe_4_5$getC[31:16];
      default: SEL_ARR_pe_4_0_getC__90_BITS_31_TO_16_91_pe_4__ETC___d603 =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(cntr_30_MINUS_5_70_MINUS_6_71_MINUS_1___d672 or
	  pe_5_0$getC or
	  pe_5_1$getC or
	  pe_5_2$getC or pe_5_3$getC or pe_5_4$getC or pe_5_5$getC)
  begin
    case (cntr_30_MINUS_5_70_MINUS_6_71_MINUS_1___d672)
      32'd0: fpart__h33618 = pe_5_0$getC[15:0];
      32'd1: fpart__h33618 = pe_5_1$getC[15:0];
      32'd2: fpart__h33618 = pe_5_2$getC[15:0];
      32'd3: fpart__h33618 = pe_5_3$getC[15:0];
      32'd4: fpart__h33618 = pe_5_4$getC[15:0];
      32'd5: fpart__h33618 = pe_5_5$getC[15:0];
      default: fpart__h33618 = 16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(cntr_30_MINUS_5_70_MINUS_6_71_MINUS_1___d672 or
	  pe_5_0$getC or
	  pe_5_1$getC or
	  pe_5_2$getC or pe_5_3$getC or pe_5_4$getC or pe_5_5$getC)
  begin
    case (cntr_30_MINUS_5_70_MINUS_6_71_MINUS_1___d672)
      32'd0:
	  SEL_ARR_pe_5_0_getC__75_BITS_31_TO_16_76_pe_5__ETC___d688 =
	      pe_5_0$getC[31:16];
      32'd1:
	  SEL_ARR_pe_5_0_getC__75_BITS_31_TO_16_76_pe_5__ETC___d688 =
	      pe_5_1$getC[31:16];
      32'd2:
	  SEL_ARR_pe_5_0_getC__75_BITS_31_TO_16_76_pe_5__ETC___d688 =
	      pe_5_2$getC[31:16];
      32'd3:
	  SEL_ARR_pe_5_0_getC__75_BITS_31_TO_16_76_pe_5__ETC___d688 =
	      pe_5_3$getC[31:16];
      32'd4:
	  SEL_ARR_pe_5_0_getC__75_BITS_31_TO_16_76_pe_5__ETC___d688 =
	      pe_5_4$getC[31:16];
      32'd5:
	  SEL_ARR_pe_5_0_getC__75_BITS_31_TO_16_76_pe_5__ETC___d688 =
	      pe_5_5$getC[31:16];
      default: SEL_ARR_pe_5_0_getC__75_BITS_31_TO_16_76_pe_5__ETC___d688 =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cntr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	incr <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cntr$EN) cntr <= `BSV_ASSIGNMENT_DELAY cntr$D_IN;
	if (incr$EN) incr <= `BSV_ASSIGNMENT_DELAY incr$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cntr = 32'hAAAAAAAA;
    incr = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream && cntr_30_MINUS_6_46_MINUS_1_47_SLT_6___d248)
	begin
	  v__h28583 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream && cntr_30_MINUS_6_46_MINUS_1_47_SLT_6___d248)
	$display("\n", v__h28583, "get_out:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream && cntr_30_MINUS_6_46_MINUS_1_47_SLT_6___d248 &&
	  SEXT_SEL_ARR_pe_0_0_getC__50_BITS_31_TO_16_51__ETC___d264[16] &&
	  fpart__h28635 != 16'd0 &&
	  SEXT_SEL_ARR_pe_0_0_getC__50_BITS_31_TO_16_51__ETC___d264 ==
	  17'd131071)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream && cntr_30_MINUS_6_46_MINUS_1_47_SLT_6___d248 &&
	  SEXT_SEL_ARR_pe_0_0_getC__50_BITS_31_TO_16_51__ETC___d264[16] &&
	  fpart__h28635 != 16'd0 &&
	  SEXT_SEL_ARR_pe_0_0_getC__50_BITS_31_TO_16_51__ETC___d264 !=
	  17'd131071)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_pe_0_0_getC__50_BITS_31_TO_16_51__ETC___d264 +
		       17'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream && cntr_30_MINUS_6_46_MINUS_1_47_SLT_6___d248 &&
	  (!SEXT_SEL_ARR_pe_0_0_getC__50_BITS_31_TO_16_51__ETC___d264[16] ||
	   fpart__h28635 == 16'd0))
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_pe_0_0_getC__50_BITS_31_TO_16_51__ETC___d264));
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream && cntr_30_MINUS_6_46_MINUS_1_47_SLT_6___d248)
	$write("%0d", digit__h29124);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream && cntr_30_MINUS_6_46_MINUS_1_47_SLT_6___d248)
	$write("%0d", digit__h29191);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream && cntr_30_MINUS_6_46_MINUS_1_47_SLT_6___d248)
	$write("%0d", digit__h29280);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream && cntr_30_MINUS_6_46_MINUS_1_47_SLT_6___d248)
	$write("%0d", digit__h29369);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream && cntr_30_MINUS_6_46_MINUS_1_47_SLT_6___d248)
	$write("%0d", digit__h29458);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream && cntr_30_MINUS_6_46_MINUS_1_47_SLT_6___d248)
	$display("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_1_30_MINUS_6_31_MINUS_1_32_SLT_6___d333)
	begin
	  v__h29686 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_1_30_MINUS_6_31_MINUS_1_32_SLT_6___d333)
	$display("\n", v__h29686, "get_out:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_1_30_MINUS_6_31_MINUS_1_32_SLT_6___d333 &&
	  SEXT_SEL_ARR_pe_1_0_getC__35_BITS_31_TO_16_36__ETC___d349[16] &&
	  fpart__h29738 != 16'd0 &&
	  SEXT_SEL_ARR_pe_1_0_getC__35_BITS_31_TO_16_36__ETC___d349 ==
	  17'd131071)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_1_30_MINUS_6_31_MINUS_1_32_SLT_6___d333 &&
	  SEXT_SEL_ARR_pe_1_0_getC__35_BITS_31_TO_16_36__ETC___d349[16] &&
	  fpart__h29738 != 16'd0 &&
	  SEXT_SEL_ARR_pe_1_0_getC__35_BITS_31_TO_16_36__ETC___d349 !=
	  17'd131071)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_pe_1_0_getC__35_BITS_31_TO_16_36__ETC___d349 +
		       17'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_1_30_MINUS_6_31_MINUS_1_32_SLT_6___d333 &&
	  (!SEXT_SEL_ARR_pe_1_0_getC__35_BITS_31_TO_16_36__ETC___d349[16] ||
	   fpart__h29738 == 16'd0))
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_pe_1_0_getC__35_BITS_31_TO_16_36__ETC___d349));
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_1_30_MINUS_6_31_MINUS_1_32_SLT_6___d333)
	$write("%0d", digit__h30094);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_1_30_MINUS_6_31_MINUS_1_32_SLT_6___d333)
	$write("%0d", digit__h30161);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_1_30_MINUS_6_31_MINUS_1_32_SLT_6___d333)
	$write("%0d", digit__h30250);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_1_30_MINUS_6_31_MINUS_1_32_SLT_6___d333)
	$write("%0d", digit__h30339);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_1_30_MINUS_6_31_MINUS_1_32_SLT_6___d333)
	$write("%0d", digit__h30428);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_1_30_MINUS_6_31_MINUS_1_32_SLT_6___d333)
	$display("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_2_15_MINUS_6_16_MINUS_1_17_SLT_6___d418)
	begin
	  v__h30656 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_2_15_MINUS_6_16_MINUS_1_17_SLT_6___d418)
	$display("\n", v__h30656, "get_out:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_2_15_MINUS_6_16_MINUS_1_17_SLT_6___d418 &&
	  SEXT_SEL_ARR_pe_2_0_getC__20_BITS_31_TO_16_21__ETC___d434[16] &&
	  fpart__h30708 != 16'd0 &&
	  SEXT_SEL_ARR_pe_2_0_getC__20_BITS_31_TO_16_21__ETC___d434 ==
	  17'd131071)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_2_15_MINUS_6_16_MINUS_1_17_SLT_6___d418 &&
	  SEXT_SEL_ARR_pe_2_0_getC__20_BITS_31_TO_16_21__ETC___d434[16] &&
	  fpart__h30708 != 16'd0 &&
	  SEXT_SEL_ARR_pe_2_0_getC__20_BITS_31_TO_16_21__ETC___d434 !=
	  17'd131071)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_pe_2_0_getC__20_BITS_31_TO_16_21__ETC___d434 +
		       17'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_2_15_MINUS_6_16_MINUS_1_17_SLT_6___d418 &&
	  (!SEXT_SEL_ARR_pe_2_0_getC__20_BITS_31_TO_16_21__ETC___d434[16] ||
	   fpart__h30708 == 16'd0))
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_pe_2_0_getC__20_BITS_31_TO_16_21__ETC___d434));
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_2_15_MINUS_6_16_MINUS_1_17_SLT_6___d418)
	$write("%0d", digit__h31064);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_2_15_MINUS_6_16_MINUS_1_17_SLT_6___d418)
	$write("%0d", digit__h31131);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_2_15_MINUS_6_16_MINUS_1_17_SLT_6___d418)
	$write("%0d", digit__h31220);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_2_15_MINUS_6_16_MINUS_1_17_SLT_6___d418)
	$write("%0d", digit__h31309);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_2_15_MINUS_6_16_MINUS_1_17_SLT_6___d418)
	$write("%0d", digit__h31398);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_2_15_MINUS_6_16_MINUS_1_17_SLT_6___d418)
	$display("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_3_00_MINUS_6_01_MINUS_1_02_SLT_6___d503)
	begin
	  v__h31626 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_3_00_MINUS_6_01_MINUS_1_02_SLT_6___d503)
	$display("\n", v__h31626, "get_out:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_3_00_MINUS_6_01_MINUS_1_02_SLT_6___d503 &&
	  SEXT_SEL_ARR_pe_3_0_getC__05_BITS_31_TO_16_06__ETC___d519[16] &&
	  fpart__h31678 != 16'd0 &&
	  SEXT_SEL_ARR_pe_3_0_getC__05_BITS_31_TO_16_06__ETC___d519 ==
	  17'd131071)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_3_00_MINUS_6_01_MINUS_1_02_SLT_6___d503 &&
	  SEXT_SEL_ARR_pe_3_0_getC__05_BITS_31_TO_16_06__ETC___d519[16] &&
	  fpart__h31678 != 16'd0 &&
	  SEXT_SEL_ARR_pe_3_0_getC__05_BITS_31_TO_16_06__ETC___d519 !=
	  17'd131071)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_pe_3_0_getC__05_BITS_31_TO_16_06__ETC___d519 +
		       17'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_3_00_MINUS_6_01_MINUS_1_02_SLT_6___d503 &&
	  (!SEXT_SEL_ARR_pe_3_0_getC__05_BITS_31_TO_16_06__ETC___d519[16] ||
	   fpart__h31678 == 16'd0))
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_pe_3_0_getC__05_BITS_31_TO_16_06__ETC___d519));
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_3_00_MINUS_6_01_MINUS_1_02_SLT_6___d503)
	$write("%0d", digit__h32034);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_3_00_MINUS_6_01_MINUS_1_02_SLT_6___d503)
	$write("%0d", digit__h32101);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_3_00_MINUS_6_01_MINUS_1_02_SLT_6___d503)
	$write("%0d", digit__h32190);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_3_00_MINUS_6_01_MINUS_1_02_SLT_6___d503)
	$write("%0d", digit__h32279);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_3_00_MINUS_6_01_MINUS_1_02_SLT_6___d503)
	$write("%0d", digit__h32368);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_3_00_MINUS_6_01_MINUS_1_02_SLT_6___d503)
	$display("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_4_85_MINUS_6_86_MINUS_1_87_SLT_6___d588)
	begin
	  v__h32596 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_4_85_MINUS_6_86_MINUS_1_87_SLT_6___d588)
	$display("\n", v__h32596, "get_out:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_4_85_MINUS_6_86_MINUS_1_87_SLT_6___d588 &&
	  SEXT_SEL_ARR_pe_4_0_getC__90_BITS_31_TO_16_91__ETC___d604[16] &&
	  fpart__h32648 != 16'd0 &&
	  SEXT_SEL_ARR_pe_4_0_getC__90_BITS_31_TO_16_91__ETC___d604 ==
	  17'd131071)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_4_85_MINUS_6_86_MINUS_1_87_SLT_6___d588 &&
	  SEXT_SEL_ARR_pe_4_0_getC__90_BITS_31_TO_16_91__ETC___d604[16] &&
	  fpart__h32648 != 16'd0 &&
	  SEXT_SEL_ARR_pe_4_0_getC__90_BITS_31_TO_16_91__ETC___d604 !=
	  17'd131071)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_pe_4_0_getC__90_BITS_31_TO_16_91__ETC___d604 +
		       17'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_4_85_MINUS_6_86_MINUS_1_87_SLT_6___d588 &&
	  (!SEXT_SEL_ARR_pe_4_0_getC__90_BITS_31_TO_16_91__ETC___d604[16] ||
	   fpart__h32648 == 16'd0))
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_pe_4_0_getC__90_BITS_31_TO_16_91__ETC___d604));
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_4_85_MINUS_6_86_MINUS_1_87_SLT_6___d588)
	$write("%0d", digit__h33004);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_4_85_MINUS_6_86_MINUS_1_87_SLT_6___d588)
	$write("%0d", digit__h33071);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_4_85_MINUS_6_86_MINUS_1_87_SLT_6___d588)
	$write("%0d", digit__h33160);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_4_85_MINUS_6_86_MINUS_1_87_SLT_6___d588)
	$write("%0d", digit__h33249);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_4_85_MINUS_6_86_MINUS_1_87_SLT_6___d588)
	$write("%0d", digit__h33338);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_4_85_MINUS_6_86_MINUS_1_87_SLT_6___d588)
	$display("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_5_70_MINUS_6_71_MINUS_1_72_SLT_6___d673)
	begin
	  v__h33566 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_5_70_MINUS_6_71_MINUS_1_72_SLT_6___d673)
	$display("\n", v__h33566, "get_out:");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_5_70_MINUS_6_71_MINUS_1_72_SLT_6___d673 &&
	  SEXT_SEL_ARR_pe_5_0_getC__75_BITS_31_TO_16_76__ETC___d689[16] &&
	  fpart__h33618 != 16'd0 &&
	  SEXT_SEL_ARR_pe_5_0_getC__75_BITS_31_TO_16_76__ETC___d689 ==
	  17'd131071)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_5_70_MINUS_6_71_MINUS_1_72_SLT_6___d673 &&
	  SEXT_SEL_ARR_pe_5_0_getC__75_BITS_31_TO_16_76__ETC___d689[16] &&
	  fpart__h33618 != 16'd0 &&
	  SEXT_SEL_ARR_pe_5_0_getC__75_BITS_31_TO_16_76__ETC___d689 !=
	  17'd131071)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_pe_5_0_getC__75_BITS_31_TO_16_76__ETC___d689 +
		       17'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_5_70_MINUS_6_71_MINUS_1_72_SLT_6___d673 &&
	  (!SEXT_SEL_ARR_pe_5_0_getC__75_BITS_31_TO_16_76__ETC___d689[16] ||
	   fpart__h33618 == 16'd0))
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_pe_5_0_getC__75_BITS_31_TO_16_76__ETC___d689));
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_5_70_MINUS_6_71_MINUS_1_72_SLT_6___d673)
	$write("%0d", digit__h33974);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_5_70_MINUS_6_71_MINUS_1_72_SLT_6___d673)
	$write("%0d", digit__h34041);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_5_70_MINUS_6_71_MINUS_1_72_SLT_6___d673)
	$write("%0d", digit__h34130);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_5_70_MINUS_6_71_MINUS_1_72_SLT_6___d673)
	$write("%0d", digit__h34219);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_5_70_MINUS_6_71_MINUS_1_72_SLT_6___d673)
	$write("%0d", digit__h34308);
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_get_out_stream &&
	  cntr_30_MINUS_5_70_MINUS_6_71_MINUS_1_72_SLT_6___d673)
	$display("\n");
  end
  // synopsys translate_on
endmodule  // mat_mult_systolic

