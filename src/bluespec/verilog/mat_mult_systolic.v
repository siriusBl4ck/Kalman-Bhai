//
// Generated by Bluespec Compiler, version 2021.12.1-27-g9a7d5e05 (build 9a7d5e05)
//
// On Wed May 18 03:28:56 IST 2022
//
//
// Ports:
// Name                         I/O  size props
// RDY_feed_inp_stream            O     1 const
// get_out_stream                 O   192
// RDY_get_out_stream             O     1
// RDY_reset_mod                  O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// feed_inp_stream_a_stream       I   192
// feed_inp_stream_b_stream       I   192
// EN_feed_inp_stream             I     1
// EN_reset_mod                   I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mat_mult_systolic(CLK,
			 RST_N,

			 feed_inp_stream_a_stream,
			 feed_inp_stream_b_stream,
			 EN_feed_inp_stream,
			 RDY_feed_inp_stream,

			 get_out_stream,
			 RDY_get_out_stream,

			 EN_reset_mod,
			 RDY_reset_mod);
  input  CLK;
  input  RST_N;

  // action method feed_inp_stream
  input  [191 : 0] feed_inp_stream_a_stream;
  input  [191 : 0] feed_inp_stream_b_stream;
  input  EN_feed_inp_stream;
  output RDY_feed_inp_stream;

  // value method get_out_stream
  output [191 : 0] get_out_stream;
  output RDY_get_out_stream;

  // action method reset_mod
  input  EN_reset_mod;
  output RDY_reset_mod;

  // signals for module outputs
  wire [191 : 0] get_out_stream;
  wire RDY_feed_inp_stream, RDY_get_out_stream, RDY_reset_mod;

  // register cntr
  reg [31 : 0] cntr;
  wire [31 : 0] cntr$D_IN;
  wire cntr$EN;

  // register incr
  reg incr;
  wire incr$D_IN, incr$EN;

  // ports of submodule pe_0_0
  wire [31 : 0] pe_0_0$getA,
		pe_0_0$getB,
		pe_0_0$getC,
		pe_0_0$putA_in_a,
		pe_0_0$putB_in_b;
  wire pe_0_0$EN_putA, pe_0_0$EN_putB, pe_0_0$EN_reset_mod;

  // ports of submodule pe_0_1
  wire [31 : 0] pe_0_1$getA,
		pe_0_1$getB,
		pe_0_1$getC,
		pe_0_1$putA_in_a,
		pe_0_1$putB_in_b;
  wire pe_0_1$EN_putA, pe_0_1$EN_putB, pe_0_1$EN_reset_mod, pe_0_1$validAB;

  // ports of submodule pe_0_2
  wire [31 : 0] pe_0_2$getA,
		pe_0_2$getB,
		pe_0_2$getC,
		pe_0_2$putA_in_a,
		pe_0_2$putB_in_b;
  wire pe_0_2$EN_putA, pe_0_2$EN_putB, pe_0_2$EN_reset_mod, pe_0_2$validAB;

  // ports of submodule pe_0_3
  wire [31 : 0] pe_0_3$getA,
		pe_0_3$getB,
		pe_0_3$getC,
		pe_0_3$putA_in_a,
		pe_0_3$putB_in_b;
  wire pe_0_3$EN_putA, pe_0_3$EN_putB, pe_0_3$EN_reset_mod, pe_0_3$validAB;

  // ports of submodule pe_0_4
  wire [31 : 0] pe_0_4$getA,
		pe_0_4$getB,
		pe_0_4$getC,
		pe_0_4$putA_in_a,
		pe_0_4$putB_in_b;
  wire pe_0_4$EN_putA, pe_0_4$EN_putB, pe_0_4$EN_reset_mod, pe_0_4$validAB;

  // ports of submodule pe_0_5
  wire [31 : 0] pe_0_5$getB, pe_0_5$getC, pe_0_5$putA_in_a, pe_0_5$putB_in_b;
  wire pe_0_5$EN_putA, pe_0_5$EN_putB, pe_0_5$EN_reset_mod, pe_0_5$validAB;

  // ports of submodule pe_1_0
  wire [31 : 0] pe_1_0$getA,
		pe_1_0$getB,
		pe_1_0$getC,
		pe_1_0$putA_in_a,
		pe_1_0$putB_in_b;
  wire pe_1_0$EN_putA, pe_1_0$EN_putB, pe_1_0$EN_reset_mod, pe_1_0$validAB;

  // ports of submodule pe_1_1
  wire [31 : 0] pe_1_1$getA,
		pe_1_1$getB,
		pe_1_1$getC,
		pe_1_1$putA_in_a,
		pe_1_1$putB_in_b;
  wire pe_1_1$EN_putA, pe_1_1$EN_putB, pe_1_1$EN_reset_mod, pe_1_1$validAB;

  // ports of submodule pe_1_2
  wire [31 : 0] pe_1_2$getA,
		pe_1_2$getB,
		pe_1_2$getC,
		pe_1_2$putA_in_a,
		pe_1_2$putB_in_b;
  wire pe_1_2$EN_putA, pe_1_2$EN_putB, pe_1_2$EN_reset_mod, pe_1_2$validAB;

  // ports of submodule pe_1_3
  wire [31 : 0] pe_1_3$getA,
		pe_1_3$getB,
		pe_1_3$getC,
		pe_1_3$putA_in_a,
		pe_1_3$putB_in_b;
  wire pe_1_3$EN_putA, pe_1_3$EN_putB, pe_1_3$EN_reset_mod, pe_1_3$validAB;

  // ports of submodule pe_1_4
  wire [31 : 0] pe_1_4$getA,
		pe_1_4$getB,
		pe_1_4$getC,
		pe_1_4$putA_in_a,
		pe_1_4$putB_in_b;
  wire pe_1_4$EN_putA, pe_1_4$EN_putB, pe_1_4$EN_reset_mod, pe_1_4$validAB;

  // ports of submodule pe_1_5
  wire [31 : 0] pe_1_5$getB, pe_1_5$getC, pe_1_5$putA_in_a, pe_1_5$putB_in_b;
  wire pe_1_5$EN_putA, pe_1_5$EN_putB, pe_1_5$EN_reset_mod, pe_1_5$validAB;

  // ports of submodule pe_2_0
  wire [31 : 0] pe_2_0$getA,
		pe_2_0$getB,
		pe_2_0$getC,
		pe_2_0$putA_in_a,
		pe_2_0$putB_in_b;
  wire pe_2_0$EN_putA, pe_2_0$EN_putB, pe_2_0$EN_reset_mod, pe_2_0$validAB;

  // ports of submodule pe_2_1
  wire [31 : 0] pe_2_1$getA,
		pe_2_1$getB,
		pe_2_1$getC,
		pe_2_1$putA_in_a,
		pe_2_1$putB_in_b;
  wire pe_2_1$EN_putA, pe_2_1$EN_putB, pe_2_1$EN_reset_mod, pe_2_1$validAB;

  // ports of submodule pe_2_2
  wire [31 : 0] pe_2_2$getA,
		pe_2_2$getB,
		pe_2_2$getC,
		pe_2_2$putA_in_a,
		pe_2_2$putB_in_b;
  wire pe_2_2$EN_putA, pe_2_2$EN_putB, pe_2_2$EN_reset_mod, pe_2_2$validAB;

  // ports of submodule pe_2_3
  wire [31 : 0] pe_2_3$getA,
		pe_2_3$getB,
		pe_2_3$getC,
		pe_2_3$putA_in_a,
		pe_2_3$putB_in_b;
  wire pe_2_3$EN_putA, pe_2_3$EN_putB, pe_2_3$EN_reset_mod, pe_2_3$validAB;

  // ports of submodule pe_2_4
  wire [31 : 0] pe_2_4$getA,
		pe_2_4$getB,
		pe_2_4$getC,
		pe_2_4$putA_in_a,
		pe_2_4$putB_in_b;
  wire pe_2_4$EN_putA, pe_2_4$EN_putB, pe_2_4$EN_reset_mod, pe_2_4$validAB;

  // ports of submodule pe_2_5
  wire [31 : 0] pe_2_5$getB, pe_2_5$getC, pe_2_5$putA_in_a, pe_2_5$putB_in_b;
  wire pe_2_5$EN_putA, pe_2_5$EN_putB, pe_2_5$EN_reset_mod, pe_2_5$validAB;

  // ports of submodule pe_3_0
  wire [31 : 0] pe_3_0$getA,
		pe_3_0$getB,
		pe_3_0$getC,
		pe_3_0$putA_in_a,
		pe_3_0$putB_in_b;
  wire pe_3_0$EN_putA, pe_3_0$EN_putB, pe_3_0$EN_reset_mod, pe_3_0$validAB;

  // ports of submodule pe_3_1
  wire [31 : 0] pe_3_1$getA,
		pe_3_1$getB,
		pe_3_1$getC,
		pe_3_1$putA_in_a,
		pe_3_1$putB_in_b;
  wire pe_3_1$EN_putA, pe_3_1$EN_putB, pe_3_1$EN_reset_mod, pe_3_1$validAB;

  // ports of submodule pe_3_2
  wire [31 : 0] pe_3_2$getA,
		pe_3_2$getB,
		pe_3_2$getC,
		pe_3_2$putA_in_a,
		pe_3_2$putB_in_b;
  wire pe_3_2$EN_putA, pe_3_2$EN_putB, pe_3_2$EN_reset_mod, pe_3_2$validAB;

  // ports of submodule pe_3_3
  wire [31 : 0] pe_3_3$getA,
		pe_3_3$getB,
		pe_3_3$getC,
		pe_3_3$putA_in_a,
		pe_3_3$putB_in_b;
  wire pe_3_3$EN_putA, pe_3_3$EN_putB, pe_3_3$EN_reset_mod, pe_3_3$validAB;

  // ports of submodule pe_3_4
  wire [31 : 0] pe_3_4$getA,
		pe_3_4$getB,
		pe_3_4$getC,
		pe_3_4$putA_in_a,
		pe_3_4$putB_in_b;
  wire pe_3_4$EN_putA, pe_3_4$EN_putB, pe_3_4$EN_reset_mod, pe_3_4$validAB;

  // ports of submodule pe_3_5
  wire [31 : 0] pe_3_5$getB, pe_3_5$getC, pe_3_5$putA_in_a, pe_3_5$putB_in_b;
  wire pe_3_5$EN_putA, pe_3_5$EN_putB, pe_3_5$EN_reset_mod, pe_3_5$validAB;

  // ports of submodule pe_4_0
  wire [31 : 0] pe_4_0$getA,
		pe_4_0$getB,
		pe_4_0$getC,
		pe_4_0$putA_in_a,
		pe_4_0$putB_in_b;
  wire pe_4_0$EN_putA, pe_4_0$EN_putB, pe_4_0$EN_reset_mod, pe_4_0$validAB;

  // ports of submodule pe_4_1
  wire [31 : 0] pe_4_1$getA,
		pe_4_1$getB,
		pe_4_1$getC,
		pe_4_1$putA_in_a,
		pe_4_1$putB_in_b;
  wire pe_4_1$EN_putA, pe_4_1$EN_putB, pe_4_1$EN_reset_mod, pe_4_1$validAB;

  // ports of submodule pe_4_2
  wire [31 : 0] pe_4_2$getA,
		pe_4_2$getB,
		pe_4_2$getC,
		pe_4_2$putA_in_a,
		pe_4_2$putB_in_b;
  wire pe_4_2$EN_putA, pe_4_2$EN_putB, pe_4_2$EN_reset_mod, pe_4_2$validAB;

  // ports of submodule pe_4_3
  wire [31 : 0] pe_4_3$getA,
		pe_4_3$getB,
		pe_4_3$getC,
		pe_4_3$putA_in_a,
		pe_4_3$putB_in_b;
  wire pe_4_3$EN_putA, pe_4_3$EN_putB, pe_4_3$EN_reset_mod, pe_4_3$validAB;

  // ports of submodule pe_4_4
  wire [31 : 0] pe_4_4$getA,
		pe_4_4$getB,
		pe_4_4$getC,
		pe_4_4$putA_in_a,
		pe_4_4$putB_in_b;
  wire pe_4_4$EN_putA, pe_4_4$EN_putB, pe_4_4$EN_reset_mod, pe_4_4$validAB;

  // ports of submodule pe_4_5
  wire [31 : 0] pe_4_5$getB, pe_4_5$getC, pe_4_5$putA_in_a, pe_4_5$putB_in_b;
  wire pe_4_5$EN_putA, pe_4_5$EN_putB, pe_4_5$EN_reset_mod, pe_4_5$validAB;

  // ports of submodule pe_5_0
  wire [31 : 0] pe_5_0$getA, pe_5_0$getC, pe_5_0$putA_in_a, pe_5_0$putB_in_b;
  wire pe_5_0$EN_putA, pe_5_0$EN_putB, pe_5_0$EN_reset_mod, pe_5_0$validAB;

  // ports of submodule pe_5_1
  wire [31 : 0] pe_5_1$getA, pe_5_1$getC, pe_5_1$putA_in_a, pe_5_1$putB_in_b;
  wire pe_5_1$EN_putA, pe_5_1$EN_putB, pe_5_1$EN_reset_mod, pe_5_1$validAB;

  // ports of submodule pe_5_2
  wire [31 : 0] pe_5_2$getA, pe_5_2$getC, pe_5_2$putA_in_a, pe_5_2$putB_in_b;
  wire pe_5_2$EN_putA, pe_5_2$EN_putB, pe_5_2$EN_reset_mod, pe_5_2$validAB;

  // ports of submodule pe_5_3
  wire [31 : 0] pe_5_3$getA, pe_5_3$getC, pe_5_3$putA_in_a, pe_5_3$putB_in_b;
  wire pe_5_3$EN_putA, pe_5_3$EN_putB, pe_5_3$EN_reset_mod, pe_5_3$validAB;

  // ports of submodule pe_5_4
  wire [31 : 0] pe_5_4$getA, pe_5_4$getC, pe_5_4$putA_in_a, pe_5_4$putB_in_b;
  wire pe_5_4$EN_putA, pe_5_4$EN_putB, pe_5_4$EN_reset_mod, pe_5_4$validAB;

  // ports of submodule pe_5_5
  wire [31 : 0] pe_5_5$getC, pe_5_5$putA_in_a, pe_5_5$putB_in_b;
  wire pe_5_5$EN_putA, pe_5_5$EN_putB, pe_5_5$EN_reset_mod;

  // rule scheduling signals
  wire WILL_FIRE_RL_inc_cntr;

  // inputs to muxes for submodule ports
  wire MUX_incr$write_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h26797;
  // synopsys translate_on

  // remaining internal signals
  reg [15 : 0] SEL_ARR_pe_0_0_getC__93_BITS_15_TO_0_07_pe_0_1_ETC___d414,
	       SEL_ARR_pe_0_0_getC__93_BITS_31_TO_16_94_pe_0__ETC___d406,
	       SEL_ARR_pe_1_0_getC__66_BITS_15_TO_0_80_pe_1_1_ETC___d387,
	       SEL_ARR_pe_1_0_getC__66_BITS_31_TO_16_67_pe_1__ETC___d379,
	       SEL_ARR_pe_2_0_getC__37_BITS_15_TO_0_51_pe_2_1_ETC___d358,
	       SEL_ARR_pe_2_0_getC__37_BITS_31_TO_16_38_pe_2__ETC___d350,
	       SEL_ARR_pe_3_0_getC__09_BITS_15_TO_0_23_pe_3_1_ETC___d330,
	       SEL_ARR_pe_3_0_getC__09_BITS_31_TO_16_10_pe_3__ETC___d322,
	       SEL_ARR_pe_4_0_getC__80_BITS_15_TO_0_94_pe_4_1_ETC___d301,
	       SEL_ARR_pe_4_0_getC__80_BITS_31_TO_16_81_pe_4__ETC___d293,
	       SEL_ARR_pe_5_0_getC__52_BITS_15_TO_0_66_pe_5_1_ETC___d273,
	       SEL_ARR_pe_5_0_getC__52_BITS_31_TO_16_53_pe_5__ETC___d265;
  wire [127 : 0] IF_cntr_30_MINUS_5_48_MINUS_6_49_MINUS_1_50_SL_ETC___d361;
  wire [63 : 0] IF_cntr_30_MINUS_5_48_MINUS_6_49_MINUS_1_50_SL_ETC___d304;
  wire [31 : 0] cntr_30_MINUS_1_62_MINUS_6_63_MINUS_1___d364,
		cntr_30_MINUS_2_33_MINUS_6_34_MINUS_1___d335,
		cntr_30_MINUS_3_05_MINUS_6_06_MINUS_1___d307,
		cntr_30_MINUS_4_76_MINUS_6_77_MINUS_1___d278,
		cntr_30_MINUS_5_48_MINUS_6_49_MINUS_1___d250,
		x__h29990;

  // action method feed_inp_stream
  assign RDY_feed_inp_stream = 1'd1 ;

  // value method get_out_stream
  assign get_out_stream =
	     { IF_cntr_30_MINUS_5_48_MINUS_6_49_MINUS_1_50_SL_ETC___d361,
	       ((cntr_30_MINUS_1_62_MINUS_6_63_MINUS_1___d364 ^
		 32'h80000000) <
		32'h80000006) ?
		 { SEL_ARR_pe_1_0_getC__66_BITS_31_TO_16_67_pe_1__ETC___d379,
		   SEL_ARR_pe_1_0_getC__66_BITS_15_TO_0_80_pe_1_1_ETC___d387 } :
		 32'd0,
	       ((x__h29990 ^ 32'h80000000) < 32'h80000006) ?
		 { SEL_ARR_pe_0_0_getC__93_BITS_31_TO_16_94_pe_0__ETC___d406,
		   SEL_ARR_pe_0_0_getC__93_BITS_15_TO_0_07_pe_0_1_ETC___d414 } :
		 32'd0 } ;
  assign RDY_get_out_stream = (cntr ^ 32'h80000000) > 32'h80000006 ;

  // action method reset_mod
  assign RDY_reset_mod = 1'd1 ;

  // submodule pe_0_0
  mk_pe pe_0_0(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_0_0$putA_in_a),
	       .putB_in_b(pe_0_0$putB_in_b),
	       .EN_putA(pe_0_0$EN_putA),
	       .EN_putB(pe_0_0$EN_putB),
	       .EN_reset_mod(pe_0_0$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_0_0$getA),
	       .RDY_getA(),
	       .getB(pe_0_0$getB),
	       .RDY_getB(),
	       .getC(pe_0_0$getC),
	       .RDY_getC(),
	       .validAB(),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_0_1
  mk_pe pe_0_1(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_0_1$putA_in_a),
	       .putB_in_b(pe_0_1$putB_in_b),
	       .EN_putA(pe_0_1$EN_putA),
	       .EN_putB(pe_0_1$EN_putB),
	       .EN_reset_mod(pe_0_1$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_0_1$getA),
	       .RDY_getA(),
	       .getB(pe_0_1$getB),
	       .RDY_getB(),
	       .getC(pe_0_1$getC),
	       .RDY_getC(),
	       .validAB(pe_0_1$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_0_2
  mk_pe pe_0_2(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_0_2$putA_in_a),
	       .putB_in_b(pe_0_2$putB_in_b),
	       .EN_putA(pe_0_2$EN_putA),
	       .EN_putB(pe_0_2$EN_putB),
	       .EN_reset_mod(pe_0_2$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_0_2$getA),
	       .RDY_getA(),
	       .getB(pe_0_2$getB),
	       .RDY_getB(),
	       .getC(pe_0_2$getC),
	       .RDY_getC(),
	       .validAB(pe_0_2$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_0_3
  mk_pe pe_0_3(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_0_3$putA_in_a),
	       .putB_in_b(pe_0_3$putB_in_b),
	       .EN_putA(pe_0_3$EN_putA),
	       .EN_putB(pe_0_3$EN_putB),
	       .EN_reset_mod(pe_0_3$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_0_3$getA),
	       .RDY_getA(),
	       .getB(pe_0_3$getB),
	       .RDY_getB(),
	       .getC(pe_0_3$getC),
	       .RDY_getC(),
	       .validAB(pe_0_3$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_0_4
  mk_pe pe_0_4(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_0_4$putA_in_a),
	       .putB_in_b(pe_0_4$putB_in_b),
	       .EN_putA(pe_0_4$EN_putA),
	       .EN_putB(pe_0_4$EN_putB),
	       .EN_reset_mod(pe_0_4$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_0_4$getA),
	       .RDY_getA(),
	       .getB(pe_0_4$getB),
	       .RDY_getB(),
	       .getC(pe_0_4$getC),
	       .RDY_getC(),
	       .validAB(pe_0_4$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_0_5
  mk_pe pe_0_5(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_0_5$putA_in_a),
	       .putB_in_b(pe_0_5$putB_in_b),
	       .EN_putA(pe_0_5$EN_putA),
	       .EN_putB(pe_0_5$EN_putB),
	       .EN_reset_mod(pe_0_5$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(),
	       .RDY_getA(),
	       .getB(pe_0_5$getB),
	       .RDY_getB(),
	       .getC(pe_0_5$getC),
	       .RDY_getC(),
	       .validAB(pe_0_5$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_1_0
  mk_pe pe_1_0(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_1_0$putA_in_a),
	       .putB_in_b(pe_1_0$putB_in_b),
	       .EN_putA(pe_1_0$EN_putA),
	       .EN_putB(pe_1_0$EN_putB),
	       .EN_reset_mod(pe_1_0$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_1_0$getA),
	       .RDY_getA(),
	       .getB(pe_1_0$getB),
	       .RDY_getB(),
	       .getC(pe_1_0$getC),
	       .RDY_getC(),
	       .validAB(pe_1_0$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_1_1
  mk_pe pe_1_1(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_1_1$putA_in_a),
	       .putB_in_b(pe_1_1$putB_in_b),
	       .EN_putA(pe_1_1$EN_putA),
	       .EN_putB(pe_1_1$EN_putB),
	       .EN_reset_mod(pe_1_1$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_1_1$getA),
	       .RDY_getA(),
	       .getB(pe_1_1$getB),
	       .RDY_getB(),
	       .getC(pe_1_1$getC),
	       .RDY_getC(),
	       .validAB(pe_1_1$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_1_2
  mk_pe pe_1_2(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_1_2$putA_in_a),
	       .putB_in_b(pe_1_2$putB_in_b),
	       .EN_putA(pe_1_2$EN_putA),
	       .EN_putB(pe_1_2$EN_putB),
	       .EN_reset_mod(pe_1_2$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_1_2$getA),
	       .RDY_getA(),
	       .getB(pe_1_2$getB),
	       .RDY_getB(),
	       .getC(pe_1_2$getC),
	       .RDY_getC(),
	       .validAB(pe_1_2$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_1_3
  mk_pe pe_1_3(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_1_3$putA_in_a),
	       .putB_in_b(pe_1_3$putB_in_b),
	       .EN_putA(pe_1_3$EN_putA),
	       .EN_putB(pe_1_3$EN_putB),
	       .EN_reset_mod(pe_1_3$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_1_3$getA),
	       .RDY_getA(),
	       .getB(pe_1_3$getB),
	       .RDY_getB(),
	       .getC(pe_1_3$getC),
	       .RDY_getC(),
	       .validAB(pe_1_3$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_1_4
  mk_pe pe_1_4(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_1_4$putA_in_a),
	       .putB_in_b(pe_1_4$putB_in_b),
	       .EN_putA(pe_1_4$EN_putA),
	       .EN_putB(pe_1_4$EN_putB),
	       .EN_reset_mod(pe_1_4$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_1_4$getA),
	       .RDY_getA(),
	       .getB(pe_1_4$getB),
	       .RDY_getB(),
	       .getC(pe_1_4$getC),
	       .RDY_getC(),
	       .validAB(pe_1_4$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_1_5
  mk_pe pe_1_5(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_1_5$putA_in_a),
	       .putB_in_b(pe_1_5$putB_in_b),
	       .EN_putA(pe_1_5$EN_putA),
	       .EN_putB(pe_1_5$EN_putB),
	       .EN_reset_mod(pe_1_5$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(),
	       .RDY_getA(),
	       .getB(pe_1_5$getB),
	       .RDY_getB(),
	       .getC(pe_1_5$getC),
	       .RDY_getC(),
	       .validAB(pe_1_5$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_2_0
  mk_pe pe_2_0(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_2_0$putA_in_a),
	       .putB_in_b(pe_2_0$putB_in_b),
	       .EN_putA(pe_2_0$EN_putA),
	       .EN_putB(pe_2_0$EN_putB),
	       .EN_reset_mod(pe_2_0$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_2_0$getA),
	       .RDY_getA(),
	       .getB(pe_2_0$getB),
	       .RDY_getB(),
	       .getC(pe_2_0$getC),
	       .RDY_getC(),
	       .validAB(pe_2_0$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_2_1
  mk_pe pe_2_1(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_2_1$putA_in_a),
	       .putB_in_b(pe_2_1$putB_in_b),
	       .EN_putA(pe_2_1$EN_putA),
	       .EN_putB(pe_2_1$EN_putB),
	       .EN_reset_mod(pe_2_1$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_2_1$getA),
	       .RDY_getA(),
	       .getB(pe_2_1$getB),
	       .RDY_getB(),
	       .getC(pe_2_1$getC),
	       .RDY_getC(),
	       .validAB(pe_2_1$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_2_2
  mk_pe pe_2_2(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_2_2$putA_in_a),
	       .putB_in_b(pe_2_2$putB_in_b),
	       .EN_putA(pe_2_2$EN_putA),
	       .EN_putB(pe_2_2$EN_putB),
	       .EN_reset_mod(pe_2_2$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_2_2$getA),
	       .RDY_getA(),
	       .getB(pe_2_2$getB),
	       .RDY_getB(),
	       .getC(pe_2_2$getC),
	       .RDY_getC(),
	       .validAB(pe_2_2$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_2_3
  mk_pe pe_2_3(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_2_3$putA_in_a),
	       .putB_in_b(pe_2_3$putB_in_b),
	       .EN_putA(pe_2_3$EN_putA),
	       .EN_putB(pe_2_3$EN_putB),
	       .EN_reset_mod(pe_2_3$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_2_3$getA),
	       .RDY_getA(),
	       .getB(pe_2_3$getB),
	       .RDY_getB(),
	       .getC(pe_2_3$getC),
	       .RDY_getC(),
	       .validAB(pe_2_3$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_2_4
  mk_pe pe_2_4(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_2_4$putA_in_a),
	       .putB_in_b(pe_2_4$putB_in_b),
	       .EN_putA(pe_2_4$EN_putA),
	       .EN_putB(pe_2_4$EN_putB),
	       .EN_reset_mod(pe_2_4$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_2_4$getA),
	       .RDY_getA(),
	       .getB(pe_2_4$getB),
	       .RDY_getB(),
	       .getC(pe_2_4$getC),
	       .RDY_getC(),
	       .validAB(pe_2_4$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_2_5
  mk_pe pe_2_5(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_2_5$putA_in_a),
	       .putB_in_b(pe_2_5$putB_in_b),
	       .EN_putA(pe_2_5$EN_putA),
	       .EN_putB(pe_2_5$EN_putB),
	       .EN_reset_mod(pe_2_5$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(),
	       .RDY_getA(),
	       .getB(pe_2_5$getB),
	       .RDY_getB(),
	       .getC(pe_2_5$getC),
	       .RDY_getC(),
	       .validAB(pe_2_5$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_3_0
  mk_pe pe_3_0(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_3_0$putA_in_a),
	       .putB_in_b(pe_3_0$putB_in_b),
	       .EN_putA(pe_3_0$EN_putA),
	       .EN_putB(pe_3_0$EN_putB),
	       .EN_reset_mod(pe_3_0$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_3_0$getA),
	       .RDY_getA(),
	       .getB(pe_3_0$getB),
	       .RDY_getB(),
	       .getC(pe_3_0$getC),
	       .RDY_getC(),
	       .validAB(pe_3_0$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_3_1
  mk_pe pe_3_1(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_3_1$putA_in_a),
	       .putB_in_b(pe_3_1$putB_in_b),
	       .EN_putA(pe_3_1$EN_putA),
	       .EN_putB(pe_3_1$EN_putB),
	       .EN_reset_mod(pe_3_1$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_3_1$getA),
	       .RDY_getA(),
	       .getB(pe_3_1$getB),
	       .RDY_getB(),
	       .getC(pe_3_1$getC),
	       .RDY_getC(),
	       .validAB(pe_3_1$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_3_2
  mk_pe pe_3_2(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_3_2$putA_in_a),
	       .putB_in_b(pe_3_2$putB_in_b),
	       .EN_putA(pe_3_2$EN_putA),
	       .EN_putB(pe_3_2$EN_putB),
	       .EN_reset_mod(pe_3_2$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_3_2$getA),
	       .RDY_getA(),
	       .getB(pe_3_2$getB),
	       .RDY_getB(),
	       .getC(pe_3_2$getC),
	       .RDY_getC(),
	       .validAB(pe_3_2$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_3_3
  mk_pe pe_3_3(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_3_3$putA_in_a),
	       .putB_in_b(pe_3_3$putB_in_b),
	       .EN_putA(pe_3_3$EN_putA),
	       .EN_putB(pe_3_3$EN_putB),
	       .EN_reset_mod(pe_3_3$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_3_3$getA),
	       .RDY_getA(),
	       .getB(pe_3_3$getB),
	       .RDY_getB(),
	       .getC(pe_3_3$getC),
	       .RDY_getC(),
	       .validAB(pe_3_3$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_3_4
  mk_pe pe_3_4(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_3_4$putA_in_a),
	       .putB_in_b(pe_3_4$putB_in_b),
	       .EN_putA(pe_3_4$EN_putA),
	       .EN_putB(pe_3_4$EN_putB),
	       .EN_reset_mod(pe_3_4$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_3_4$getA),
	       .RDY_getA(),
	       .getB(pe_3_4$getB),
	       .RDY_getB(),
	       .getC(pe_3_4$getC),
	       .RDY_getC(),
	       .validAB(pe_3_4$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_3_5
  mk_pe pe_3_5(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_3_5$putA_in_a),
	       .putB_in_b(pe_3_5$putB_in_b),
	       .EN_putA(pe_3_5$EN_putA),
	       .EN_putB(pe_3_5$EN_putB),
	       .EN_reset_mod(pe_3_5$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(),
	       .RDY_getA(),
	       .getB(pe_3_5$getB),
	       .RDY_getB(),
	       .getC(pe_3_5$getC),
	       .RDY_getC(),
	       .validAB(pe_3_5$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_4_0
  mk_pe pe_4_0(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_4_0$putA_in_a),
	       .putB_in_b(pe_4_0$putB_in_b),
	       .EN_putA(pe_4_0$EN_putA),
	       .EN_putB(pe_4_0$EN_putB),
	       .EN_reset_mod(pe_4_0$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_4_0$getA),
	       .RDY_getA(),
	       .getB(pe_4_0$getB),
	       .RDY_getB(),
	       .getC(pe_4_0$getC),
	       .RDY_getC(),
	       .validAB(pe_4_0$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_4_1
  mk_pe pe_4_1(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_4_1$putA_in_a),
	       .putB_in_b(pe_4_1$putB_in_b),
	       .EN_putA(pe_4_1$EN_putA),
	       .EN_putB(pe_4_1$EN_putB),
	       .EN_reset_mod(pe_4_1$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_4_1$getA),
	       .RDY_getA(),
	       .getB(pe_4_1$getB),
	       .RDY_getB(),
	       .getC(pe_4_1$getC),
	       .RDY_getC(),
	       .validAB(pe_4_1$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_4_2
  mk_pe pe_4_2(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_4_2$putA_in_a),
	       .putB_in_b(pe_4_2$putB_in_b),
	       .EN_putA(pe_4_2$EN_putA),
	       .EN_putB(pe_4_2$EN_putB),
	       .EN_reset_mod(pe_4_2$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_4_2$getA),
	       .RDY_getA(),
	       .getB(pe_4_2$getB),
	       .RDY_getB(),
	       .getC(pe_4_2$getC),
	       .RDY_getC(),
	       .validAB(pe_4_2$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_4_3
  mk_pe pe_4_3(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_4_3$putA_in_a),
	       .putB_in_b(pe_4_3$putB_in_b),
	       .EN_putA(pe_4_3$EN_putA),
	       .EN_putB(pe_4_3$EN_putB),
	       .EN_reset_mod(pe_4_3$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_4_3$getA),
	       .RDY_getA(),
	       .getB(pe_4_3$getB),
	       .RDY_getB(),
	       .getC(pe_4_3$getC),
	       .RDY_getC(),
	       .validAB(pe_4_3$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_4_4
  mk_pe pe_4_4(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_4_4$putA_in_a),
	       .putB_in_b(pe_4_4$putB_in_b),
	       .EN_putA(pe_4_4$EN_putA),
	       .EN_putB(pe_4_4$EN_putB),
	       .EN_reset_mod(pe_4_4$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_4_4$getA),
	       .RDY_getA(),
	       .getB(pe_4_4$getB),
	       .RDY_getB(),
	       .getC(pe_4_4$getC),
	       .RDY_getC(),
	       .validAB(pe_4_4$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_4_5
  mk_pe pe_4_5(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_4_5$putA_in_a),
	       .putB_in_b(pe_4_5$putB_in_b),
	       .EN_putA(pe_4_5$EN_putA),
	       .EN_putB(pe_4_5$EN_putB),
	       .EN_reset_mod(pe_4_5$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(),
	       .RDY_getA(),
	       .getB(pe_4_5$getB),
	       .RDY_getB(),
	       .getC(pe_4_5$getC),
	       .RDY_getC(),
	       .validAB(pe_4_5$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_5_0
  mk_pe pe_5_0(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_5_0$putA_in_a),
	       .putB_in_b(pe_5_0$putB_in_b),
	       .EN_putA(pe_5_0$EN_putA),
	       .EN_putB(pe_5_0$EN_putB),
	       .EN_reset_mod(pe_5_0$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_5_0$getA),
	       .RDY_getA(),
	       .getB(),
	       .RDY_getB(),
	       .getC(pe_5_0$getC),
	       .RDY_getC(),
	       .validAB(pe_5_0$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_5_1
  mk_pe pe_5_1(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_5_1$putA_in_a),
	       .putB_in_b(pe_5_1$putB_in_b),
	       .EN_putA(pe_5_1$EN_putA),
	       .EN_putB(pe_5_1$EN_putB),
	       .EN_reset_mod(pe_5_1$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_5_1$getA),
	       .RDY_getA(),
	       .getB(),
	       .RDY_getB(),
	       .getC(pe_5_1$getC),
	       .RDY_getC(),
	       .validAB(pe_5_1$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_5_2
  mk_pe pe_5_2(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_5_2$putA_in_a),
	       .putB_in_b(pe_5_2$putB_in_b),
	       .EN_putA(pe_5_2$EN_putA),
	       .EN_putB(pe_5_2$EN_putB),
	       .EN_reset_mod(pe_5_2$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_5_2$getA),
	       .RDY_getA(),
	       .getB(),
	       .RDY_getB(),
	       .getC(pe_5_2$getC),
	       .RDY_getC(),
	       .validAB(pe_5_2$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_5_3
  mk_pe pe_5_3(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_5_3$putA_in_a),
	       .putB_in_b(pe_5_3$putB_in_b),
	       .EN_putA(pe_5_3$EN_putA),
	       .EN_putB(pe_5_3$EN_putB),
	       .EN_reset_mod(pe_5_3$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_5_3$getA),
	       .RDY_getA(),
	       .getB(),
	       .RDY_getB(),
	       .getC(pe_5_3$getC),
	       .RDY_getC(),
	       .validAB(pe_5_3$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_5_4
  mk_pe pe_5_4(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_5_4$putA_in_a),
	       .putB_in_b(pe_5_4$putB_in_b),
	       .EN_putA(pe_5_4$EN_putA),
	       .EN_putB(pe_5_4$EN_putB),
	       .EN_reset_mod(pe_5_4$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_5_4$getA),
	       .RDY_getA(),
	       .getB(),
	       .RDY_getB(),
	       .getC(pe_5_4$getC),
	       .RDY_getC(),
	       .validAB(pe_5_4$validAB),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // submodule pe_5_5
  mk_pe pe_5_5(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_5_5$putA_in_a),
	       .putB_in_b(pe_5_5$putB_in_b),
	       .EN_putA(pe_5_5$EN_putA),
	       .EN_putB(pe_5_5$EN_putB),
	       .EN_reset_mod(pe_5_5$EN_reset_mod),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(),
	       .RDY_getA(),
	       .getB(),
	       .RDY_getB(),
	       .getC(pe_5_5$getC),
	       .RDY_getC(),
	       .validAB(),
	       .RDY_validAB(),
	       .RDY_reset_mod());

  // rule RL_inc_cntr
  assign WILL_FIRE_RL_inc_cntr = incr && !EN_feed_inp_stream ;

  // inputs to muxes for submodule ports
  assign MUX_incr$write_1__SEL_1 = WILL_FIRE_RL_inc_cntr && cntr == 32'd17 ;

  // register cntr
  assign cntr$D_IN = (cntr == 32'd17) ? 32'd0 : cntr + 32'd1 ;
  assign cntr$EN = incr && !EN_feed_inp_stream ;

  // register incr
  assign incr$D_IN = !MUX_incr$write_1__SEL_1 ;
  assign incr$EN =
	     WILL_FIRE_RL_inc_cntr && cntr == 32'd17 || EN_feed_inp_stream ;

  // submodule pe_0_0
  assign pe_0_0$putA_in_a =
	     EN_feed_inp_stream ? feed_inp_stream_a_stream[31:0] : 32'd0 ;
  assign pe_0_0$putB_in_b =
	     EN_feed_inp_stream ? feed_inp_stream_b_stream[31:0] : 32'd0 ;
  assign pe_0_0$EN_putA = 1'd1 ;
  assign pe_0_0$EN_putB = 1'd1 ;
  assign pe_0_0$EN_reset_mod = EN_reset_mod ;

  // submodule pe_0_1
  assign pe_0_1$putA_in_a = pe_0_0$getA ;
  assign pe_0_1$putB_in_b =
	     EN_feed_inp_stream ? feed_inp_stream_b_stream[63:32] : 32'd0 ;
  assign pe_0_1$EN_putA = 1'd1 ;
  assign pe_0_1$EN_putB = 1'd1 ;
  assign pe_0_1$EN_reset_mod = EN_reset_mod ;

  // submodule pe_0_2
  assign pe_0_2$putA_in_a = pe_0_1$getA ;
  assign pe_0_2$putB_in_b =
	     EN_feed_inp_stream ? feed_inp_stream_b_stream[95:64] : 32'd0 ;
  assign pe_0_2$EN_putA = 1'd1 ;
  assign pe_0_2$EN_putB = 1'd1 ;
  assign pe_0_2$EN_reset_mod = EN_reset_mod ;

  // submodule pe_0_3
  assign pe_0_3$putA_in_a = pe_0_2$getA ;
  assign pe_0_3$putB_in_b =
	     EN_feed_inp_stream ? feed_inp_stream_b_stream[127:96] : 32'd0 ;
  assign pe_0_3$EN_putA = 1'd1 ;
  assign pe_0_3$EN_putB = 1'd1 ;
  assign pe_0_3$EN_reset_mod = EN_reset_mod ;

  // submodule pe_0_4
  assign pe_0_4$putA_in_a = pe_0_3$getA ;
  assign pe_0_4$putB_in_b =
	     EN_feed_inp_stream ? feed_inp_stream_b_stream[159:128] : 32'd0 ;
  assign pe_0_4$EN_putA = 1'd1 ;
  assign pe_0_4$EN_putB = 1'd1 ;
  assign pe_0_4$EN_reset_mod = EN_reset_mod ;

  // submodule pe_0_5
  assign pe_0_5$putA_in_a = pe_0_4$getA ;
  assign pe_0_5$putB_in_b =
	     EN_feed_inp_stream ? feed_inp_stream_b_stream[191:160] : 32'd0 ;
  assign pe_0_5$EN_putA = 1'd1 ;
  assign pe_0_5$EN_putB = 1'd1 ;
  assign pe_0_5$EN_reset_mod = EN_reset_mod ;

  // submodule pe_1_0
  assign pe_1_0$putA_in_a =
	     EN_feed_inp_stream ? feed_inp_stream_a_stream[63:32] : 32'd0 ;
  assign pe_1_0$putB_in_b = pe_0_0$getB ;
  assign pe_1_0$EN_putA = 1'd1 ;
  assign pe_1_0$EN_putB = 1'd1 ;
  assign pe_1_0$EN_reset_mod = EN_reset_mod ;

  // submodule pe_1_1
  assign pe_1_1$putA_in_a =
	     (pe_1_0$validAB && pe_0_1$validAB) ? pe_1_0$getA : 32'd0 ;
  assign pe_1_1$putB_in_b =
	     (pe_1_0$validAB && pe_0_1$validAB) ? pe_0_1$getB : 32'd0 ;
  assign pe_1_1$EN_putA = 1'd1 ;
  assign pe_1_1$EN_putB = 1'd1 ;
  assign pe_1_1$EN_reset_mod = EN_reset_mod ;

  // submodule pe_1_2
  assign pe_1_2$putA_in_a =
	     (pe_1_1$validAB && pe_0_2$validAB) ? pe_1_1$getA : 32'd0 ;
  assign pe_1_2$putB_in_b =
	     (pe_1_1$validAB && pe_0_2$validAB) ? pe_0_2$getB : 32'd0 ;
  assign pe_1_2$EN_putA = 1'd1 ;
  assign pe_1_2$EN_putB = 1'd1 ;
  assign pe_1_2$EN_reset_mod = EN_reset_mod ;

  // submodule pe_1_3
  assign pe_1_3$putA_in_a =
	     (pe_1_2$validAB && pe_0_3$validAB) ? pe_1_2$getA : 32'd0 ;
  assign pe_1_3$putB_in_b =
	     (pe_1_2$validAB && pe_0_3$validAB) ? pe_0_3$getB : 32'd0 ;
  assign pe_1_3$EN_putA = 1'd1 ;
  assign pe_1_3$EN_putB = 1'd1 ;
  assign pe_1_3$EN_reset_mod = EN_reset_mod ;

  // submodule pe_1_4
  assign pe_1_4$putA_in_a =
	     (pe_1_3$validAB && pe_0_4$validAB) ? pe_1_3$getA : 32'd0 ;
  assign pe_1_4$putB_in_b =
	     (pe_1_3$validAB && pe_0_4$validAB) ? pe_0_4$getB : 32'd0 ;
  assign pe_1_4$EN_putA = 1'd1 ;
  assign pe_1_4$EN_putB = 1'd1 ;
  assign pe_1_4$EN_reset_mod = EN_reset_mod ;

  // submodule pe_1_5
  assign pe_1_5$putA_in_a =
	     (pe_1_4$validAB && pe_0_5$validAB) ? pe_1_4$getA : 32'd0 ;
  assign pe_1_5$putB_in_b =
	     (pe_1_4$validAB && pe_0_5$validAB) ? pe_0_5$getB : 32'd0 ;
  assign pe_1_5$EN_putA = 1'd1 ;
  assign pe_1_5$EN_putB = 1'd1 ;
  assign pe_1_5$EN_reset_mod = EN_reset_mod ;

  // submodule pe_2_0
  assign pe_2_0$putA_in_a =
	     EN_feed_inp_stream ? feed_inp_stream_a_stream[95:64] : 32'd0 ;
  assign pe_2_0$putB_in_b = pe_1_0$getB ;
  assign pe_2_0$EN_putA = 1'd1 ;
  assign pe_2_0$EN_putB = 1'd1 ;
  assign pe_2_0$EN_reset_mod = EN_reset_mod ;

  // submodule pe_2_1
  assign pe_2_1$putA_in_a =
	     (pe_2_0$validAB && pe_1_1$validAB) ? pe_2_0$getA : 32'd0 ;
  assign pe_2_1$putB_in_b =
	     (pe_2_0$validAB && pe_1_1$validAB) ? pe_1_1$getB : 32'd0 ;
  assign pe_2_1$EN_putA = 1'd1 ;
  assign pe_2_1$EN_putB = 1'd1 ;
  assign pe_2_1$EN_reset_mod = EN_reset_mod ;

  // submodule pe_2_2
  assign pe_2_2$putA_in_a =
	     (pe_2_1$validAB && pe_1_2$validAB) ? pe_2_1$getA : 32'd0 ;
  assign pe_2_2$putB_in_b =
	     (pe_2_1$validAB && pe_1_2$validAB) ? pe_1_2$getB : 32'd0 ;
  assign pe_2_2$EN_putA = 1'd1 ;
  assign pe_2_2$EN_putB = 1'd1 ;
  assign pe_2_2$EN_reset_mod = EN_reset_mod ;

  // submodule pe_2_3
  assign pe_2_3$putA_in_a =
	     (pe_2_2$validAB && pe_1_3$validAB) ? pe_2_2$getA : 32'd0 ;
  assign pe_2_3$putB_in_b =
	     (pe_2_2$validAB && pe_1_3$validAB) ? pe_1_3$getB : 32'd0 ;
  assign pe_2_3$EN_putA = 1'd1 ;
  assign pe_2_3$EN_putB = 1'd1 ;
  assign pe_2_3$EN_reset_mod = EN_reset_mod ;

  // submodule pe_2_4
  assign pe_2_4$putA_in_a =
	     (pe_2_3$validAB && pe_1_4$validAB) ? pe_2_3$getA : 32'd0 ;
  assign pe_2_4$putB_in_b =
	     (pe_2_3$validAB && pe_1_4$validAB) ? pe_1_4$getB : 32'd0 ;
  assign pe_2_4$EN_putA = 1'd1 ;
  assign pe_2_4$EN_putB = 1'd1 ;
  assign pe_2_4$EN_reset_mod = EN_reset_mod ;

  // submodule pe_2_5
  assign pe_2_5$putA_in_a =
	     (pe_2_4$validAB && pe_1_5$validAB) ? pe_2_4$getA : 32'd0 ;
  assign pe_2_5$putB_in_b =
	     (pe_2_4$validAB && pe_1_5$validAB) ? pe_1_5$getB : 32'd0 ;
  assign pe_2_5$EN_putA = 1'd1 ;
  assign pe_2_5$EN_putB = 1'd1 ;
  assign pe_2_5$EN_reset_mod = EN_reset_mod ;

  // submodule pe_3_0
  assign pe_3_0$putA_in_a =
	     EN_feed_inp_stream ? feed_inp_stream_a_stream[127:96] : 32'd0 ;
  assign pe_3_0$putB_in_b = pe_2_0$getB ;
  assign pe_3_0$EN_putA = 1'd1 ;
  assign pe_3_0$EN_putB = 1'd1 ;
  assign pe_3_0$EN_reset_mod = EN_reset_mod ;

  // submodule pe_3_1
  assign pe_3_1$putA_in_a =
	     (pe_3_0$validAB && pe_2_1$validAB) ? pe_3_0$getA : 32'd0 ;
  assign pe_3_1$putB_in_b =
	     (pe_3_0$validAB && pe_2_1$validAB) ? pe_2_1$getB : 32'd0 ;
  assign pe_3_1$EN_putA = 1'd1 ;
  assign pe_3_1$EN_putB = 1'd1 ;
  assign pe_3_1$EN_reset_mod = EN_reset_mod ;

  // submodule pe_3_2
  assign pe_3_2$putA_in_a =
	     (pe_3_1$validAB && pe_2_2$validAB) ? pe_3_1$getA : 32'd0 ;
  assign pe_3_2$putB_in_b =
	     (pe_3_1$validAB && pe_2_2$validAB) ? pe_2_2$getB : 32'd0 ;
  assign pe_3_2$EN_putA = 1'd1 ;
  assign pe_3_2$EN_putB = 1'd1 ;
  assign pe_3_2$EN_reset_mod = EN_reset_mod ;

  // submodule pe_3_3
  assign pe_3_3$putA_in_a =
	     (pe_3_2$validAB && pe_2_3$validAB) ? pe_3_2$getA : 32'd0 ;
  assign pe_3_3$putB_in_b =
	     (pe_3_2$validAB && pe_2_3$validAB) ? pe_2_3$getB : 32'd0 ;
  assign pe_3_3$EN_putA = 1'd1 ;
  assign pe_3_3$EN_putB = 1'd1 ;
  assign pe_3_3$EN_reset_mod = EN_reset_mod ;

  // submodule pe_3_4
  assign pe_3_4$putA_in_a =
	     (pe_3_3$validAB && pe_2_4$validAB) ? pe_3_3$getA : 32'd0 ;
  assign pe_3_4$putB_in_b =
	     (pe_3_3$validAB && pe_2_4$validAB) ? pe_2_4$getB : 32'd0 ;
  assign pe_3_4$EN_putA = 1'd1 ;
  assign pe_3_4$EN_putB = 1'd1 ;
  assign pe_3_4$EN_reset_mod = EN_reset_mod ;

  // submodule pe_3_5
  assign pe_3_5$putA_in_a =
	     (pe_3_4$validAB && pe_2_5$validAB) ? pe_3_4$getA : 32'd0 ;
  assign pe_3_5$putB_in_b =
	     (pe_3_4$validAB && pe_2_5$validAB) ? pe_2_5$getB : 32'd0 ;
  assign pe_3_5$EN_putA = 1'd1 ;
  assign pe_3_5$EN_putB = 1'd1 ;
  assign pe_3_5$EN_reset_mod = EN_reset_mod ;

  // submodule pe_4_0
  assign pe_4_0$putA_in_a =
	     EN_feed_inp_stream ? feed_inp_stream_a_stream[159:128] : 32'd0 ;
  assign pe_4_0$putB_in_b = pe_3_0$getB ;
  assign pe_4_0$EN_putA = 1'd1 ;
  assign pe_4_0$EN_putB = 1'd1 ;
  assign pe_4_0$EN_reset_mod = EN_reset_mod ;

  // submodule pe_4_1
  assign pe_4_1$putA_in_a =
	     (pe_4_0$validAB && pe_3_1$validAB) ? pe_4_0$getA : 32'd0 ;
  assign pe_4_1$putB_in_b =
	     (pe_4_0$validAB && pe_3_1$validAB) ? pe_3_1$getB : 32'd0 ;
  assign pe_4_1$EN_putA = 1'd1 ;
  assign pe_4_1$EN_putB = 1'd1 ;
  assign pe_4_1$EN_reset_mod = EN_reset_mod ;

  // submodule pe_4_2
  assign pe_4_2$putA_in_a =
	     (pe_4_1$validAB && pe_3_2$validAB) ? pe_4_1$getA : 32'd0 ;
  assign pe_4_2$putB_in_b =
	     (pe_4_1$validAB && pe_3_2$validAB) ? pe_3_2$getB : 32'd0 ;
  assign pe_4_2$EN_putA = 1'd1 ;
  assign pe_4_2$EN_putB = 1'd1 ;
  assign pe_4_2$EN_reset_mod = EN_reset_mod ;

  // submodule pe_4_3
  assign pe_4_3$putA_in_a =
	     (pe_4_2$validAB && pe_3_3$validAB) ? pe_4_2$getA : 32'd0 ;
  assign pe_4_3$putB_in_b =
	     (pe_4_2$validAB && pe_3_3$validAB) ? pe_3_3$getB : 32'd0 ;
  assign pe_4_3$EN_putA = 1'd1 ;
  assign pe_4_3$EN_putB = 1'd1 ;
  assign pe_4_3$EN_reset_mod = EN_reset_mod ;

  // submodule pe_4_4
  assign pe_4_4$putA_in_a =
	     (pe_4_3$validAB && pe_3_4$validAB) ? pe_4_3$getA : 32'd0 ;
  assign pe_4_4$putB_in_b =
	     (pe_4_3$validAB && pe_3_4$validAB) ? pe_3_4$getB : 32'd0 ;
  assign pe_4_4$EN_putA = 1'd1 ;
  assign pe_4_4$EN_putB = 1'd1 ;
  assign pe_4_4$EN_reset_mod = EN_reset_mod ;

  // submodule pe_4_5
  assign pe_4_5$putA_in_a =
	     (pe_4_4$validAB && pe_3_5$validAB) ? pe_4_4$getA : 32'd0 ;
  assign pe_4_5$putB_in_b =
	     (pe_4_4$validAB && pe_3_5$validAB) ? pe_3_5$getB : 32'd0 ;
  assign pe_4_5$EN_putA = 1'd1 ;
  assign pe_4_5$EN_putB = 1'd1 ;
  assign pe_4_5$EN_reset_mod = EN_reset_mod ;

  // submodule pe_5_0
  assign pe_5_0$putA_in_a =
	     EN_feed_inp_stream ? feed_inp_stream_a_stream[191:160] : 32'd0 ;
  assign pe_5_0$putB_in_b = pe_4_0$getB ;
  assign pe_5_0$EN_putA = 1'd1 ;
  assign pe_5_0$EN_putB = 1'd1 ;
  assign pe_5_0$EN_reset_mod = EN_reset_mod ;

  // submodule pe_5_1
  assign pe_5_1$putA_in_a =
	     (pe_5_0$validAB && pe_4_1$validAB) ? pe_5_0$getA : 32'd0 ;
  assign pe_5_1$putB_in_b =
	     (pe_5_0$validAB && pe_4_1$validAB) ? pe_4_1$getB : 32'd0 ;
  assign pe_5_1$EN_putA = 1'd1 ;
  assign pe_5_1$EN_putB = 1'd1 ;
  assign pe_5_1$EN_reset_mod = EN_reset_mod ;

  // submodule pe_5_2
  assign pe_5_2$putA_in_a =
	     (pe_5_1$validAB && pe_4_2$validAB) ? pe_5_1$getA : 32'd0 ;
  assign pe_5_2$putB_in_b =
	     (pe_5_1$validAB && pe_4_2$validAB) ? pe_4_2$getB : 32'd0 ;
  assign pe_5_2$EN_putA = 1'd1 ;
  assign pe_5_2$EN_putB = 1'd1 ;
  assign pe_5_2$EN_reset_mod = EN_reset_mod ;

  // submodule pe_5_3
  assign pe_5_3$putA_in_a =
	     (pe_5_2$validAB && pe_4_3$validAB) ? pe_5_2$getA : 32'd0 ;
  assign pe_5_3$putB_in_b =
	     (pe_5_2$validAB && pe_4_3$validAB) ? pe_4_3$getB : 32'd0 ;
  assign pe_5_3$EN_putA = 1'd1 ;
  assign pe_5_3$EN_putB = 1'd1 ;
  assign pe_5_3$EN_reset_mod = EN_reset_mod ;

  // submodule pe_5_4
  assign pe_5_4$putA_in_a =
	     (pe_5_3$validAB && pe_4_4$validAB) ? pe_5_3$getA : 32'd0 ;
  assign pe_5_4$putB_in_b =
	     (pe_5_3$validAB && pe_4_4$validAB) ? pe_4_4$getB : 32'd0 ;
  assign pe_5_4$EN_putA = 1'd1 ;
  assign pe_5_4$EN_putB = 1'd1 ;
  assign pe_5_4$EN_reset_mod = EN_reset_mod ;

  // submodule pe_5_5
  assign pe_5_5$putA_in_a =
	     (pe_5_4$validAB && pe_4_5$validAB) ? pe_5_4$getA : 32'd0 ;
  assign pe_5_5$putB_in_b =
	     (pe_5_4$validAB && pe_4_5$validAB) ? pe_4_5$getB : 32'd0 ;
  assign pe_5_5$EN_putA = 1'd1 ;
  assign pe_5_5$EN_putB = 1'd1 ;
  assign pe_5_5$EN_reset_mod = EN_reset_mod ;

  // remaining internal signals
  assign IF_cntr_30_MINUS_5_48_MINUS_6_49_MINUS_1_50_SL_ETC___d304 =
	     { ((cntr_30_MINUS_5_48_MINUS_6_49_MINUS_1___d250 ^
		 32'h80000000) <
		32'h80000006) ?
		 { SEL_ARR_pe_5_0_getC__52_BITS_31_TO_16_53_pe_5__ETC___d265,
		   SEL_ARR_pe_5_0_getC__52_BITS_15_TO_0_66_pe_5_1_ETC___d273 } :
		 32'd0,
	       ((cntr_30_MINUS_4_76_MINUS_6_77_MINUS_1___d278 ^
		 32'h80000000) <
		32'h80000006) ?
		 { SEL_ARR_pe_4_0_getC__80_BITS_31_TO_16_81_pe_4__ETC___d293,
		   SEL_ARR_pe_4_0_getC__80_BITS_15_TO_0_94_pe_4_1_ETC___d301 } :
		 32'd0 } ;
  assign IF_cntr_30_MINUS_5_48_MINUS_6_49_MINUS_1_50_SL_ETC___d361 =
	     { IF_cntr_30_MINUS_5_48_MINUS_6_49_MINUS_1_50_SL_ETC___d304,
	       ((cntr_30_MINUS_3_05_MINUS_6_06_MINUS_1___d307 ^
		 32'h80000000) <
		32'h80000006) ?
		 { SEL_ARR_pe_3_0_getC__09_BITS_31_TO_16_10_pe_3__ETC___d322,
		   SEL_ARR_pe_3_0_getC__09_BITS_15_TO_0_23_pe_3_1_ETC___d330 } :
		 32'd0,
	       ((cntr_30_MINUS_2_33_MINUS_6_34_MINUS_1___d335 ^
		 32'h80000000) <
		32'h80000006) ?
		 { SEL_ARR_pe_2_0_getC__37_BITS_31_TO_16_38_pe_2__ETC___d350,
		   SEL_ARR_pe_2_0_getC__37_BITS_15_TO_0_51_pe_2_1_ETC___d358 } :
		 32'd0 } ;
  assign cntr_30_MINUS_1_62_MINUS_6_63_MINUS_1___d364 =
	     ((cntr - 32'd1) - 32'd6) - 32'd1 ;
  assign cntr_30_MINUS_2_33_MINUS_6_34_MINUS_1___d335 =
	     ((cntr - 32'd2) - 32'd6) - 32'd1 ;
  assign cntr_30_MINUS_3_05_MINUS_6_06_MINUS_1___d307 =
	     ((cntr - 32'd3) - 32'd6) - 32'd1 ;
  assign cntr_30_MINUS_4_76_MINUS_6_77_MINUS_1___d278 =
	     ((cntr - 32'd4) - 32'd6) - 32'd1 ;
  assign cntr_30_MINUS_5_48_MINUS_6_49_MINUS_1___d250 =
	     ((cntr - 32'd5) - 32'd6) - 32'd1 ;
  assign x__h29990 = (cntr - 32'd6) - 32'd1 ;
  always@(cntr_30_MINUS_4_76_MINUS_6_77_MINUS_1___d278 or
	  pe_4_0$getC or
	  pe_4_1$getC or
	  pe_4_2$getC or pe_4_3$getC or pe_4_4$getC or pe_4_5$getC)
  begin
    case (cntr_30_MINUS_4_76_MINUS_6_77_MINUS_1___d278)
      32'd0:
	  SEL_ARR_pe_4_0_getC__80_BITS_31_TO_16_81_pe_4__ETC___d293 =
	      pe_4_0$getC[31:16];
      32'd1:
	  SEL_ARR_pe_4_0_getC__80_BITS_31_TO_16_81_pe_4__ETC___d293 =
	      pe_4_1$getC[31:16];
      32'd2:
	  SEL_ARR_pe_4_0_getC__80_BITS_31_TO_16_81_pe_4__ETC___d293 =
	      pe_4_2$getC[31:16];
      32'd3:
	  SEL_ARR_pe_4_0_getC__80_BITS_31_TO_16_81_pe_4__ETC___d293 =
	      pe_4_3$getC[31:16];
      32'd4:
	  SEL_ARR_pe_4_0_getC__80_BITS_31_TO_16_81_pe_4__ETC___d293 =
	      pe_4_4$getC[31:16];
      32'd5:
	  SEL_ARR_pe_4_0_getC__80_BITS_31_TO_16_81_pe_4__ETC___d293 =
	      pe_4_5$getC[31:16];
      default: SEL_ARR_pe_4_0_getC__80_BITS_31_TO_16_81_pe_4__ETC___d293 =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(cntr_30_MINUS_5_48_MINUS_6_49_MINUS_1___d250 or
	  pe_5_0$getC or
	  pe_5_1$getC or
	  pe_5_2$getC or pe_5_3$getC or pe_5_4$getC or pe_5_5$getC)
  begin
    case (cntr_30_MINUS_5_48_MINUS_6_49_MINUS_1___d250)
      32'd0:
	  SEL_ARR_pe_5_0_getC__52_BITS_31_TO_16_53_pe_5__ETC___d265 =
	      pe_5_0$getC[31:16];
      32'd1:
	  SEL_ARR_pe_5_0_getC__52_BITS_31_TO_16_53_pe_5__ETC___d265 =
	      pe_5_1$getC[31:16];
      32'd2:
	  SEL_ARR_pe_5_0_getC__52_BITS_31_TO_16_53_pe_5__ETC___d265 =
	      pe_5_2$getC[31:16];
      32'd3:
	  SEL_ARR_pe_5_0_getC__52_BITS_31_TO_16_53_pe_5__ETC___d265 =
	      pe_5_3$getC[31:16];
      32'd4:
	  SEL_ARR_pe_5_0_getC__52_BITS_31_TO_16_53_pe_5__ETC___d265 =
	      pe_5_4$getC[31:16];
      32'd5:
	  SEL_ARR_pe_5_0_getC__52_BITS_31_TO_16_53_pe_5__ETC___d265 =
	      pe_5_5$getC[31:16];
      default: SEL_ARR_pe_5_0_getC__52_BITS_31_TO_16_53_pe_5__ETC___d265 =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(cntr_30_MINUS_3_05_MINUS_6_06_MINUS_1___d307 or
	  pe_3_0$getC or
	  pe_3_1$getC or
	  pe_3_2$getC or pe_3_3$getC or pe_3_4$getC or pe_3_5$getC)
  begin
    case (cntr_30_MINUS_3_05_MINUS_6_06_MINUS_1___d307)
      32'd0:
	  SEL_ARR_pe_3_0_getC__09_BITS_31_TO_16_10_pe_3__ETC___d322 =
	      pe_3_0$getC[31:16];
      32'd1:
	  SEL_ARR_pe_3_0_getC__09_BITS_31_TO_16_10_pe_3__ETC___d322 =
	      pe_3_1$getC[31:16];
      32'd2:
	  SEL_ARR_pe_3_0_getC__09_BITS_31_TO_16_10_pe_3__ETC___d322 =
	      pe_3_2$getC[31:16];
      32'd3:
	  SEL_ARR_pe_3_0_getC__09_BITS_31_TO_16_10_pe_3__ETC___d322 =
	      pe_3_3$getC[31:16];
      32'd4:
	  SEL_ARR_pe_3_0_getC__09_BITS_31_TO_16_10_pe_3__ETC___d322 =
	      pe_3_4$getC[31:16];
      32'd5:
	  SEL_ARR_pe_3_0_getC__09_BITS_31_TO_16_10_pe_3__ETC___d322 =
	      pe_3_5$getC[31:16];
      default: SEL_ARR_pe_3_0_getC__09_BITS_31_TO_16_10_pe_3__ETC___d322 =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(cntr_30_MINUS_2_33_MINUS_6_34_MINUS_1___d335 or
	  pe_2_0$getC or
	  pe_2_1$getC or
	  pe_2_2$getC or pe_2_3$getC or pe_2_4$getC or pe_2_5$getC)
  begin
    case (cntr_30_MINUS_2_33_MINUS_6_34_MINUS_1___d335)
      32'd0:
	  SEL_ARR_pe_2_0_getC__37_BITS_31_TO_16_38_pe_2__ETC___d350 =
	      pe_2_0$getC[31:16];
      32'd1:
	  SEL_ARR_pe_2_0_getC__37_BITS_31_TO_16_38_pe_2__ETC___d350 =
	      pe_2_1$getC[31:16];
      32'd2:
	  SEL_ARR_pe_2_0_getC__37_BITS_31_TO_16_38_pe_2__ETC___d350 =
	      pe_2_2$getC[31:16];
      32'd3:
	  SEL_ARR_pe_2_0_getC__37_BITS_31_TO_16_38_pe_2__ETC___d350 =
	      pe_2_3$getC[31:16];
      32'd4:
	  SEL_ARR_pe_2_0_getC__37_BITS_31_TO_16_38_pe_2__ETC___d350 =
	      pe_2_4$getC[31:16];
      32'd5:
	  SEL_ARR_pe_2_0_getC__37_BITS_31_TO_16_38_pe_2__ETC___d350 =
	      pe_2_5$getC[31:16];
      default: SEL_ARR_pe_2_0_getC__37_BITS_31_TO_16_38_pe_2__ETC___d350 =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(cntr_30_MINUS_1_62_MINUS_6_63_MINUS_1___d364 or
	  pe_1_0$getC or
	  pe_1_1$getC or
	  pe_1_2$getC or pe_1_3$getC or pe_1_4$getC or pe_1_5$getC)
  begin
    case (cntr_30_MINUS_1_62_MINUS_6_63_MINUS_1___d364)
      32'd0:
	  SEL_ARR_pe_1_0_getC__66_BITS_31_TO_16_67_pe_1__ETC___d379 =
	      pe_1_0$getC[31:16];
      32'd1:
	  SEL_ARR_pe_1_0_getC__66_BITS_31_TO_16_67_pe_1__ETC___d379 =
	      pe_1_1$getC[31:16];
      32'd2:
	  SEL_ARR_pe_1_0_getC__66_BITS_31_TO_16_67_pe_1__ETC___d379 =
	      pe_1_2$getC[31:16];
      32'd3:
	  SEL_ARR_pe_1_0_getC__66_BITS_31_TO_16_67_pe_1__ETC___d379 =
	      pe_1_3$getC[31:16];
      32'd4:
	  SEL_ARR_pe_1_0_getC__66_BITS_31_TO_16_67_pe_1__ETC___d379 =
	      pe_1_4$getC[31:16];
      32'd5:
	  SEL_ARR_pe_1_0_getC__66_BITS_31_TO_16_67_pe_1__ETC___d379 =
	      pe_1_5$getC[31:16];
      default: SEL_ARR_pe_1_0_getC__66_BITS_31_TO_16_67_pe_1__ETC___d379 =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(x__h29990 or
	  pe_0_0$getC or
	  pe_0_1$getC or
	  pe_0_2$getC or pe_0_3$getC or pe_0_4$getC or pe_0_5$getC)
  begin
    case (x__h29990)
      32'd0:
	  SEL_ARR_pe_0_0_getC__93_BITS_31_TO_16_94_pe_0__ETC___d406 =
	      pe_0_0$getC[31:16];
      32'd1:
	  SEL_ARR_pe_0_0_getC__93_BITS_31_TO_16_94_pe_0__ETC___d406 =
	      pe_0_1$getC[31:16];
      32'd2:
	  SEL_ARR_pe_0_0_getC__93_BITS_31_TO_16_94_pe_0__ETC___d406 =
	      pe_0_2$getC[31:16];
      32'd3:
	  SEL_ARR_pe_0_0_getC__93_BITS_31_TO_16_94_pe_0__ETC___d406 =
	      pe_0_3$getC[31:16];
      32'd4:
	  SEL_ARR_pe_0_0_getC__93_BITS_31_TO_16_94_pe_0__ETC___d406 =
	      pe_0_4$getC[31:16];
      32'd5:
	  SEL_ARR_pe_0_0_getC__93_BITS_31_TO_16_94_pe_0__ETC___d406 =
	      pe_0_5$getC[31:16];
      default: SEL_ARR_pe_0_0_getC__93_BITS_31_TO_16_94_pe_0__ETC___d406 =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(cntr_30_MINUS_4_76_MINUS_6_77_MINUS_1___d278 or
	  pe_4_0$getC or
	  pe_4_1$getC or
	  pe_4_2$getC or pe_4_3$getC or pe_4_4$getC or pe_4_5$getC)
  begin
    case (cntr_30_MINUS_4_76_MINUS_6_77_MINUS_1___d278)
      32'd0:
	  SEL_ARR_pe_4_0_getC__80_BITS_15_TO_0_94_pe_4_1_ETC___d301 =
	      pe_4_0$getC[15:0];
      32'd1:
	  SEL_ARR_pe_4_0_getC__80_BITS_15_TO_0_94_pe_4_1_ETC___d301 =
	      pe_4_1$getC[15:0];
      32'd2:
	  SEL_ARR_pe_4_0_getC__80_BITS_15_TO_0_94_pe_4_1_ETC___d301 =
	      pe_4_2$getC[15:0];
      32'd3:
	  SEL_ARR_pe_4_0_getC__80_BITS_15_TO_0_94_pe_4_1_ETC___d301 =
	      pe_4_3$getC[15:0];
      32'd4:
	  SEL_ARR_pe_4_0_getC__80_BITS_15_TO_0_94_pe_4_1_ETC___d301 =
	      pe_4_4$getC[15:0];
      32'd5:
	  SEL_ARR_pe_4_0_getC__80_BITS_15_TO_0_94_pe_4_1_ETC___d301 =
	      pe_4_5$getC[15:0];
      default: SEL_ARR_pe_4_0_getC__80_BITS_15_TO_0_94_pe_4_1_ETC___d301 =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(cntr_30_MINUS_5_48_MINUS_6_49_MINUS_1___d250 or
	  pe_5_0$getC or
	  pe_5_1$getC or
	  pe_5_2$getC or pe_5_3$getC or pe_5_4$getC or pe_5_5$getC)
  begin
    case (cntr_30_MINUS_5_48_MINUS_6_49_MINUS_1___d250)
      32'd0:
	  SEL_ARR_pe_5_0_getC__52_BITS_15_TO_0_66_pe_5_1_ETC___d273 =
	      pe_5_0$getC[15:0];
      32'd1:
	  SEL_ARR_pe_5_0_getC__52_BITS_15_TO_0_66_pe_5_1_ETC___d273 =
	      pe_5_1$getC[15:0];
      32'd2:
	  SEL_ARR_pe_5_0_getC__52_BITS_15_TO_0_66_pe_5_1_ETC___d273 =
	      pe_5_2$getC[15:0];
      32'd3:
	  SEL_ARR_pe_5_0_getC__52_BITS_15_TO_0_66_pe_5_1_ETC___d273 =
	      pe_5_3$getC[15:0];
      32'd4:
	  SEL_ARR_pe_5_0_getC__52_BITS_15_TO_0_66_pe_5_1_ETC___d273 =
	      pe_5_4$getC[15:0];
      32'd5:
	  SEL_ARR_pe_5_0_getC__52_BITS_15_TO_0_66_pe_5_1_ETC___d273 =
	      pe_5_5$getC[15:0];
      default: SEL_ARR_pe_5_0_getC__52_BITS_15_TO_0_66_pe_5_1_ETC___d273 =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(cntr_30_MINUS_2_33_MINUS_6_34_MINUS_1___d335 or
	  pe_2_0$getC or
	  pe_2_1$getC or
	  pe_2_2$getC or pe_2_3$getC or pe_2_4$getC or pe_2_5$getC)
  begin
    case (cntr_30_MINUS_2_33_MINUS_6_34_MINUS_1___d335)
      32'd0:
	  SEL_ARR_pe_2_0_getC__37_BITS_15_TO_0_51_pe_2_1_ETC___d358 =
	      pe_2_0$getC[15:0];
      32'd1:
	  SEL_ARR_pe_2_0_getC__37_BITS_15_TO_0_51_pe_2_1_ETC___d358 =
	      pe_2_1$getC[15:0];
      32'd2:
	  SEL_ARR_pe_2_0_getC__37_BITS_15_TO_0_51_pe_2_1_ETC___d358 =
	      pe_2_2$getC[15:0];
      32'd3:
	  SEL_ARR_pe_2_0_getC__37_BITS_15_TO_0_51_pe_2_1_ETC___d358 =
	      pe_2_3$getC[15:0];
      32'd4:
	  SEL_ARR_pe_2_0_getC__37_BITS_15_TO_0_51_pe_2_1_ETC___d358 =
	      pe_2_4$getC[15:0];
      32'd5:
	  SEL_ARR_pe_2_0_getC__37_BITS_15_TO_0_51_pe_2_1_ETC___d358 =
	      pe_2_5$getC[15:0];
      default: SEL_ARR_pe_2_0_getC__37_BITS_15_TO_0_51_pe_2_1_ETC___d358 =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(cntr_30_MINUS_3_05_MINUS_6_06_MINUS_1___d307 or
	  pe_3_0$getC or
	  pe_3_1$getC or
	  pe_3_2$getC or pe_3_3$getC or pe_3_4$getC or pe_3_5$getC)
  begin
    case (cntr_30_MINUS_3_05_MINUS_6_06_MINUS_1___d307)
      32'd0:
	  SEL_ARR_pe_3_0_getC__09_BITS_15_TO_0_23_pe_3_1_ETC___d330 =
	      pe_3_0$getC[15:0];
      32'd1:
	  SEL_ARR_pe_3_0_getC__09_BITS_15_TO_0_23_pe_3_1_ETC___d330 =
	      pe_3_1$getC[15:0];
      32'd2:
	  SEL_ARR_pe_3_0_getC__09_BITS_15_TO_0_23_pe_3_1_ETC___d330 =
	      pe_3_2$getC[15:0];
      32'd3:
	  SEL_ARR_pe_3_0_getC__09_BITS_15_TO_0_23_pe_3_1_ETC___d330 =
	      pe_3_3$getC[15:0];
      32'd4:
	  SEL_ARR_pe_3_0_getC__09_BITS_15_TO_0_23_pe_3_1_ETC___d330 =
	      pe_3_4$getC[15:0];
      32'd5:
	  SEL_ARR_pe_3_0_getC__09_BITS_15_TO_0_23_pe_3_1_ETC___d330 =
	      pe_3_5$getC[15:0];
      default: SEL_ARR_pe_3_0_getC__09_BITS_15_TO_0_23_pe_3_1_ETC___d330 =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(cntr_30_MINUS_1_62_MINUS_6_63_MINUS_1___d364 or
	  pe_1_0$getC or
	  pe_1_1$getC or
	  pe_1_2$getC or pe_1_3$getC or pe_1_4$getC or pe_1_5$getC)
  begin
    case (cntr_30_MINUS_1_62_MINUS_6_63_MINUS_1___d364)
      32'd0:
	  SEL_ARR_pe_1_0_getC__66_BITS_15_TO_0_80_pe_1_1_ETC___d387 =
	      pe_1_0$getC[15:0];
      32'd1:
	  SEL_ARR_pe_1_0_getC__66_BITS_15_TO_0_80_pe_1_1_ETC___d387 =
	      pe_1_1$getC[15:0];
      32'd2:
	  SEL_ARR_pe_1_0_getC__66_BITS_15_TO_0_80_pe_1_1_ETC___d387 =
	      pe_1_2$getC[15:0];
      32'd3:
	  SEL_ARR_pe_1_0_getC__66_BITS_15_TO_0_80_pe_1_1_ETC___d387 =
	      pe_1_3$getC[15:0];
      32'd4:
	  SEL_ARR_pe_1_0_getC__66_BITS_15_TO_0_80_pe_1_1_ETC___d387 =
	      pe_1_4$getC[15:0];
      32'd5:
	  SEL_ARR_pe_1_0_getC__66_BITS_15_TO_0_80_pe_1_1_ETC___d387 =
	      pe_1_5$getC[15:0];
      default: SEL_ARR_pe_1_0_getC__66_BITS_15_TO_0_80_pe_1_1_ETC___d387 =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(x__h29990 or
	  pe_0_0$getC or
	  pe_0_1$getC or
	  pe_0_2$getC or pe_0_3$getC or pe_0_4$getC or pe_0_5$getC)
  begin
    case (x__h29990)
      32'd0:
	  SEL_ARR_pe_0_0_getC__93_BITS_15_TO_0_07_pe_0_1_ETC___d414 =
	      pe_0_0$getC[15:0];
      32'd1:
	  SEL_ARR_pe_0_0_getC__93_BITS_15_TO_0_07_pe_0_1_ETC___d414 =
	      pe_0_1$getC[15:0];
      32'd2:
	  SEL_ARR_pe_0_0_getC__93_BITS_15_TO_0_07_pe_0_1_ETC___d414 =
	      pe_0_2$getC[15:0];
      32'd3:
	  SEL_ARR_pe_0_0_getC__93_BITS_15_TO_0_07_pe_0_1_ETC___d414 =
	      pe_0_3$getC[15:0];
      32'd4:
	  SEL_ARR_pe_0_0_getC__93_BITS_15_TO_0_07_pe_0_1_ETC___d414 =
	      pe_0_4$getC[15:0];
      32'd5:
	  SEL_ARR_pe_0_0_getC__93_BITS_15_TO_0_07_pe_0_1_ETC___d414 =
	      pe_0_5$getC[15:0];
      default: SEL_ARR_pe_0_0_getC__93_BITS_15_TO_0_07_pe_0_1_ETC___d414 =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cntr <= `BSV_ASSIGNMENT_DELAY 32'd0;
	incr <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cntr$EN) cntr <= `BSV_ASSIGNMENT_DELAY cntr$D_IN;
	if (incr$EN) incr <= `BSV_ASSIGNMENT_DELAY incr$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cntr = 32'hAAAAAAAA;
    incr = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_feed_inp_stream)
	begin
	  v__h26797 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_feed_inp_stream)
	$display(v__h26797, "\nfeed_inp %d\n", $signed(cntr));
  end
  // synopsys translate_on
endmodule  // mat_mult_systolic

