//
// Generated by Bluespec Compiler, version 2021.12.1-27-g9a7d5e05 (build 9a7d5e05)
//
// On Mon Apr 11 12:55:27 IST 2022
//
//
// Ports:
// Name                         I/O  size props
// RDY_put                        O     1 const
// getA                           O    32 reg
// RDY_getA                       O     1 const
// getB                           O    32 reg
// RDY_getB                       O     1 const
// getC                           O    32 reg
// RDY_getC                       O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// put_in_a                       I    32
// put_in_b                       I    32
// EN_put                         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module pe(CLK,
	  RST_N,

	  put_in_a,
	  put_in_b,
	  EN_put,
	  RDY_put,

	  getA,
	  RDY_getA,

	  getB,
	  RDY_getB,

	  getC,
	  RDY_getC);
  input  CLK;
  input  RST_N;

  // action method put
  input  [31 : 0] put_in_a;
  input  [31 : 0] put_in_b;
  input  EN_put;
  output RDY_put;

  // value method getA
  output [31 : 0] getA;
  output RDY_getA;

  // value method getB
  output [31 : 0] getB;
  output RDY_getB;

  // value method getC
  output [31 : 0] getC;
  output RDY_getC;

  // signals for module outputs
  wire [31 : 0] getA, getB, getC;
  wire RDY_getA, RDY_getB, RDY_getC, RDY_put;

  // register rg_out_a
  reg [31 : 0] rg_out_a;
  wire [31 : 0] rg_out_a$D_IN;
  wire rg_out_a$EN;

  // register rg_out_b
  reg [31 : 0] rg_out_b;
  wire [31 : 0] rg_out_b$D_IN;
  wire rg_out_b$EN;

  // register rg_out_c
  reg [31 : 0] rg_out_c;
  wire [31 : 0] rg_out_c$D_IN;
  wire rg_out_c$EN;

  // remaining internal signals
  wire [63 : 0] IF_wr_in_a_whas_THEN_wr_in_a_wget_ELSE_0_MUL_I_ETC___d7;
  wire [31 : 0] x__h366, y__h367;

  // action method put
  assign RDY_put = 1'd1 ;

  // value method getA
  assign getA = rg_out_a ;
  assign RDY_getA = 1'd1 ;

  // value method getB
  assign getB = rg_out_b ;
  assign RDY_getB = 1'd1 ;

  // value method getC
  assign getC = rg_out_c ;
  assign RDY_getC = 1'd1 ;

  // register rg_out_a
  assign rg_out_a$D_IN = x__h366 ;
  assign rg_out_a$EN = 1'd1 ;

  // register rg_out_b
  assign rg_out_b$D_IN = y__h367 ;
  assign rg_out_b$EN = 1'd1 ;

  // register rg_out_c
  assign rg_out_c$D_IN =
	     IF_wr_in_a_whas_THEN_wr_in_a_wget_ELSE_0_MUL_I_ETC___d7[31:0] +
	     rg_out_c ;
  assign rg_out_c$EN = 1'd1 ;

  // remaining internal signals
  assign IF_wr_in_a_whas_THEN_wr_in_a_wget_ELSE_0_MUL_I_ETC___d7 =
	     x__h366 * y__h367 ;
  assign x__h366 = EN_put ? put_in_a : 32'd0 ;
  assign y__h367 = EN_put ? put_in_b : 32'd0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_out_a <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_out_b <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_out_c <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (rg_out_a$EN) rg_out_a <= `BSV_ASSIGNMENT_DELAY rg_out_a$D_IN;
	if (rg_out_b$EN) rg_out_b <= `BSV_ASSIGNMENT_DELAY rg_out_b$D_IN;
	if (rg_out_c$EN) rg_out_c <= `BSV_ASSIGNMENT_DELAY rg_out_c$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_out_a = 32'hAAAAAAAA;
    rg_out_b = 32'hAAAAAAAA;
    rg_out_c = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // pe

