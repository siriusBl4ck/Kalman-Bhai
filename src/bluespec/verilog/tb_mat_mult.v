//
// Generated by Bluespec Compiler, version 2021.12.1-27-g9a7d5e05 (build 9a7d5e05)
//
// On Mon May  2 13:45:30 IST 2022
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module tb_mat_mult(CLK,
		   RST_N);
  input  CLK;
  input  RST_N;

  // register inp_Astream
  reg [95 : 0] inp_Astream;
  wire [95 : 0] inp_Astream$D_IN;
  wire inp_Astream$EN;

  // register inp_Bstream
  reg [95 : 0] inp_Bstream;
  wire [95 : 0] inp_Bstream$D_IN;
  wire inp_Bstream$EN;

  // register out_stream
  reg [287 : 0] out_stream;
  wire [287 : 0] out_stream$D_IN;
  wire out_stream$EN;

  // register rg_cntr
  reg [3 : 0] rg_cntr;
  wire [3 : 0] rg_cntr$D_IN;
  wire rg_cntr$EN;

  // ports of submodule myMult
  wire [287 : 0] myMult$get_out_stream;
  wire [95 : 0] myMult$feed_inp_stream_a_stream,
		myMult$feed_inp_stream_b_stream;
  wire myMult$EN_feed_inp_stream;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h407;
  // synopsys translate_on

  // remaining internal signals
  reg [15 : 0] _theResult___fst_i__h5016,
	       _theResult___snd_fst_i__h5177,
	       _theResult___snd_snd_fst_i__h5336,
	       _theResult___snd_snd_snd_fst_i__h5720,
	       _theResult___snd_snd_snd_snd_fst_i__h5807,
	       _theResult___snd_snd_snd_snd_snd_i__h5888;
  wire [97 : 0] _0_CONCAT_IF_SEXT_myMult_get_out_stream_BITS_12_ETC___d108,
		_0_CONCAT_IF_SEXT_myMult_get_out_stream_BITS_15_ETC___d133,
		_0_CONCAT_IF_SEXT_myMult_get_out_stream_BITS_19_ETC___d158,
		_0_CONCAT_IF_SEXT_myMult_get_out_stream_BITS_22_ETC___d183,
		_0_CONCAT_IF_SEXT_myMult_get_out_stream_BITS_25_ETC___d208,
		_0_CONCAT_IF_SEXT_myMult_get_out_stream_BITS_28_ETC___d233,
		_0_CONCAT_IF_SEXT_myMult_get_out_stream_BITS_31_ETC___d33,
		_0_CONCAT_IF_SEXT_myMult_get_out_stream_BITS_63_ETC___d58,
		_0_CONCAT_IF_SEXT_myMult_get_out_stream_BITS_95_ETC___d83;
  wire [48 : 0] digit__h1354,
		digit__h1754,
		digit__h2295,
		digit__h2695,
		digit__h3095,
		digit__h3636,
		digit__h4056,
		digit__h4476,
		digit__h954;
  wire [16 : 0] SEXT_myMult_get_out_stream_BITS_127_TO_112_6___d87,
		SEXT_myMult_get_out_stream_BITS_159_TO_144_11___d112,
		SEXT_myMult_get_out_stream_BITS_191_TO_176_36___d137,
		SEXT_myMult_get_out_stream_BITS_223_TO_208_61___d162,
		SEXT_myMult_get_out_stream_BITS_255_TO_240_86___d187,
		SEXT_myMult_get_out_stream_BITS_287_TO_272_11___d212,
		SEXT_myMult_get_out_stream_BITS_31_TO_16_1___d12,
		SEXT_myMult_get_out_stream_BITS_63_TO_48_6___d37,
		SEXT_myMult_get_out_stream_BITS_95_TO_80_1___d62;
  wire [15 : 0] myMultget_out_stream_BITS_127_TO_112__q4,
		myMultget_out_stream_BITS_159_TO_144__q5,
		myMultget_out_stream_BITS_191_TO_176__q6,
		myMultget_out_stream_BITS_223_TO_208__q7,
		myMultget_out_stream_BITS_255_TO_240__q8,
		myMultget_out_stream_BITS_287_TO_272__q9,
		myMultget_out_stream_BITS_31_TO_16__q1,
		myMultget_out_stream_BITS_63_TO_48__q2,
		myMultget_out_stream_BITS_95_TO_80__q3,
		x__h1384,
		x__h1784,
		x__h2325,
		x__h2725,
		x__h3125,
		x__h3666,
		x__h4086,
		x__h4506,
		x__h984,
		y_avValue_snd__h1318,
		y_avValue_snd__h1718,
		y_avValue_snd__h2259,
		y_avValue_snd__h2659,
		y_avValue_snd__h3059,
		y_avValue_snd__h3600,
		y_avValue_snd__h4020,
		y_avValue_snd__h4440,
		y_avValue_snd__h918;

  // submodule myMult
  mat_mult_systolic myMult(.CLK(CLK),
			   .RST_N(RST_N),
			   .feed_inp_stream_a_stream(myMult$feed_inp_stream_a_stream),
			   .feed_inp_stream_b_stream(myMult$feed_inp_stream_b_stream),
			   .EN_feed_inp_stream(myMult$EN_feed_inp_stream),
			   .RDY_feed_inp_stream(),
			   .get_out_stream(myMult$get_out_stream),
			   .RDY_get_out_stream());

  // register inp_Astream
  assign inp_Astream$D_IN =
	     { _theResult___fst_i__h5016,
	       16'd0,
	       _theResult___snd_fst_i__h5177,
	       16'd0,
	       _theResult___snd_snd_fst_i__h5336,
	       16'd0 } ;
  assign inp_Astream$EN = 1'd1 ;

  // register inp_Bstream
  assign inp_Bstream$D_IN =
	     { _theResult___snd_snd_snd_fst_i__h5720,
	       16'd0,
	       _theResult___snd_snd_snd_snd_fst_i__h5807,
	       16'd0,
	       _theResult___snd_snd_snd_snd_snd_i__h5888,
	       16'd0 } ;
  assign inp_Bstream$EN = 1'd1 ;

  // register out_stream
  assign out_stream$D_IN = myMult$get_out_stream ;
  assign out_stream$EN = rg_cntr != 4'd0 ;

  // register rg_cntr
  assign rg_cntr$D_IN = rg_cntr + 4'd1 ;
  assign rg_cntr$EN = 1'd1 ;

  // submodule myMult
  assign myMult$feed_inp_stream_a_stream = inp_Astream ;
  assign myMult$feed_inp_stream_b_stream = inp_Bstream ;
  assign myMult$EN_feed_inp_stream = rg_cntr != 4'd0 && rg_cntr <= 4'd4 ;

  // remaining internal signals
  assign SEXT_myMult_get_out_stream_BITS_127_TO_112_6___d87 =
	     { myMultget_out_stream_BITS_127_TO_112__q4[15],
	       myMultget_out_stream_BITS_127_TO_112__q4 } ;
  assign SEXT_myMult_get_out_stream_BITS_159_TO_144_11___d112 =
	     { myMultget_out_stream_BITS_159_TO_144__q5[15],
	       myMultget_out_stream_BITS_159_TO_144__q5 } ;
  assign SEXT_myMult_get_out_stream_BITS_191_TO_176_36___d137 =
	     { myMultget_out_stream_BITS_191_TO_176__q6[15],
	       myMultget_out_stream_BITS_191_TO_176__q6 } ;
  assign SEXT_myMult_get_out_stream_BITS_223_TO_208_61___d162 =
	     { myMultget_out_stream_BITS_223_TO_208__q7[15],
	       myMultget_out_stream_BITS_223_TO_208__q7 } ;
  assign SEXT_myMult_get_out_stream_BITS_255_TO_240_86___d187 =
	     { myMultget_out_stream_BITS_255_TO_240__q8[15],
	       myMultget_out_stream_BITS_255_TO_240__q8 } ;
  assign SEXT_myMult_get_out_stream_BITS_287_TO_272_11___d212 =
	     { myMultget_out_stream_BITS_287_TO_272__q9[15],
	       myMultget_out_stream_BITS_287_TO_272__q9 } ;
  assign SEXT_myMult_get_out_stream_BITS_31_TO_16_1___d12 =
	     { myMultget_out_stream_BITS_31_TO_16__q1[15],
	       myMultget_out_stream_BITS_31_TO_16__q1 } ;
  assign SEXT_myMult_get_out_stream_BITS_63_TO_48_6___d37 =
	     { myMultget_out_stream_BITS_63_TO_48__q2[15],
	       myMultget_out_stream_BITS_63_TO_48__q2 } ;
  assign SEXT_myMult_get_out_stream_BITS_95_TO_80_1___d62 =
	     { myMultget_out_stream_BITS_95_TO_80__q3[15],
	       myMultget_out_stream_BITS_95_TO_80__q3 } ;
  assign _0_CONCAT_IF_SEXT_myMult_get_out_stream_BITS_12_ETC___d108 =
	     { 33'd0, x__h2325 } * 49'd10 ;
  assign _0_CONCAT_IF_SEXT_myMult_get_out_stream_BITS_15_ETC___d133 =
	     { 33'd0, x__h2725 } * 49'd10 ;
  assign _0_CONCAT_IF_SEXT_myMult_get_out_stream_BITS_19_ETC___d158 =
	     { 33'd0, x__h3125 } * 49'd10 ;
  assign _0_CONCAT_IF_SEXT_myMult_get_out_stream_BITS_22_ETC___d183 =
	     { 33'd0, x__h3666 } * 49'd10 ;
  assign _0_CONCAT_IF_SEXT_myMult_get_out_stream_BITS_25_ETC___d208 =
	     { 33'd0, x__h4086 } * 49'd10 ;
  assign _0_CONCAT_IF_SEXT_myMult_get_out_stream_BITS_28_ETC___d233 =
	     { 33'd0, x__h4506 } * 49'd10 ;
  assign _0_CONCAT_IF_SEXT_myMult_get_out_stream_BITS_31_ETC___d33 =
	     { 33'd0, x__h984 } * 49'd10 ;
  assign _0_CONCAT_IF_SEXT_myMult_get_out_stream_BITS_63_ETC___d58 =
	     { 33'd0, x__h1384 } * 49'd10 ;
  assign _0_CONCAT_IF_SEXT_myMult_get_out_stream_BITS_95_ETC___d83 =
	     { 33'd0, x__h1784 } * 49'd10 ;
  assign digit__h1354 =
	     { 45'd0,
	       _0_CONCAT_IF_SEXT_myMult_get_out_stream_BITS_63_ETC___d58[19:16] } ;
  assign digit__h1754 =
	     { 45'd0,
	       _0_CONCAT_IF_SEXT_myMult_get_out_stream_BITS_95_ETC___d83[19:16] } ;
  assign digit__h2295 =
	     { 45'd0,
	       _0_CONCAT_IF_SEXT_myMult_get_out_stream_BITS_12_ETC___d108[19:16] } ;
  assign digit__h2695 =
	     { 45'd0,
	       _0_CONCAT_IF_SEXT_myMult_get_out_stream_BITS_15_ETC___d133[19:16] } ;
  assign digit__h3095 =
	     { 45'd0,
	       _0_CONCAT_IF_SEXT_myMult_get_out_stream_BITS_19_ETC___d158[19:16] } ;
  assign digit__h3636 =
	     { 45'd0,
	       _0_CONCAT_IF_SEXT_myMult_get_out_stream_BITS_22_ETC___d183[19:16] } ;
  assign digit__h4056 =
	     { 45'd0,
	       _0_CONCAT_IF_SEXT_myMult_get_out_stream_BITS_25_ETC___d208[19:16] } ;
  assign digit__h4476 =
	     { 45'd0,
	       _0_CONCAT_IF_SEXT_myMult_get_out_stream_BITS_28_ETC___d233[19:16] } ;
  assign digit__h954 =
	     { 45'd0,
	       _0_CONCAT_IF_SEXT_myMult_get_out_stream_BITS_31_ETC___d33[19:16] } ;
  assign myMultget_out_stream_BITS_127_TO_112__q4 =
	     myMult$get_out_stream[127:112] ;
  assign myMultget_out_stream_BITS_159_TO_144__q5 =
	     myMult$get_out_stream[159:144] ;
  assign myMultget_out_stream_BITS_191_TO_176__q6 =
	     myMult$get_out_stream[191:176] ;
  assign myMultget_out_stream_BITS_223_TO_208__q7 =
	     myMult$get_out_stream[223:208] ;
  assign myMultget_out_stream_BITS_255_TO_240__q8 =
	     myMult$get_out_stream[255:240] ;
  assign myMultget_out_stream_BITS_287_TO_272__q9 =
	     myMult$get_out_stream[287:272] ;
  assign myMultget_out_stream_BITS_31_TO_16__q1 =
	     myMult$get_out_stream[31:16] ;
  assign myMultget_out_stream_BITS_63_TO_48__q2 =
	     myMult$get_out_stream[63:48] ;
  assign myMultget_out_stream_BITS_95_TO_80__q3 =
	     myMult$get_out_stream[95:80] ;
  assign x__h1384 =
	     (SEXT_myMult_get_out_stream_BITS_63_TO_48_6___d37[16] &&
	      myMult$get_out_stream[47:32] != 16'd0) ?
	       y_avValue_snd__h1318 :
	       myMult$get_out_stream[47:32] ;
  assign x__h1784 =
	     (SEXT_myMult_get_out_stream_BITS_95_TO_80_1___d62[16] &&
	      myMult$get_out_stream[79:64] != 16'd0) ?
	       y_avValue_snd__h1718 :
	       myMult$get_out_stream[79:64] ;
  assign x__h2325 =
	     (SEXT_myMult_get_out_stream_BITS_127_TO_112_6___d87[16] &&
	      myMult$get_out_stream[111:96] != 16'd0) ?
	       y_avValue_snd__h2259 :
	       myMult$get_out_stream[111:96] ;
  assign x__h2725 =
	     (SEXT_myMult_get_out_stream_BITS_159_TO_144_11___d112[16] &&
	      myMult$get_out_stream[143:128] != 16'd0) ?
	       y_avValue_snd__h2659 :
	       myMult$get_out_stream[143:128] ;
  assign x__h3125 =
	     (SEXT_myMult_get_out_stream_BITS_191_TO_176_36___d137[16] &&
	      myMult$get_out_stream[175:160] != 16'd0) ?
	       y_avValue_snd__h3059 :
	       myMult$get_out_stream[175:160] ;
  assign x__h3666 =
	     (SEXT_myMult_get_out_stream_BITS_223_TO_208_61___d162[16] &&
	      myMult$get_out_stream[207:192] != 16'd0) ?
	       y_avValue_snd__h3600 :
	       myMult$get_out_stream[207:192] ;
  assign x__h4086 =
	     (SEXT_myMult_get_out_stream_BITS_255_TO_240_86___d187[16] &&
	      myMult$get_out_stream[239:224] != 16'd0) ?
	       y_avValue_snd__h4020 :
	       myMult$get_out_stream[239:224] ;
  assign x__h4506 =
	     (SEXT_myMult_get_out_stream_BITS_287_TO_272_11___d212[16] &&
	      myMult$get_out_stream[271:256] != 16'd0) ?
	       y_avValue_snd__h4440 :
	       myMult$get_out_stream[271:256] ;
  assign x__h984 =
	     (SEXT_myMult_get_out_stream_BITS_31_TO_16_1___d12[16] &&
	      myMult$get_out_stream[15:0] != 16'd0) ?
	       y_avValue_snd__h918 :
	       myMult$get_out_stream[15:0] ;
  assign y_avValue_snd__h1318 = 16'd0 - myMult$get_out_stream[47:32] ;
  assign y_avValue_snd__h1718 = 16'd0 - myMult$get_out_stream[79:64] ;
  assign y_avValue_snd__h2259 = 16'd0 - myMult$get_out_stream[111:96] ;
  assign y_avValue_snd__h2659 = 16'd0 - myMult$get_out_stream[143:128] ;
  assign y_avValue_snd__h3059 = 16'd0 - myMult$get_out_stream[175:160] ;
  assign y_avValue_snd__h3600 = 16'd0 - myMult$get_out_stream[207:192] ;
  assign y_avValue_snd__h4020 = 16'd0 - myMult$get_out_stream[239:224] ;
  assign y_avValue_snd__h4440 = 16'd0 - myMult$get_out_stream[271:256] ;
  assign y_avValue_snd__h918 = 16'd0 - myMult$get_out_stream[15:0] ;
  always@(rg_cntr)
  begin
    case (rg_cntr)
      4'd0: _theResult___fst_i__h5016 = 16'd1;
      4'd1: _theResult___fst_i__h5016 = 16'd2;
      4'd2: _theResult___fst_i__h5016 = 16'd3;
      default: _theResult___fst_i__h5016 = 16'd0;
    endcase
  end
  always@(rg_cntr)
  begin
    case (rg_cntr)
      4'd0: _theResult___snd_fst_i__h5177 = 16'd0;
      4'd1: _theResult___snd_fst_i__h5177 = 16'd4;
      4'd2: _theResult___snd_fst_i__h5177 = 16'd5;
      4'd3: _theResult___snd_fst_i__h5177 = 16'd6;
      default: _theResult___snd_fst_i__h5177 = 16'd0;
    endcase
  end
  always@(rg_cntr)
  begin
    case (rg_cntr)
      4'd0, 4'd1: _theResult___snd_snd_fst_i__h5336 = 16'd0;
      4'd2: _theResult___snd_snd_fst_i__h5336 = 16'd7;
      4'd3: _theResult___snd_snd_fst_i__h5336 = 16'd8;
      4'd4: _theResult___snd_snd_fst_i__h5336 = 16'd9;
      default: _theResult___snd_snd_fst_i__h5336 = 16'd0;
    endcase
  end
  always@(rg_cntr)
  begin
    case (rg_cntr)
      4'd0: _theResult___snd_snd_snd_snd_fst_i__h5807 = 16'd0;
      4'd1: _theResult___snd_snd_snd_snd_fst_i__h5807 = 16'd2;
      4'd2: _theResult___snd_snd_snd_snd_fst_i__h5807 = 16'd5;
      4'd3: _theResult___snd_snd_snd_snd_fst_i__h5807 = 16'd8;
      default: _theResult___snd_snd_snd_snd_fst_i__h5807 = 16'd0;
    endcase
  end
  always@(rg_cntr)
  begin
    case (rg_cntr)
      4'd0: _theResult___snd_snd_snd_fst_i__h5720 = 16'd1;
      4'd1: _theResult___snd_snd_snd_fst_i__h5720 = 16'd4;
      4'd2: _theResult___snd_snd_snd_fst_i__h5720 = 16'd7;
      default: _theResult___snd_snd_snd_fst_i__h5720 = 16'd0;
    endcase
  end
  always@(rg_cntr)
  begin
    case (rg_cntr)
      4'd0, 4'd1: _theResult___snd_snd_snd_snd_snd_i__h5888 = 16'd0;
      4'd2: _theResult___snd_snd_snd_snd_snd_i__h5888 = 16'd3;
      4'd3: _theResult___snd_snd_snd_snd_snd_i__h5888 = 16'd6;
      4'd4: _theResult___snd_snd_snd_snd_snd_i__h5888 = 16'd9;
      default: _theResult___snd_snd_snd_snd_snd_i__h5888 = 16'd0;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        inp_Astream <= `BSV_ASSIGNMENT_DELAY 96'd0;
	inp_Bstream <= `BSV_ASSIGNMENT_DELAY 96'd0;
	out_stream <= `BSV_ASSIGNMENT_DELAY 288'd0;
	rg_cntr <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (inp_Astream$EN)
	  inp_Astream <= `BSV_ASSIGNMENT_DELAY inp_Astream$D_IN;
	if (inp_Bstream$EN)
	  inp_Bstream <= `BSV_ASSIGNMENT_DELAY inp_Bstream$D_IN;
	if (out_stream$EN)
	  out_stream <= `BSV_ASSIGNMENT_DELAY out_stream$D_IN;
	if (rg_cntr$EN) rg_cntr <= `BSV_ASSIGNMENT_DELAY rg_cntr$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    inp_Astream = 96'hAAAAAAAAAAAAAAAAAAAAAAAA;
    inp_Bstream = 96'hAAAAAAAAAAAAAAAAAAAAAAAA;
    out_stream =
	288'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_cntr = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0)
	begin
	  v__h407 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0) $display(v__h407, " [systole]\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0 &&
	  SEXT_myMult_get_out_stream_BITS_31_TO_16_1___d12[16] &&
	  myMult$get_out_stream[15:0] != 16'd0 &&
	  SEXT_myMult_get_out_stream_BITS_31_TO_16_1___d12 == 17'd131071)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0 &&
	  SEXT_myMult_get_out_stream_BITS_31_TO_16_1___d12[16] &&
	  myMult$get_out_stream[15:0] != 16'd0 &&
	  SEXT_myMult_get_out_stream_BITS_31_TO_16_1___d12 != 17'd131071)
	$write("%0d.",
	       $signed(SEXT_myMult_get_out_stream_BITS_31_TO_16_1___d12 +
		       17'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0 &&
	  (!SEXT_myMult_get_out_stream_BITS_31_TO_16_1___d12[16] ||
	   myMult$get_out_stream[15:0] == 16'd0))
	$write("%0d.",
	       $signed(SEXT_myMult_get_out_stream_BITS_31_TO_16_1___d12));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0) $write("%0d", digit__h954);
    if (RST_N != `BSV_RESET_VALUE) if (rg_cntr != 4'd0) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0 &&
	  SEXT_myMult_get_out_stream_BITS_63_TO_48_6___d37[16] &&
	  myMult$get_out_stream[47:32] != 16'd0 &&
	  SEXT_myMult_get_out_stream_BITS_63_TO_48_6___d37 == 17'd131071)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0 &&
	  SEXT_myMult_get_out_stream_BITS_63_TO_48_6___d37[16] &&
	  myMult$get_out_stream[47:32] != 16'd0 &&
	  SEXT_myMult_get_out_stream_BITS_63_TO_48_6___d37 != 17'd131071)
	$write("%0d.",
	       $signed(SEXT_myMult_get_out_stream_BITS_63_TO_48_6___d37 +
		       17'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0 &&
	  (!SEXT_myMult_get_out_stream_BITS_63_TO_48_6___d37[16] ||
	   myMult$get_out_stream[47:32] == 16'd0))
	$write("%0d.",
	       $signed(SEXT_myMult_get_out_stream_BITS_63_TO_48_6___d37));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0) $write("%0d", digit__h1354);
    if (RST_N != `BSV_RESET_VALUE) if (rg_cntr != 4'd0) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0 &&
	  SEXT_myMult_get_out_stream_BITS_95_TO_80_1___d62[16] &&
	  myMult$get_out_stream[79:64] != 16'd0 &&
	  SEXT_myMult_get_out_stream_BITS_95_TO_80_1___d62 == 17'd131071)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0 &&
	  SEXT_myMult_get_out_stream_BITS_95_TO_80_1___d62[16] &&
	  myMult$get_out_stream[79:64] != 16'd0 &&
	  SEXT_myMult_get_out_stream_BITS_95_TO_80_1___d62 != 17'd131071)
	$write("%0d.",
	       $signed(SEXT_myMult_get_out_stream_BITS_95_TO_80_1___d62 +
		       17'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0 &&
	  (!SEXT_myMult_get_out_stream_BITS_95_TO_80_1___d62[16] ||
	   myMult$get_out_stream[79:64] == 16'd0))
	$write("%0d.",
	       $signed(SEXT_myMult_get_out_stream_BITS_95_TO_80_1___d62));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0) $write("%0d", digit__h1754);
    if (RST_N != `BSV_RESET_VALUE) if (rg_cntr != 4'd0) $write(" ");
    if (RST_N != `BSV_RESET_VALUE) if (rg_cntr != 4'd0) $display("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0 &&
	  SEXT_myMult_get_out_stream_BITS_127_TO_112_6___d87[16] &&
	  myMult$get_out_stream[111:96] != 16'd0 &&
	  SEXT_myMult_get_out_stream_BITS_127_TO_112_6___d87 == 17'd131071)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0 &&
	  SEXT_myMult_get_out_stream_BITS_127_TO_112_6___d87[16] &&
	  myMult$get_out_stream[111:96] != 16'd0 &&
	  SEXT_myMult_get_out_stream_BITS_127_TO_112_6___d87 != 17'd131071)
	$write("%0d.",
	       $signed(SEXT_myMult_get_out_stream_BITS_127_TO_112_6___d87 +
		       17'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0 &&
	  (!SEXT_myMult_get_out_stream_BITS_127_TO_112_6___d87[16] ||
	   myMult$get_out_stream[111:96] == 16'd0))
	$write("%0d.",
	       $signed(SEXT_myMult_get_out_stream_BITS_127_TO_112_6___d87));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0) $write("%0d", digit__h2295);
    if (RST_N != `BSV_RESET_VALUE) if (rg_cntr != 4'd0) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0 &&
	  SEXT_myMult_get_out_stream_BITS_159_TO_144_11___d112[16] &&
	  myMult$get_out_stream[143:128] != 16'd0 &&
	  SEXT_myMult_get_out_stream_BITS_159_TO_144_11___d112 == 17'd131071)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0 &&
	  SEXT_myMult_get_out_stream_BITS_159_TO_144_11___d112[16] &&
	  myMult$get_out_stream[143:128] != 16'd0 &&
	  SEXT_myMult_get_out_stream_BITS_159_TO_144_11___d112 != 17'd131071)
	$write("%0d.",
	       $signed(SEXT_myMult_get_out_stream_BITS_159_TO_144_11___d112 +
		       17'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0 &&
	  (!SEXT_myMult_get_out_stream_BITS_159_TO_144_11___d112[16] ||
	   myMult$get_out_stream[143:128] == 16'd0))
	$write("%0d.",
	       $signed(SEXT_myMult_get_out_stream_BITS_159_TO_144_11___d112));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0) $write("%0d", digit__h2695);
    if (RST_N != `BSV_RESET_VALUE) if (rg_cntr != 4'd0) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0 &&
	  SEXT_myMult_get_out_stream_BITS_191_TO_176_36___d137[16] &&
	  myMult$get_out_stream[175:160] != 16'd0 &&
	  SEXT_myMult_get_out_stream_BITS_191_TO_176_36___d137 == 17'd131071)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0 &&
	  SEXT_myMult_get_out_stream_BITS_191_TO_176_36___d137[16] &&
	  myMult$get_out_stream[175:160] != 16'd0 &&
	  SEXT_myMult_get_out_stream_BITS_191_TO_176_36___d137 != 17'd131071)
	$write("%0d.",
	       $signed(SEXT_myMult_get_out_stream_BITS_191_TO_176_36___d137 +
		       17'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0 &&
	  (!SEXT_myMult_get_out_stream_BITS_191_TO_176_36___d137[16] ||
	   myMult$get_out_stream[175:160] == 16'd0))
	$write("%0d.",
	       $signed(SEXT_myMult_get_out_stream_BITS_191_TO_176_36___d137));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0) $write("%0d", digit__h3095);
    if (RST_N != `BSV_RESET_VALUE) if (rg_cntr != 4'd0) $write(" ");
    if (RST_N != `BSV_RESET_VALUE) if (rg_cntr != 4'd0) $display("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0 &&
	  SEXT_myMult_get_out_stream_BITS_223_TO_208_61___d162[16] &&
	  myMult$get_out_stream[207:192] != 16'd0 &&
	  SEXT_myMult_get_out_stream_BITS_223_TO_208_61___d162 == 17'd131071)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0 &&
	  SEXT_myMult_get_out_stream_BITS_223_TO_208_61___d162[16] &&
	  myMult$get_out_stream[207:192] != 16'd0 &&
	  SEXT_myMult_get_out_stream_BITS_223_TO_208_61___d162 != 17'd131071)
	$write("%0d.",
	       $signed(SEXT_myMult_get_out_stream_BITS_223_TO_208_61___d162 +
		       17'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0 &&
	  (!SEXT_myMult_get_out_stream_BITS_223_TO_208_61___d162[16] ||
	   myMult$get_out_stream[207:192] == 16'd0))
	$write("%0d.",
	       $signed(SEXT_myMult_get_out_stream_BITS_223_TO_208_61___d162));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0) $write("%0d", digit__h3636);
    if (RST_N != `BSV_RESET_VALUE) if (rg_cntr != 4'd0) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0 &&
	  SEXT_myMult_get_out_stream_BITS_255_TO_240_86___d187[16] &&
	  myMult$get_out_stream[239:224] != 16'd0 &&
	  SEXT_myMult_get_out_stream_BITS_255_TO_240_86___d187 == 17'd131071)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0 &&
	  SEXT_myMult_get_out_stream_BITS_255_TO_240_86___d187[16] &&
	  myMult$get_out_stream[239:224] != 16'd0 &&
	  SEXT_myMult_get_out_stream_BITS_255_TO_240_86___d187 != 17'd131071)
	$write("%0d.",
	       $signed(SEXT_myMult_get_out_stream_BITS_255_TO_240_86___d187 +
		       17'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0 &&
	  (!SEXT_myMult_get_out_stream_BITS_255_TO_240_86___d187[16] ||
	   myMult$get_out_stream[239:224] == 16'd0))
	$write("%0d.",
	       $signed(SEXT_myMult_get_out_stream_BITS_255_TO_240_86___d187));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0) $write("%0d", digit__h4056);
    if (RST_N != `BSV_RESET_VALUE) if (rg_cntr != 4'd0) $write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0 &&
	  SEXT_myMult_get_out_stream_BITS_287_TO_272_11___d212[16] &&
	  myMult$get_out_stream[271:256] != 16'd0 &&
	  SEXT_myMult_get_out_stream_BITS_287_TO_272_11___d212 == 17'd131071)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0 &&
	  SEXT_myMult_get_out_stream_BITS_287_TO_272_11___d212[16] &&
	  myMult$get_out_stream[271:256] != 16'd0 &&
	  SEXT_myMult_get_out_stream_BITS_287_TO_272_11___d212 != 17'd131071)
	$write("%0d.",
	       $signed(SEXT_myMult_get_out_stream_BITS_287_TO_272_11___d212 +
		       17'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0 &&
	  (!SEXT_myMult_get_out_stream_BITS_287_TO_272_11___d212[16] ||
	   myMult$get_out_stream[271:256] == 16'd0))
	$write("%0d.",
	       $signed(SEXT_myMult_get_out_stream_BITS_287_TO_272_11___d212));
    if (RST_N != `BSV_RESET_VALUE)
      if (rg_cntr != 4'd0) $write("%0d", digit__h4476);
    if (RST_N != `BSV_RESET_VALUE) if (rg_cntr != 4'd0) $write(" ");
    if (RST_N != `BSV_RESET_VALUE) if (rg_cntr != 4'd0) $display("\n");
    if (RST_N != `BSV_RESET_VALUE) if (rg_cntr == 4'd10) $finish(32'd1);
  end
  // synopsys translate_on
endmodule  // tb_mat_mult

