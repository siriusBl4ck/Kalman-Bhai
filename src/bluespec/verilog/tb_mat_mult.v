//
// Generated by Bluespec Compiler, version 2021.07-1-gaf77efcd (build af77efcd)
//
// On Mon May 16 22:56:01 IST 2022
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module tb_mat_mult(CLK,
		   RST_N);
  input  CLK;
  input  RST_N;

  // register finalo_0_0
  reg [31 : 0] finalo_0_0;
  wire [31 : 0] finalo_0_0$D_IN;
  wire finalo_0_0$EN;

  // register finalo_0_1
  reg [31 : 0] finalo_0_1;
  wire [31 : 0] finalo_0_1$D_IN;
  wire finalo_0_1$EN;

  // register finalo_0_2
  reg [31 : 0] finalo_0_2;
  wire [31 : 0] finalo_0_2$D_IN;
  wire finalo_0_2$EN;

  // register finalo_1_0
  reg [31 : 0] finalo_1_0;
  wire [31 : 0] finalo_1_0$D_IN;
  wire finalo_1_0$EN;

  // register finalo_1_1
  reg [31 : 0] finalo_1_1;
  wire [31 : 0] finalo_1_1$D_IN;
  wire finalo_1_1$EN;

  // register finalo_1_2
  reg [31 : 0] finalo_1_2;
  wire [31 : 0] finalo_1_2$D_IN;
  wire finalo_1_2$EN;

  // register finalo_2_0
  reg [31 : 0] finalo_2_0;
  wire [31 : 0] finalo_2_0$D_IN;
  wire finalo_2_0$EN;

  // register finalo_2_1
  reg [31 : 0] finalo_2_1;
  wire [31 : 0] finalo_2_1$D_IN;
  wire finalo_2_1$EN;

  // register finalo_2_2
  reg [31 : 0] finalo_2_2;
  wire [31 : 0] finalo_2_2$D_IN;
  wire finalo_2_2$EN;

  // register inp_Astream
  reg [95 : 0] inp_Astream;
  wire [95 : 0] inp_Astream$D_IN;
  wire inp_Astream$EN;

  // register inp_Bstream
  reg [95 : 0] inp_Bstream;
  wire [95 : 0] inp_Bstream$D_IN;
  wire inp_Bstream$EN;

  // register out_stream
  reg [95 : 0] out_stream;
  wire [95 : 0] out_stream$D_IN;
  wire out_stream$EN;

  // register rg_cntr
  reg [31 : 0] rg_cntr;
  wire [31 : 0] rg_cntr$D_IN;
  wire rg_cntr$EN;

  // ports of submodule myMult
  wire [95 : 0] myMult$feed_inp_stream_a_stream,
		myMult$feed_inp_stream_b_stream,
		myMult$get_out_stream;
  wire myMult$EN_feed_inp_stream,
       myMult$EN_reset_mod,
       myMult$RDY_get_out_stream;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h2983;
  reg [63 : 0] v__h10226;
  reg [63 : 0] v__h11381;
  reg [63 : 0] v__h12536;
  // synopsys translate_on

  // remaining internal signals
  reg [15 : 0] SEL_ARR_1_2_3_5_rg_cntr___d16,
	       SEL_ARR_1_4_7_9_rg_cntr___d20,
	       SEL_ARR_2_5_8_0_rg_cntr_MINUS_1_3___d31,
	       SEL_ARR_3_6_9_3_rg_cntr_MINUS_2_4___d44,
	       SEL_ARR_4_5_6_6_rg_cntr_MINUS_1_3___d27,
	       SEL_ARR_7_8_9_9_rg_cntr_MINUS_2_4___d40;
  wire [97 : 0] _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d106,
		_0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d115,
		_0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d159,
		_0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d162,
		_0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d170,
		_0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d179,
		_0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d188,
		_0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d232,
		_0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d235,
		_0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d243,
		_0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d252,
		_0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d261,
		_0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d86,
		_0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d89,
		_0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d97,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myMult_get_ou_ETC___d165,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myMult_get_ou_ETC___d238,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myMult_get_ou_ETC___d92,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myMult_ETC___d101,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myMult_ETC___d174,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myMult_ETC___d247,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d110,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d183,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d256,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d119,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d192,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d265;
  wire [48 : 0] digit__h10635,
		digit__h10702,
		digit__h10791,
		digit__h10880,
		digit__h10969,
		digit__h11790,
		digit__h11857,
		digit__h11946,
		digit__h12035,
		digit__h12124,
		digit__h9383,
		digit__h9450,
		digit__h9539,
		digit__h9628,
		digit__h9717,
		tx0700_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q7,
		tx0789_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q8,
		tx0878_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q9,
		tx0967_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q10,
		tx1855_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q12,
		tx1944_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q13,
		tx2033_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q14,
		tx2122_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q15,
		tx448_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_m_ETC__q2,
		tx537_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q3,
		tx626_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q4,
		tx715_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q5,
		tx__h10700,
		tx__h10789,
		tx__h10878,
		tx__h10967,
		tx__h11855,
		tx__h11944,
		tx__h12033,
		tx__h12122,
		tx__h9448,
		tx__h9537,
		tx__h9626,
		tx__h9715,
		y__h10848,
		y__h10937,
		y__h11026,
		y__h12003,
		y__h12092,
		y__h12181,
		y__h9596,
		y__h9685,
		y__h9774;
  wire [31 : 0] IF_rg_cntr_MINUS_1_3_SLT_3_4_AND_NOT_rg_cntr_S_ETC___d50,
		IF_rg_cntr_MINUS_1_3_SLT_3_4_AND_NOT_rg_cntr_S_ETC___d57,
		IF_rg_cntr_MINUS_2_4_SLT_3_5_AND_NOT_rg_cntr_S_ETC___d48,
		IF_rg_cntr_MINUS_2_4_SLT_3_5_AND_NOT_rg_cntr_S_ETC___d55,
		rg_cntr_MINUS_1_3_MINUS_3_37_MINUS_7___d138,
		rg_cntr_MINUS_1___d23,
		rg_cntr_MINUS_2_4_MINUS_3_10_MINUS_7___d211,
		rg_cntr_MINUS_2___d34,
		x__h9859;
  wire [16 : 0] SEXT_myMult_get_out_stream__6_BITS_31_TO_16_7___d68,
		SEXT_myMult_get_out_stream__6_BITS_63_TO_48_40___d141,
		SEXT_myMult_get_out_stream__6_BITS_95_TO_80_13___d214;
  wire [15 : 0] myMultget_out_stream_BITS_31_TO_16__q1,
		myMultget_out_stream_BITS_63_TO_48__q6,
		myMultget_out_stream_BITS_95_TO_80__q11,
		x__h10665,
		x__h11820,
		x__h9413,
		y_avValue_snd__h10599,
		y_avValue_snd__h11754,
		y_avValue_snd__h9347;
  wire NOT_rg_cntr_SLT_1___d4;

  // submodule myMult
  mat_mult_systolic myMult(.CLK(CLK),
			   .RST_N(RST_N),
			   .feed_inp_stream_a_stream(myMult$feed_inp_stream_a_stream),
			   .feed_inp_stream_b_stream(myMult$feed_inp_stream_b_stream),
			   .EN_feed_inp_stream(myMult$EN_feed_inp_stream),
			   .EN_reset_mod(myMult$EN_reset_mod),
			   .RDY_feed_inp_stream(),
			   .get_out_stream(myMult$get_out_stream),
			   .RDY_get_out_stream(myMult$RDY_get_out_stream),
			   .RDY_reset_mod());

  // register finalo_0_0
  assign finalo_0_0$D_IN = myMult$get_out_stream[31:0] ;
  assign finalo_0_0$EN = myMult$RDY_get_out_stream && x__h9859 == 32'd0 ;

  // register finalo_0_1
  assign finalo_0_1$D_IN = myMult$get_out_stream[31:0] ;
  assign finalo_0_1$EN = myMult$RDY_get_out_stream && x__h9859 == 32'd1 ;

  // register finalo_0_2
  assign finalo_0_2$D_IN = myMult$get_out_stream[31:0] ;
  assign finalo_0_2$EN = myMult$RDY_get_out_stream && x__h9859 == 32'd2 ;

  // register finalo_1_0
  assign finalo_1_0$D_IN = myMult$get_out_stream[63:32] ;
  assign finalo_1_0$EN =
	     myMult$RDY_get_out_stream &&
	     rg_cntr_MINUS_1_3_MINUS_3_37_MINUS_7___d138 == 32'd0 ;

  // register finalo_1_1
  assign finalo_1_1$D_IN = myMult$get_out_stream[63:32] ;
  assign finalo_1_1$EN =
	     myMult$RDY_get_out_stream &&
	     rg_cntr_MINUS_1_3_MINUS_3_37_MINUS_7___d138 == 32'd1 ;

  // register finalo_1_2
  assign finalo_1_2$D_IN = myMult$get_out_stream[63:32] ;
  assign finalo_1_2$EN =
	     myMult$RDY_get_out_stream &&
	     rg_cntr_MINUS_1_3_MINUS_3_37_MINUS_7___d138 == 32'd2 ;

  // register finalo_2_0
  assign finalo_2_0$D_IN = myMult$get_out_stream[95:64] ;
  assign finalo_2_0$EN =
	     myMult$RDY_get_out_stream &&
	     rg_cntr_MINUS_2_4_MINUS_3_10_MINUS_7___d211 == 32'd0 ;

  // register finalo_2_1
  assign finalo_2_1$D_IN = myMult$get_out_stream[95:64] ;
  assign finalo_2_1$EN =
	     myMult$RDY_get_out_stream &&
	     rg_cntr_MINUS_2_4_MINUS_3_10_MINUS_7___d211 == 32'd1 ;

  // register finalo_2_2
  assign finalo_2_2$D_IN = myMult$get_out_stream[95:64] ;
  assign finalo_2_2$EN =
	     myMult$RDY_get_out_stream &&
	     rg_cntr_MINUS_2_4_MINUS_3_10_MINUS_7___d211 == 32'd2 ;

  // register inp_Astream
  assign inp_Astream$D_IN =
	     { IF_rg_cntr_MINUS_2_4_SLT_3_5_AND_NOT_rg_cntr_S_ETC___d48,
	       IF_rg_cntr_MINUS_1_3_SLT_3_4_AND_NOT_rg_cntr_S_ETC___d50,
	       ((rg_cntr ^ 32'h80000000) < 32'h80000003 && !rg_cntr[31]) ?
		 { SEL_ARR_1_2_3_5_rg_cntr___d16, 16'd0 } :
		 32'd0 } ;
  assign inp_Astream$EN = 1'd1 ;

  // register inp_Bstream
  assign inp_Bstream$D_IN =
	     { IF_rg_cntr_MINUS_2_4_SLT_3_5_AND_NOT_rg_cntr_S_ETC___d55,
	       IF_rg_cntr_MINUS_1_3_SLT_3_4_AND_NOT_rg_cntr_S_ETC___d57,
	       ((rg_cntr ^ 32'h80000000) < 32'h80000003 && !rg_cntr[31]) ?
		 { SEL_ARR_1_4_7_9_rg_cntr___d20, 16'd0 } :
		 32'd0 } ;
  assign inp_Bstream$EN = 1'd1 ;

  // register out_stream
  assign out_stream$D_IN = 96'd0 ;
  assign out_stream$EN = 1'd1 ;

  // register rg_cntr
  assign rg_cntr$D_IN = rg_cntr + 32'd1 ;
  assign rg_cntr$EN = 1'd1 ;

  // submodule myMult
  assign myMult$feed_inp_stream_a_stream = inp_Astream ;
  assign myMult$feed_inp_stream_b_stream = inp_Bstream ;
  assign myMult$EN_feed_inp_stream =
	     NOT_rg_cntr_SLT_1___d4 &&
	     (rg_cntr ^ 32'h80000000) <= 32'h80000005 ;
  assign myMult$EN_reset_mod = 1'b0 ;

  // remaining internal signals
  assign IF_rg_cntr_MINUS_1_3_SLT_3_4_AND_NOT_rg_cntr_S_ETC___d50 =
	     ((rg_cntr_MINUS_1___d23 ^ 32'h80000000) < 32'h80000003 &&
	      NOT_rg_cntr_SLT_1___d4) ?
	       { SEL_ARR_4_5_6_6_rg_cntr_MINUS_1_3___d27, 16'd0 } :
	       32'd0 ;
  assign IF_rg_cntr_MINUS_1_3_SLT_3_4_AND_NOT_rg_cntr_S_ETC___d57 =
	     ((rg_cntr_MINUS_1___d23 ^ 32'h80000000) < 32'h80000003 &&
	      NOT_rg_cntr_SLT_1___d4) ?
	       { SEL_ARR_2_5_8_0_rg_cntr_MINUS_1_3___d31, 16'd0 } :
	       32'd0 ;
  assign IF_rg_cntr_MINUS_2_4_SLT_3_5_AND_NOT_rg_cntr_S_ETC___d48 =
	     ((rg_cntr_MINUS_2___d34 ^ 32'h80000000) < 32'h80000003 &&
	      (rg_cntr ^ 32'h80000000) >= 32'h80000002) ?
	       { SEL_ARR_7_8_9_9_rg_cntr_MINUS_2_4___d40, 16'd0 } :
	       32'd0 ;
  assign IF_rg_cntr_MINUS_2_4_SLT_3_5_AND_NOT_rg_cntr_S_ETC___d55 =
	     ((rg_cntr_MINUS_2___d34 ^ 32'h80000000) < 32'h80000003 &&
	      (rg_cntr ^ 32'h80000000) >= 32'h80000002) ?
	       { SEL_ARR_3_6_9_3_rg_cntr_MINUS_2_4___d44, 16'd0 } :
	       32'd0 ;
  assign NOT_rg_cntr_SLT_1___d4 = (rg_cntr ^ 32'h80000000) >= 32'h80000001 ;
  assign SEXT_myMult_get_out_stream__6_BITS_31_TO_16_7___d68 =
	     { myMultget_out_stream_BITS_31_TO_16__q1[15],
	       myMultget_out_stream_BITS_31_TO_16__q1 } ;
  assign SEXT_myMult_get_out_stream__6_BITS_63_TO_48_40___d141 =
	     { myMultget_out_stream_BITS_63_TO_48__q6[15],
	       myMultget_out_stream_BITS_63_TO_48__q6 } ;
  assign SEXT_myMult_get_out_stream__6_BITS_95_TO_80_13___d214 =
	     { myMultget_out_stream_BITS_95_TO_80__q11[15],
	       myMultget_out_stream_BITS_95_TO_80__q11 } ;
  assign _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d106 =
	     { 33'd0, x__h9413 } * 49'd10000 ;
  assign _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d115 =
	     { 33'd0, x__h9413 } * 49'd100000 ;
  assign _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d159 =
	     { 33'd0, x__h10665 } * 49'd10 ;
  assign _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d162 =
	     { 33'd0, x__h10665 } * 49'd100 ;
  assign _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d170 =
	     { 33'd0, x__h10665 } * 49'd1000 ;
  assign _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d179 =
	     { 33'd0, x__h10665 } * 49'd10000 ;
  assign _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d188 =
	     { 33'd0, x__h10665 } * 49'd100000 ;
  assign _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d232 =
	     { 33'd0, x__h11820 } * 49'd10 ;
  assign _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d235 =
	     { 33'd0, x__h11820 } * 49'd100 ;
  assign _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d243 =
	     { 33'd0, x__h11820 } * 49'd1000 ;
  assign _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d252 =
	     { 33'd0, x__h11820 } * 49'd10000 ;
  assign _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d261 =
	     { 33'd0, x__h11820 } * 49'd100000 ;
  assign _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d86 =
	     { 33'd0, x__h9413 } * 49'd10 ;
  assign _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d89 =
	     { 33'd0, x__h9413 } * 49'd100 ;
  assign _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d97 =
	     { 33'd0, x__h9413 } * 49'd1000 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myMult_get_ou_ETC___d165 =
	     49'd10 * digit__h10635 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myMult_get_ou_ETC___d238 =
	     49'd10 * digit__h11790 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myMult_get_ou_ETC___d92 =
	     49'd10 * digit__h9383 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myMult_ETC___d101 =
	     49'd10 * y__h9596 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myMult_ETC___d174 =
	     49'd10 * y__h10848 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myMult_ETC___d247 =
	     49'd10 * y__h12003 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d110 =
	     49'd10 * y__h9685 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d183 =
	     49'd10 * y__h10937 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d256 =
	     49'd10 * y__h12092 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d119 =
	     49'd10 * y__h9774 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d192 =
	     49'd10 * y__h11026 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d265 =
	     49'd10 * y__h12181 ;
  assign digit__h10635 =
	     { 45'd0,
	       _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d159[19:16] } ;
  assign digit__h10702 =
	     { 45'd0,
	       tx0700_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q7[3:0] } ;
  assign digit__h10791 =
	     { 45'd0,
	       tx0789_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q8[3:0] } ;
  assign digit__h10880 =
	     { 45'd0,
	       tx0878_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q9[3:0] } ;
  assign digit__h10969 =
	     { 45'd0,
	       tx0967_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q10[3:0] } ;
  assign digit__h11790 =
	     { 45'd0,
	       _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d232[19:16] } ;
  assign digit__h11857 =
	     { 45'd0,
	       tx1855_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q12[3:0] } ;
  assign digit__h11946 =
	     { 45'd0,
	       tx1944_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q13[3:0] } ;
  assign digit__h12035 =
	     { 45'd0,
	       tx2033_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q14[3:0] } ;
  assign digit__h12124 =
	     { 45'd0,
	       tx2122_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q15[3:0] } ;
  assign digit__h9383 =
	     { 45'd0,
	       _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d86[19:16] } ;
  assign digit__h9450 =
	     { 45'd0,
	       tx448_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_m_ETC__q2[3:0] } ;
  assign digit__h9539 =
	     { 45'd0,
	       tx537_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q3[3:0] } ;
  assign digit__h9628 =
	     { 45'd0,
	       tx626_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q4[3:0] } ;
  assign digit__h9717 =
	     { 45'd0,
	       tx715_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q5[3:0] } ;
  assign myMultget_out_stream_BITS_31_TO_16__q1 =
	     myMult$get_out_stream[31:16] ;
  assign myMultget_out_stream_BITS_63_TO_48__q6 =
	     myMult$get_out_stream[63:48] ;
  assign myMultget_out_stream_BITS_95_TO_80__q11 =
	     myMult$get_out_stream[95:80] ;
  assign rg_cntr_MINUS_1_3_MINUS_3_37_MINUS_7___d138 =
	     (rg_cntr_MINUS_1___d23 - 32'd3) - 32'd7 ;
  assign rg_cntr_MINUS_1___d23 = rg_cntr - 32'd1 ;
  assign rg_cntr_MINUS_2_4_MINUS_3_10_MINUS_7___d211 =
	     (rg_cntr_MINUS_2___d34 - 32'd3) - 32'd7 ;
  assign rg_cntr_MINUS_2___d34 = rg_cntr - 32'd2 ;
  assign tx0700_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q7 =
	     tx__h10700 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myMult_get_ou_ETC___d165[48:0] ;
  assign tx0789_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q8 =
	     tx__h10789 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myMult_ETC___d174[48:0] ;
  assign tx0878_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q9 =
	     tx__h10878 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d183[48:0] ;
  assign tx0967_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q10 =
	     tx__h10967 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d192[48:0] ;
  assign tx1855_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT__ETC__q12 =
	     tx__h11855 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myMult_get_ou_ETC___d238[48:0] ;
  assign tx1944_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_I_ETC__q13 =
	     tx__h11944 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myMult_ETC___d247[48:0] ;
  assign tx2033_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_C_ETC__q14 =
	     tx__h12033 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d256[48:0] ;
  assign tx2122_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CON_ETC__q15 =
	     tx__h12122 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d265[48:0] ;
  assign tx448_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_m_ETC__q2 =
	     tx__h9448 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myMult_get_ou_ETC___d92[48:0] ;
  assign tx537_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_ETC__q3 =
	     tx__h9537 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myMult_ETC___d101[48:0] ;
  assign tx626_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CO_ETC__q4 =
	     tx__h9626 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d110[48:0] ;
  assign tx715_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CONC_ETC__q5 =
	     tx__h9715 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d119[48:0] ;
  assign tx__h10700 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d162[48:16] } ;
  assign tx__h10789 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d170[48:16] } ;
  assign tx__h10878 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d179[48:16] } ;
  assign tx__h10967 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d188[48:16] } ;
  assign tx__h11855 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d235[48:16] } ;
  assign tx__h11944 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d243[48:16] } ;
  assign tx__h12033 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d252[48:16] } ;
  assign tx__h12122 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d261[48:16] } ;
  assign tx__h9448 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d89[48:16] } ;
  assign tx__h9537 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d97[48:16] } ;
  assign tx__h9626 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d106[48:16] } ;
  assign tx__h9715 =
	     { 16'd0,
	       _0_CONCAT_IF_SEXT_myMult_get_out_stream__6_BITS_ETC___d115[48:16] } ;
  assign x__h10665 =
	     (SEXT_myMult_get_out_stream__6_BITS_63_TO_48_40___d141[16] &&
	      myMult$get_out_stream[47:32] != 16'd0) ?
	       y_avValue_snd__h10599 :
	       myMult$get_out_stream[47:32] ;
  assign x__h11820 =
	     (SEXT_myMult_get_out_stream__6_BITS_95_TO_80_13___d214[16] &&
	      myMult$get_out_stream[79:64] != 16'd0) ?
	       y_avValue_snd__h11754 :
	       myMult$get_out_stream[79:64] ;
  assign x__h9413 =
	     (SEXT_myMult_get_out_stream__6_BITS_31_TO_16_7___d68[16] &&
	      myMult$get_out_stream[15:0] != 16'd0) ?
	       y_avValue_snd__h9347 :
	       myMult$get_out_stream[15:0] ;
  assign x__h9859 = (rg_cntr - 32'd3) - 32'd7 ;
  assign y__h10848 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myMult_get_ou_ETC___d165[48:0] +
	     digit__h10702 ;
  assign y__h10937 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myMult_ETC___d174[48:0] +
	     digit__h10791 ;
  assign y__h11026 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d183[48:0] +
	     digit__h10880 ;
  assign y__h12003 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myMult_get_ou_ETC___d238[48:0] +
	     digit__h11857 ;
  assign y__h12092 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myMult_ETC___d247[48:0] +
	     digit__h11946 ;
  assign y__h12181 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d256[48:0] +
	     digit__h12035 ;
  assign y__h9596 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myMult_get_ou_ETC___d92[48:0] +
	     digit__h9450 ;
  assign y__h9685 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_myMult_ETC___d101[48:0] +
	     digit__h9539 ;
  assign y__h9774 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d110[48:0] +
	     digit__h9628 ;
  assign y_avValue_snd__h10599 = 16'd0 - myMult$get_out_stream[47:32] ;
  assign y_avValue_snd__h11754 = 16'd0 - myMult$get_out_stream[79:64] ;
  assign y_avValue_snd__h9347 = 16'd0 - myMult$get_out_stream[15:0] ;
  always@(rg_cntr)
  begin
    case (rg_cntr)
      32'd0: SEL_ARR_1_4_7_9_rg_cntr___d20 = 16'd1;
      32'd1: SEL_ARR_1_4_7_9_rg_cntr___d20 = 16'd4;
      32'd2: SEL_ARR_1_4_7_9_rg_cntr___d20 = 16'd7;
      default: SEL_ARR_1_4_7_9_rg_cntr___d20 =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(rg_cntr)
  begin
    case (rg_cntr)
      32'd0: SEL_ARR_1_2_3_5_rg_cntr___d16 = 16'd1;
      32'd1: SEL_ARR_1_2_3_5_rg_cntr___d16 = 16'd2;
      32'd2: SEL_ARR_1_2_3_5_rg_cntr___d16 = 16'd3;
      default: SEL_ARR_1_2_3_5_rg_cntr___d16 =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(rg_cntr_MINUS_1___d23)
  begin
    case (rg_cntr_MINUS_1___d23)
      32'd0: SEL_ARR_4_5_6_6_rg_cntr_MINUS_1_3___d27 = 16'd4;
      32'd1: SEL_ARR_4_5_6_6_rg_cntr_MINUS_1_3___d27 = 16'd5;
      32'd2: SEL_ARR_4_5_6_6_rg_cntr_MINUS_1_3___d27 = 16'd6;
      default: SEL_ARR_4_5_6_6_rg_cntr_MINUS_1_3___d27 =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(rg_cntr_MINUS_1___d23)
  begin
    case (rg_cntr_MINUS_1___d23)
      32'd0: SEL_ARR_2_5_8_0_rg_cntr_MINUS_1_3___d31 = 16'd2;
      32'd1: SEL_ARR_2_5_8_0_rg_cntr_MINUS_1_3___d31 = 16'd5;
      32'd2: SEL_ARR_2_5_8_0_rg_cntr_MINUS_1_3___d31 = 16'd8;
      default: SEL_ARR_2_5_8_0_rg_cntr_MINUS_1_3___d31 =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(rg_cntr_MINUS_2___d34)
  begin
    case (rg_cntr_MINUS_2___d34)
      32'd0: SEL_ARR_7_8_9_9_rg_cntr_MINUS_2_4___d40 = 16'd7;
      32'd1: SEL_ARR_7_8_9_9_rg_cntr_MINUS_2_4___d40 = 16'd8;
      32'd2: SEL_ARR_7_8_9_9_rg_cntr_MINUS_2_4___d40 = 16'd9;
      default: SEL_ARR_7_8_9_9_rg_cntr_MINUS_2_4___d40 =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end
  always@(rg_cntr_MINUS_2___d34)
  begin
    case (rg_cntr_MINUS_2___d34)
      32'd0: SEL_ARR_3_6_9_3_rg_cntr_MINUS_2_4___d44 = 16'd3;
      32'd1: SEL_ARR_3_6_9_3_rg_cntr_MINUS_2_4___d44 = 16'd6;
      32'd2: SEL_ARR_3_6_9_3_rg_cntr_MINUS_2_4___d44 = 16'd9;
      default: SEL_ARR_3_6_9_3_rg_cntr_MINUS_2_4___d44 =
		   16'b1010101010101010 /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        finalo_0_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	finalo_0_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	finalo_0_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	finalo_1_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	finalo_1_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	finalo_1_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	finalo_2_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	finalo_2_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	finalo_2_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	inp_Astream <= `BSV_ASSIGNMENT_DELAY 96'd0;
	inp_Bstream <= `BSV_ASSIGNMENT_DELAY 96'd0;
	out_stream <= `BSV_ASSIGNMENT_DELAY 96'd0;
	rg_cntr <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (finalo_0_0$EN)
	  finalo_0_0 <= `BSV_ASSIGNMENT_DELAY finalo_0_0$D_IN;
	if (finalo_0_1$EN)
	  finalo_0_1 <= `BSV_ASSIGNMENT_DELAY finalo_0_1$D_IN;
	if (finalo_0_2$EN)
	  finalo_0_2 <= `BSV_ASSIGNMENT_DELAY finalo_0_2$D_IN;
	if (finalo_1_0$EN)
	  finalo_1_0 <= `BSV_ASSIGNMENT_DELAY finalo_1_0$D_IN;
	if (finalo_1_1$EN)
	  finalo_1_1 <= `BSV_ASSIGNMENT_DELAY finalo_1_1$D_IN;
	if (finalo_1_2$EN)
	  finalo_1_2 <= `BSV_ASSIGNMENT_DELAY finalo_1_2$D_IN;
	if (finalo_2_0$EN)
	  finalo_2_0 <= `BSV_ASSIGNMENT_DELAY finalo_2_0$D_IN;
	if (finalo_2_1$EN)
	  finalo_2_1 <= `BSV_ASSIGNMENT_DELAY finalo_2_1$D_IN;
	if (finalo_2_2$EN)
	  finalo_2_2 <= `BSV_ASSIGNMENT_DELAY finalo_2_2$D_IN;
	if (inp_Astream$EN)
	  inp_Astream <= `BSV_ASSIGNMENT_DELAY inp_Astream$D_IN;
	if (inp_Bstream$EN)
	  inp_Bstream <= `BSV_ASSIGNMENT_DELAY inp_Bstream$D_IN;
	if (out_stream$EN)
	  out_stream <= `BSV_ASSIGNMENT_DELAY out_stream$D_IN;
	if (rg_cntr$EN) rg_cntr <= `BSV_ASSIGNMENT_DELAY rg_cntr$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    finalo_0_0 = 32'hAAAAAAAA;
    finalo_0_1 = 32'hAAAAAAAA;
    finalo_0_2 = 32'hAAAAAAAA;
    finalo_1_0 = 32'hAAAAAAAA;
    finalo_1_1 = 32'hAAAAAAAA;
    finalo_1_2 = 32'hAAAAAAAA;
    finalo_2_0 = 32'hAAAAAAAA;
    finalo_2_1 = 32'hAAAAAAAA;
    finalo_2_2 = 32'hAAAAAAAA;
    inp_Astream = 96'hAAAAAAAAAAAAAAAAAAAAAAAA;
    inp_Bstream = 96'hAAAAAAAAAAAAAAAAAAAAAAAA;
    out_stream = 96'hAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_cntr = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (NOT_rg_cntr_SLT_1___d4)
	begin
	  v__h2983 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (NOT_rg_cntr_SLT_1___d4) $display(v__h2983, " [systole]\n");
    if (RST_N != `BSV_RESET_VALUE) if (rg_cntr == 32'd20) $finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr ^ 32'h80000000) < 32'h80000003 && !rg_cntr[31])
	$display("\na\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr ^ 32'h80000000) < 32'h80000003 && !rg_cntr[31])
	$write("%0d.",
	       $signed({ SEL_ARR_1_2_3_5_rg_cntr___d16[15],
			 SEL_ARR_1_2_3_5_rg_cntr___d16 }));
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr ^ 32'h80000000) < 32'h80000003 && !rg_cntr[31])
	$write("%0d", 49'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr ^ 32'h80000000) < 32'h80000003 && !rg_cntr[31])
	$write("%0d", 49'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr ^ 32'h80000000) < 32'h80000003 && !rg_cntr[31])
	$write("%0d", 49'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr ^ 32'h80000000) < 32'h80000003 && !rg_cntr[31])
	$write("%0d", 49'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr ^ 32'h80000000) < 32'h80000003 && !rg_cntr[31])
	$write("%0d", 49'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr ^ 32'h80000000) < 32'h80000003 && !rg_cntr[31])
	$display("\nb\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr ^ 32'h80000000) < 32'h80000003 && !rg_cntr[31])
	$write("%0d.",
	       $signed({ SEL_ARR_1_4_7_9_rg_cntr___d20[15],
			 SEL_ARR_1_4_7_9_rg_cntr___d20 }));
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr ^ 32'h80000000) < 32'h80000003 && !rg_cntr[31])
	$write("%0d", 49'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr ^ 32'h80000000) < 32'h80000003 && !rg_cntr[31])
	$write("%0d", 49'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr ^ 32'h80000000) < 32'h80000003 && !rg_cntr[31])
	$write("%0d", 49'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr ^ 32'h80000000) < 32'h80000003 && !rg_cntr[31])
	$write("%0d", 49'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr ^ 32'h80000000) < 32'h80000003 && !rg_cntr[31])
	$write("%0d", 49'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr_MINUS_1___d23 ^ 32'h80000000) < 32'h80000003 &&
	  NOT_rg_cntr_SLT_1___d4)
	$display("\na\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr_MINUS_1___d23 ^ 32'h80000000) < 32'h80000003 &&
	  NOT_rg_cntr_SLT_1___d4)
	$write("%0d.",
	       $signed({ SEL_ARR_4_5_6_6_rg_cntr_MINUS_1_3___d27[15],
			 SEL_ARR_4_5_6_6_rg_cntr_MINUS_1_3___d27 }));
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr_MINUS_1___d23 ^ 32'h80000000) < 32'h80000003 &&
	  NOT_rg_cntr_SLT_1___d4)
	$write("%0d", 49'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr_MINUS_1___d23 ^ 32'h80000000) < 32'h80000003 &&
	  NOT_rg_cntr_SLT_1___d4)
	$write("%0d", 49'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr_MINUS_1___d23 ^ 32'h80000000) < 32'h80000003 &&
	  NOT_rg_cntr_SLT_1___d4)
	$write("%0d", 49'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr_MINUS_1___d23 ^ 32'h80000000) < 32'h80000003 &&
	  NOT_rg_cntr_SLT_1___d4)
	$write("%0d", 49'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr_MINUS_1___d23 ^ 32'h80000000) < 32'h80000003 &&
	  NOT_rg_cntr_SLT_1___d4)
	$write("%0d", 49'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr_MINUS_1___d23 ^ 32'h80000000) < 32'h80000003 &&
	  NOT_rg_cntr_SLT_1___d4)
	$display("\nb\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr_MINUS_1___d23 ^ 32'h80000000) < 32'h80000003 &&
	  NOT_rg_cntr_SLT_1___d4)
	$write("%0d.",
	       $signed({ SEL_ARR_2_5_8_0_rg_cntr_MINUS_1_3___d31[15],
			 SEL_ARR_2_5_8_0_rg_cntr_MINUS_1_3___d31 }));
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr_MINUS_1___d23 ^ 32'h80000000) < 32'h80000003 &&
	  NOT_rg_cntr_SLT_1___d4)
	$write("%0d", 49'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr_MINUS_1___d23 ^ 32'h80000000) < 32'h80000003 &&
	  NOT_rg_cntr_SLT_1___d4)
	$write("%0d", 49'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr_MINUS_1___d23 ^ 32'h80000000) < 32'h80000003 &&
	  NOT_rg_cntr_SLT_1___d4)
	$write("%0d", 49'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr_MINUS_1___d23 ^ 32'h80000000) < 32'h80000003 &&
	  NOT_rg_cntr_SLT_1___d4)
	$write("%0d", 49'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr_MINUS_1___d23 ^ 32'h80000000) < 32'h80000003 &&
	  NOT_rg_cntr_SLT_1___d4)
	$write("%0d", 49'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr_MINUS_2___d34 ^ 32'h80000000) < 32'h80000003 &&
	  (rg_cntr ^ 32'h80000000) >= 32'h80000002)
	$display("\na\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr_MINUS_2___d34 ^ 32'h80000000) < 32'h80000003 &&
	  (rg_cntr ^ 32'h80000000) >= 32'h80000002)
	$write("%0d.",
	       $signed({ SEL_ARR_7_8_9_9_rg_cntr_MINUS_2_4___d40[15],
			 SEL_ARR_7_8_9_9_rg_cntr_MINUS_2_4___d40 }));
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr_MINUS_2___d34 ^ 32'h80000000) < 32'h80000003 &&
	  (rg_cntr ^ 32'h80000000) >= 32'h80000002)
	$write("%0d", 49'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr_MINUS_2___d34 ^ 32'h80000000) < 32'h80000003 &&
	  (rg_cntr ^ 32'h80000000) >= 32'h80000002)
	$write("%0d", 49'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr_MINUS_2___d34 ^ 32'h80000000) < 32'h80000003 &&
	  (rg_cntr ^ 32'h80000000) >= 32'h80000002)
	$write("%0d", 49'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr_MINUS_2___d34 ^ 32'h80000000) < 32'h80000003 &&
	  (rg_cntr ^ 32'h80000000) >= 32'h80000002)
	$write("%0d", 49'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr_MINUS_2___d34 ^ 32'h80000000) < 32'h80000003 &&
	  (rg_cntr ^ 32'h80000000) >= 32'h80000002)
	$write("%0d", 49'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr_MINUS_2___d34 ^ 32'h80000000) < 32'h80000003 &&
	  (rg_cntr ^ 32'h80000000) >= 32'h80000002)
	$display("\nb\n");
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr_MINUS_2___d34 ^ 32'h80000000) < 32'h80000003 &&
	  (rg_cntr ^ 32'h80000000) >= 32'h80000002)
	$write("%0d.",
	       $signed({ SEL_ARR_3_6_9_3_rg_cntr_MINUS_2_4___d44[15],
			 SEL_ARR_3_6_9_3_rg_cntr_MINUS_2_4___d44 }));
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr_MINUS_2___d34 ^ 32'h80000000) < 32'h80000003 &&
	  (rg_cntr ^ 32'h80000000) >= 32'h80000002)
	$write("%0d", 49'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr_MINUS_2___d34 ^ 32'h80000000) < 32'h80000003 &&
	  (rg_cntr ^ 32'h80000000) >= 32'h80000002)
	$write("%0d", 49'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr_MINUS_2___d34 ^ 32'h80000000) < 32'h80000003 &&
	  (rg_cntr ^ 32'h80000000) >= 32'h80000002)
	$write("%0d", 49'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr_MINUS_2___d34 ^ 32'h80000000) < 32'h80000003 &&
	  (rg_cntr ^ 32'h80000000) >= 32'h80000002)
	$write("%0d", 49'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if ((rg_cntr_MINUS_2___d34 ^ 32'h80000000) < 32'h80000003 &&
	  (rg_cntr ^ 32'h80000000) >= 32'h80000002)
	$write("%0d", 49'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream)
	$display("\nbruh %d\n", $signed(rg_cntr));
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream)
	$display("\nincoming %d\n", $signed(x__h9859));
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream &&
	  SEXT_myMult_get_out_stream__6_BITS_31_TO_16_7___d68[16] &&
	  myMult$get_out_stream[15:0] != 16'd0 &&
	  SEXT_myMult_get_out_stream__6_BITS_31_TO_16_7___d68 == 17'd131071)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream &&
	  SEXT_myMult_get_out_stream__6_BITS_31_TO_16_7___d68[16] &&
	  myMult$get_out_stream[15:0] != 16'd0 &&
	  SEXT_myMult_get_out_stream__6_BITS_31_TO_16_7___d68 != 17'd131071)
	$write("%0d.",
	       $signed(SEXT_myMult_get_out_stream__6_BITS_31_TO_16_7___d68 +
		       17'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream &&
	  (!SEXT_myMult_get_out_stream__6_BITS_31_TO_16_7___d68[16] ||
	   myMult$get_out_stream[15:0] == 16'd0))
	$write("%0d.",
	       $signed(SEXT_myMult_get_out_stream__6_BITS_31_TO_16_7___d68));
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream) $write("%0d", digit__h9383);
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream) $write("%0d", digit__h9450);
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream) $write("%0d", digit__h9539);
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream) $write("%0d", digit__h9628);
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream) $write("%0d", digit__h9717);
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream && !x__h9859[31] &&
	  (x__h9859 ^ 32'h80000000) < 32'h80000003)
	begin
	  v__h10226 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream && !x__h9859[31] &&
	  (x__h9859 ^ 32'h80000000) < 32'h80000003)
	$display(v__h10226,
		 " hooo %d,%d\n",
		 $signed(32'd0),
		 $signed(x__h9859));
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream)
	$display("\nincoming %d\n",
		 $signed(rg_cntr_MINUS_1_3_MINUS_3_37_MINUS_7___d138));
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream &&
	  SEXT_myMult_get_out_stream__6_BITS_63_TO_48_40___d141[16] &&
	  myMult$get_out_stream[47:32] != 16'd0 &&
	  SEXT_myMult_get_out_stream__6_BITS_63_TO_48_40___d141 == 17'd131071)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream &&
	  SEXT_myMult_get_out_stream__6_BITS_63_TO_48_40___d141[16] &&
	  myMult$get_out_stream[47:32] != 16'd0 &&
	  SEXT_myMult_get_out_stream__6_BITS_63_TO_48_40___d141 != 17'd131071)
	$write("%0d.",
	       $signed(SEXT_myMult_get_out_stream__6_BITS_63_TO_48_40___d141 +
		       17'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream &&
	  (!SEXT_myMult_get_out_stream__6_BITS_63_TO_48_40___d141[16] ||
	   myMult$get_out_stream[47:32] == 16'd0))
	$write("%0d.",
	       $signed(SEXT_myMult_get_out_stream__6_BITS_63_TO_48_40___d141));
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream) $write("%0d", digit__h10635);
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream) $write("%0d", digit__h10702);
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream) $write("%0d", digit__h10791);
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream) $write("%0d", digit__h10880);
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream) $write("%0d", digit__h10969);
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream &&
	  !rg_cntr_MINUS_1_3_MINUS_3_37_MINUS_7___d138[31] &&
	  (rg_cntr_MINUS_1_3_MINUS_3_37_MINUS_7___d138 ^ 32'h80000000) <
	  32'h80000003)
	begin
	  v__h11381 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream &&
	  !rg_cntr_MINUS_1_3_MINUS_3_37_MINUS_7___d138[31] &&
	  (rg_cntr_MINUS_1_3_MINUS_3_37_MINUS_7___d138 ^ 32'h80000000) <
	  32'h80000003)
	$display(v__h11381,
		 " hooo %d,%d\n",
		 $signed(32'd1),
		 $signed(rg_cntr_MINUS_1_3_MINUS_3_37_MINUS_7___d138));
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream)
	$display("\nincoming %d\n",
		 $signed(rg_cntr_MINUS_2_4_MINUS_3_10_MINUS_7___d211));
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream &&
	  SEXT_myMult_get_out_stream__6_BITS_95_TO_80_13___d214[16] &&
	  myMult$get_out_stream[79:64] != 16'd0 &&
	  SEXT_myMult_get_out_stream__6_BITS_95_TO_80_13___d214 == 17'd131071)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream &&
	  SEXT_myMult_get_out_stream__6_BITS_95_TO_80_13___d214[16] &&
	  myMult$get_out_stream[79:64] != 16'd0 &&
	  SEXT_myMult_get_out_stream__6_BITS_95_TO_80_13___d214 != 17'd131071)
	$write("%0d.",
	       $signed(SEXT_myMult_get_out_stream__6_BITS_95_TO_80_13___d214 +
		       17'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream &&
	  (!SEXT_myMult_get_out_stream__6_BITS_95_TO_80_13___d214[16] ||
	   myMult$get_out_stream[79:64] == 16'd0))
	$write("%0d.",
	       $signed(SEXT_myMult_get_out_stream__6_BITS_95_TO_80_13___d214));
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream) $write("%0d", digit__h11790);
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream) $write("%0d", digit__h11857);
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream) $write("%0d", digit__h11946);
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream) $write("%0d", digit__h12035);
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream) $write("%0d", digit__h12124);
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream &&
	  !rg_cntr_MINUS_2_4_MINUS_3_10_MINUS_7___d211[31] &&
	  (rg_cntr_MINUS_2_4_MINUS_3_10_MINUS_7___d211 ^ 32'h80000000) <
	  32'h80000003)
	begin
	  v__h12536 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (myMult$RDY_get_out_stream &&
	  !rg_cntr_MINUS_2_4_MINUS_3_10_MINUS_7___d211[31] &&
	  (rg_cntr_MINUS_2_4_MINUS_3_10_MINUS_7___d211 ^ 32'h80000000) <
	  32'h80000003)
	$display(v__h12536,
		 " hooo %d,%d\n",
		 $signed(32'd2),
		 $signed(rg_cntr_MINUS_2_4_MINUS_3_10_MINUS_7___d211));
  end
  // synopsys translate_on
endmodule  // tb_mat_mult

