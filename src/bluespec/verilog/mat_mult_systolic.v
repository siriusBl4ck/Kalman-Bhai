//
// Generated by Bluespec Compiler, version 2021.12.1-27-g9a7d5e05 (build 9a7d5e05)
//
// On Sun May  1 12:45:14 IST 2022
//
//
// Ports:
// Name                         I/O  size props
// RDY_feed_inp_stream            O     1 const
// get_out_stream                 O   288 reg
// RDY_get_out_stream             O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// feed_inp_stream_a_stream       I    96
// feed_inp_stream_b_stream       I    96 unused
// EN_feed_inp_stream             I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mat_mult_systolic(CLK,
			 RST_N,

			 feed_inp_stream_a_stream,
			 feed_inp_stream_b_stream,
			 EN_feed_inp_stream,
			 RDY_feed_inp_stream,

			 get_out_stream,
			 RDY_get_out_stream);
  input  CLK;
  input  RST_N;

  // action method feed_inp_stream
  input  [95 : 0] feed_inp_stream_a_stream;
  input  [95 : 0] feed_inp_stream_b_stream;
  input  EN_feed_inp_stream;
  output RDY_feed_inp_stream;

  // value method get_out_stream
  output [287 : 0] get_out_stream;
  output RDY_get_out_stream;

  // signals for module outputs
  wire [287 : 0] get_out_stream;
  wire RDY_feed_inp_stream, RDY_get_out_stream;

  // register rg_inp_a_0
  reg [31 : 0] rg_inp_a_0;
  wire [31 : 0] rg_inp_a_0$D_IN;
  wire rg_inp_a_0$EN;

  // register rg_inp_a_1
  reg [31 : 0] rg_inp_a_1;
  wire [31 : 0] rg_inp_a_1$D_IN;
  wire rg_inp_a_1$EN;

  // register rg_inp_a_2
  reg [31 : 0] rg_inp_a_2;
  wire [31 : 0] rg_inp_a_2$D_IN;
  wire rg_inp_a_2$EN;

  // register rg_inp_b_0
  reg [31 : 0] rg_inp_b_0;
  wire [31 : 0] rg_inp_b_0$D_IN;
  wire rg_inp_b_0$EN;

  // register rg_inp_b_1
  reg [31 : 0] rg_inp_b_1;
  wire [31 : 0] rg_inp_b_1$D_IN;
  wire rg_inp_b_1$EN;

  // register rg_inp_b_2
  reg [31 : 0] rg_inp_b_2;
  wire [31 : 0] rg_inp_b_2$D_IN;
  wire rg_inp_b_2$EN;

  // register rg_stage0_rdy
  reg rg_stage0_rdy;
  wire rg_stage0_rdy$D_IN, rg_stage0_rdy$EN;

  // ports of submodule pe_0_0
  wire [31 : 0] pe_0_0$getA,
		pe_0_0$getB,
		pe_0_0$getC,
		pe_0_0$putA_in_a,
		pe_0_0$putB_in_b;
  wire pe_0_0$EN_putA, pe_0_0$EN_putB;

  // ports of submodule pe_0_1
  wire [31 : 0] pe_0_1$getA,
		pe_0_1$getB,
		pe_0_1$getC,
		pe_0_1$putA_in_a,
		pe_0_1$putB_in_b;
  wire pe_0_1$EN_putA, pe_0_1$EN_putB;

  // ports of submodule pe_0_2
  wire [31 : 0] pe_0_2$getB, pe_0_2$getC, pe_0_2$putA_in_a, pe_0_2$putB_in_b;
  wire pe_0_2$EN_putA, pe_0_2$EN_putB;

  // ports of submodule pe_1_0
  wire [31 : 0] pe_1_0$getA,
		pe_1_0$getB,
		pe_1_0$getC,
		pe_1_0$putA_in_a,
		pe_1_0$putB_in_b;
  wire pe_1_0$EN_putA, pe_1_0$EN_putB;

  // ports of submodule pe_1_1
  wire [31 : 0] pe_1_1$getA,
		pe_1_1$getB,
		pe_1_1$getC,
		pe_1_1$putA_in_a,
		pe_1_1$putB_in_b;
  wire pe_1_1$EN_putA, pe_1_1$EN_putB;

  // ports of submodule pe_1_2
  wire [31 : 0] pe_1_2$getB, pe_1_2$getC, pe_1_2$putA_in_a, pe_1_2$putB_in_b;
  wire pe_1_2$EN_putA, pe_1_2$EN_putB;

  // ports of submodule pe_2_0
  wire [31 : 0] pe_2_0$getA, pe_2_0$getC, pe_2_0$putA_in_a, pe_2_0$putB_in_b;
  wire pe_2_0$EN_putA, pe_2_0$EN_putB;

  // ports of submodule pe_2_1
  wire [31 : 0] pe_2_1$getA, pe_2_1$getC, pe_2_1$putA_in_a, pe_2_1$putB_in_b;
  wire pe_2_1$EN_putA, pe_2_1$EN_putB;

  // ports of submodule pe_2_2
  wire [31 : 0] pe_2_2$getC, pe_2_2$putA_in_a, pe_2_2$putB_in_b;
  wire pe_2_2$EN_putA, pe_2_2$EN_putB;

  // action method feed_inp_stream
  assign RDY_feed_inp_stream = 1'd1 ;

  // value method get_out_stream
  assign get_out_stream =
	     { pe_2_2$getC,
	       pe_2_1$getC,
	       pe_2_0$getC,
	       pe_1_2$getC,
	       pe_1_1$getC,
	       pe_1_0$getC,
	       pe_0_2$getC,
	       pe_0_1$getC,
	       pe_0_0$getC } ;
  assign RDY_get_out_stream = 1'd1 ;

  // submodule pe_0_0
  mk_pe pe_0_0(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_0_0$putA_in_a),
	       .putB_in_b(pe_0_0$putB_in_b),
	       .EN_putA(pe_0_0$EN_putA),
	       .EN_putB(pe_0_0$EN_putB),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_0_0$getA),
	       .RDY_getA(),
	       .getB(pe_0_0$getB),
	       .RDY_getB(),
	       .getC(pe_0_0$getC),
	       .RDY_getC());

  // submodule pe_0_1
  mk_pe pe_0_1(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_0_1$putA_in_a),
	       .putB_in_b(pe_0_1$putB_in_b),
	       .EN_putA(pe_0_1$EN_putA),
	       .EN_putB(pe_0_1$EN_putB),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_0_1$getA),
	       .RDY_getA(),
	       .getB(pe_0_1$getB),
	       .RDY_getB(),
	       .getC(pe_0_1$getC),
	       .RDY_getC());

  // submodule pe_0_2
  mk_pe pe_0_2(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_0_2$putA_in_a),
	       .putB_in_b(pe_0_2$putB_in_b),
	       .EN_putA(pe_0_2$EN_putA),
	       .EN_putB(pe_0_2$EN_putB),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(),
	       .RDY_getA(),
	       .getB(pe_0_2$getB),
	       .RDY_getB(),
	       .getC(pe_0_2$getC),
	       .RDY_getC());

  // submodule pe_1_0
  mk_pe pe_1_0(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_1_0$putA_in_a),
	       .putB_in_b(pe_1_0$putB_in_b),
	       .EN_putA(pe_1_0$EN_putA),
	       .EN_putB(pe_1_0$EN_putB),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_1_0$getA),
	       .RDY_getA(),
	       .getB(pe_1_0$getB),
	       .RDY_getB(),
	       .getC(pe_1_0$getC),
	       .RDY_getC());

  // submodule pe_1_1
  mk_pe pe_1_1(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_1_1$putA_in_a),
	       .putB_in_b(pe_1_1$putB_in_b),
	       .EN_putA(pe_1_1$EN_putA),
	       .EN_putB(pe_1_1$EN_putB),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_1_1$getA),
	       .RDY_getA(),
	       .getB(pe_1_1$getB),
	       .RDY_getB(),
	       .getC(pe_1_1$getC),
	       .RDY_getC());

  // submodule pe_1_2
  mk_pe pe_1_2(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_1_2$putA_in_a),
	       .putB_in_b(pe_1_2$putB_in_b),
	       .EN_putA(pe_1_2$EN_putA),
	       .EN_putB(pe_1_2$EN_putB),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(),
	       .RDY_getA(),
	       .getB(pe_1_2$getB),
	       .RDY_getB(),
	       .getC(pe_1_2$getC),
	       .RDY_getC());

  // submodule pe_2_0
  mk_pe pe_2_0(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_2_0$putA_in_a),
	       .putB_in_b(pe_2_0$putB_in_b),
	       .EN_putA(pe_2_0$EN_putA),
	       .EN_putB(pe_2_0$EN_putB),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_2_0$getA),
	       .RDY_getA(),
	       .getB(),
	       .RDY_getB(),
	       .getC(pe_2_0$getC),
	       .RDY_getC());

  // submodule pe_2_1
  mk_pe pe_2_1(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_2_1$putA_in_a),
	       .putB_in_b(pe_2_1$putB_in_b),
	       .EN_putA(pe_2_1$EN_putA),
	       .EN_putB(pe_2_1$EN_putB),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(pe_2_1$getA),
	       .RDY_getA(),
	       .getB(),
	       .RDY_getB(),
	       .getC(pe_2_1$getC),
	       .RDY_getC());

  // submodule pe_2_2
  mk_pe pe_2_2(.CLK(CLK),
	       .RST_N(RST_N),
	       .putA_in_a(pe_2_2$putA_in_a),
	       .putB_in_b(pe_2_2$putB_in_b),
	       .EN_putA(pe_2_2$EN_putA),
	       .EN_putB(pe_2_2$EN_putB),
	       .RDY_putA(),
	       .RDY_putB(),
	       .getA(),
	       .RDY_getA(),
	       .getB(),
	       .RDY_getB(),
	       .getC(pe_2_2$getC),
	       .RDY_getC());

  // register rg_inp_a_0
  assign rg_inp_a_0$D_IN =
	     EN_feed_inp_stream ? feed_inp_stream_a_stream[31:0] : 32'd0 ;
  assign rg_inp_a_0$EN = EN_feed_inp_stream ;

  // register rg_inp_a_1
  assign rg_inp_a_1$D_IN =
	     EN_feed_inp_stream ? feed_inp_stream_a_stream[63:32] : 32'd0 ;
  assign rg_inp_a_1$EN = EN_feed_inp_stream ;

  // register rg_inp_a_2
  assign rg_inp_a_2$D_IN =
	     EN_feed_inp_stream ? feed_inp_stream_a_stream[95:64] : 32'd0 ;
  assign rg_inp_a_2$EN = EN_feed_inp_stream ;

  // register rg_inp_b_0
  assign rg_inp_b_0$D_IN =
	     EN_feed_inp_stream ? feed_inp_stream_a_stream[31:0] : 32'd0 ;
  assign rg_inp_b_0$EN = EN_feed_inp_stream ;

  // register rg_inp_b_1
  assign rg_inp_b_1$D_IN =
	     EN_feed_inp_stream ? feed_inp_stream_a_stream[63:32] : 32'd0 ;
  assign rg_inp_b_1$EN = EN_feed_inp_stream ;

  // register rg_inp_b_2
  assign rg_inp_b_2$D_IN =
	     EN_feed_inp_stream ? feed_inp_stream_a_stream[95:64] : 32'd0 ;
  assign rg_inp_b_2$EN = EN_feed_inp_stream ;

  // register rg_stage0_rdy
  assign rg_stage0_rdy$D_IN = EN_feed_inp_stream ;
  assign rg_stage0_rdy$EN = 1'd1 ;

  // submodule pe_0_0
  assign pe_0_0$putA_in_a = rg_inp_a_0 ;
  assign pe_0_0$putB_in_b = rg_inp_b_0 ;
  assign pe_0_0$EN_putA = rg_stage0_rdy ;
  assign pe_0_0$EN_putB = rg_stage0_rdy ;

  // submodule pe_0_1
  assign pe_0_1$putA_in_a = pe_0_0$getA ;
  assign pe_0_1$putB_in_b = rg_inp_b_1 ;
  assign pe_0_1$EN_putA = rg_stage0_rdy ;
  assign pe_0_1$EN_putB = rg_stage0_rdy ;

  // submodule pe_0_2
  assign pe_0_2$putA_in_a = pe_0_1$getA ;
  assign pe_0_2$putB_in_b = rg_inp_b_2 ;
  assign pe_0_2$EN_putA = rg_stage0_rdy ;
  assign pe_0_2$EN_putB = rg_stage0_rdy ;

  // submodule pe_1_0
  assign pe_1_0$putA_in_a = rg_inp_a_1 ;
  assign pe_1_0$putB_in_b = pe_0_0$getB ;
  assign pe_1_0$EN_putA = rg_stage0_rdy ;
  assign pe_1_0$EN_putB = rg_stage0_rdy ;

  // submodule pe_1_1
  assign pe_1_1$putA_in_a = pe_1_0$getA ;
  assign pe_1_1$putB_in_b = pe_0_1$getB ;
  assign pe_1_1$EN_putA = rg_stage0_rdy ;
  assign pe_1_1$EN_putB = rg_stage0_rdy ;

  // submodule pe_1_2
  assign pe_1_2$putA_in_a = pe_1_1$getA ;
  assign pe_1_2$putB_in_b = pe_0_2$getB ;
  assign pe_1_2$EN_putA = rg_stage0_rdy ;
  assign pe_1_2$EN_putB = rg_stage0_rdy ;

  // submodule pe_2_0
  assign pe_2_0$putA_in_a = rg_inp_a_2 ;
  assign pe_2_0$putB_in_b = pe_1_0$getB ;
  assign pe_2_0$EN_putA = rg_stage0_rdy ;
  assign pe_2_0$EN_putB = rg_stage0_rdy ;

  // submodule pe_2_1
  assign pe_2_1$putA_in_a = pe_2_0$getA ;
  assign pe_2_1$putB_in_b = pe_1_1$getB ;
  assign pe_2_1$EN_putA = rg_stage0_rdy ;
  assign pe_2_1$EN_putB = rg_stage0_rdy ;

  // submodule pe_2_2
  assign pe_2_2$putA_in_a = pe_2_1$getA ;
  assign pe_2_2$putB_in_b = pe_1_2$getB ;
  assign pe_2_2$EN_putA = rg_stage0_rdy ;
  assign pe_2_2$EN_putB = rg_stage0_rdy ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_inp_a_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_inp_a_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_inp_a_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_inp_b_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_inp_b_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_inp_b_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_stage0_rdy <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rg_inp_a_0$EN)
	  rg_inp_a_0 <= `BSV_ASSIGNMENT_DELAY rg_inp_a_0$D_IN;
	if (rg_inp_a_1$EN)
	  rg_inp_a_1 <= `BSV_ASSIGNMENT_DELAY rg_inp_a_1$D_IN;
	if (rg_inp_a_2$EN)
	  rg_inp_a_2 <= `BSV_ASSIGNMENT_DELAY rg_inp_a_2$D_IN;
	if (rg_inp_b_0$EN)
	  rg_inp_b_0 <= `BSV_ASSIGNMENT_DELAY rg_inp_b_0$D_IN;
	if (rg_inp_b_1$EN)
	  rg_inp_b_1 <= `BSV_ASSIGNMENT_DELAY rg_inp_b_1$D_IN;
	if (rg_inp_b_2$EN)
	  rg_inp_b_2 <= `BSV_ASSIGNMENT_DELAY rg_inp_b_2$D_IN;
	if (rg_stage0_rdy$EN)
	  rg_stage0_rdy <= `BSV_ASSIGNMENT_DELAY rg_stage0_rdy$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_inp_a_0 = 32'hAAAAAAAA;
    rg_inp_a_1 = 32'hAAAAAAAA;
    rg_inp_a_2 = 32'hAAAAAAAA;
    rg_inp_b_0 = 32'hAAAAAAAA;
    rg_inp_b_1 = 32'hAAAAAAAA;
    rg_inp_b_2 = 32'hAAAAAAAA;
    rg_stage0_rdy = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mat_mult_systolic

